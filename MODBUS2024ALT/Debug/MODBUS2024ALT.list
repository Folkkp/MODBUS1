
MODBUS2024ALT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064d8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080066b0  080066b0  000076b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066f0  080066f0  0000820c  2**0
                  CONTENTS
  4 .ARM          00000008  080066f0  080066f0  000076f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066f8  080066f8  0000820c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066f8  080066f8  000076f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066fc  080066fc  000076fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08006700  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a04  2000020c  0800690c  0000820c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c10  0800690c  00008c10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000820c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015803  00000000  00000000  0000823c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000290d  00000000  00000000  0001da3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  00020350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000da0  00000000  00000000  000214b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000263d1  00000000  00000000  00022250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001491e  00000000  00000000  00048621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc1d3  00000000  00000000  0005cf3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00159112  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049d8  00000000  00000000  00159158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  0015db30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000020c 	.word	0x2000020c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006698 	.word	0x08006698

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000210 	.word	0x20000210
 8000214:	08006698 	.word	0x08006698

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 800050c:	4b0d      	ldr	r3, [pc, #52]	@ (8000544 <modbus_1t5_Timeout+0x3c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2201      	movs	r2, #1
 8000512:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000514:	4b0b      	ldr	r3, [pc, #44]	@ (8000544 <modbus_1t5_Timeout+0x3c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	691b      	ldr	r3, [r3, #16]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2200      	movs	r2, #0
 800051e:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8000520:	4b08      	ldr	r3, [pc, #32]	@ (8000544 <modbus_1t5_Timeout+0x3c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	691b      	ldr	r3, [r3, #16]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <modbus_1t5_Timeout+0x3c>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	691b      	ldr	r3, [r3, #16]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f042 0201 	orr.w	r2, r2, #1
 8000536:	601a      	str	r2, [r3, #0]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000228 	.word	0x20000228

08000548 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000550:	4b04      	ldr	r3, [pc, #16]	@ (8000564 <modbus_3t5_Timeout+0x1c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2201      	movs	r2, #1
 8000556:	755a      	strb	r2, [r3, #21]

}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	20000228 	.word	0x20000228

08000568 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f004 ff2f 	bl	80053d4 <HAL_UART_GetError>
 8000576:	4603      	mov	r3, r0
 8000578:	2b20      	cmp	r3, #32
 800057a:	d101      	bne.n	8000580 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 800057c:	f7ff ffc4 	bl	8000508 <modbus_1t5_Timeout>

	}
}
 8000580:	bf00      	nop
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}

08000588 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000592:	4a25      	ldr	r2, [pc, #148]	@ (8000628 <Modbus_init+0xa0>)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000598:	4b23      	ldr	r3, [pc, #140]	@ (8000628 <Modbus_init+0xa0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	683a      	ldr	r2, [r7, #0]
 800059e:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	691b      	ldr	r3, [r3, #16]
 80005a4:	4a21      	ldr	r2, [pc, #132]	@ (800062c <Modbus_init+0xa4>)
 80005a6:	210e      	movs	r1, #14
 80005a8:	4618      	mov	r0, r3
 80005aa:	f003 fd15 	bl	8003fd8 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	68db      	ldr	r3, [r3, #12]
 80005b2:	2110      	movs	r1, #16
 80005b4:	4618      	mov	r0, r3
 80005b6:	f004 feb7 	bl	8005328 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	4618      	mov	r0, r3
 80005c0:	f004 fece 	bl	8005360 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	4a19      	ldr	r2, [pc, #100]	@ (8000630 <Modbus_init+0xa8>)
 80005ca:	2104      	movs	r1, #4
 80005cc:	4618      	mov	r0, r3
 80005ce:	f004 f995 	bl	80048fc <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80005d2:	4b15      	ldr	r3, [pc, #84]	@ (8000628 <Modbus_init+0xa0>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80005d8:	4b13      	ldr	r3, [pc, #76]	@ (8000628 <Modbus_init+0xa0>)
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	4b12      	ldr	r3, [pc, #72]	@ (8000628 <Modbus_init+0xa0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80005e4:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80005e8:	4413      	add	r3, r2
 80005ea:	3302      	adds	r3, #2
 80005ec:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80005f0:	4619      	mov	r1, r3
 80005f2:	f004 fabd 	bl	8004b70 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80005f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000628 <Modbus_init+0xa0>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	691b      	ldr	r3, [r3, #16]
 80005fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000600:	b2db      	uxtb	r3, r3
 8000602:	2b01      	cmp	r3, #1
 8000604:	d10c      	bne.n	8000620 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000606:	4b08      	ldr	r3, [pc, #32]	@ (8000628 <Modbus_init+0xa0>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	691b      	ldr	r3, [r3, #16]
 800060c:	4618      	mov	r0, r3
 800060e:	f003 f881 	bl	8003714 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000612:	4b05      	ldr	r3, [pc, #20]	@ (8000628 <Modbus_init+0xa0>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	691b      	ldr	r3, [r3, #16]
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f003 f95a 	bl	80038d4 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000228 	.word	0x20000228
 800062c:	08000549 	.word	0x08000549
 8000630:	08000569 	.word	0x08000569

08000634 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	460b      	mov	r3, r1
 800063e:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000640:	23ff      	movs	r3, #255	@ 0xff
 8000642:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000644:	23ff      	movs	r3, #255	@ 0xff
 8000646:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000648:	e013      	b.n	8000672 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	1c5a      	adds	r2, r3, #1
 800064e:	607a      	str	r2, [r7, #4]
 8000650:	781a      	ldrb	r2, [r3, #0]
 8000652:	7bbb      	ldrb	r3, [r7, #14]
 8000654:	4053      	eors	r3, r2
 8000656:	b2db      	uxtb	r3, r3
 8000658:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800065a:	4a0f      	ldr	r2, [pc, #60]	@ (8000698 <CRC16+0x64>)
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	4413      	add	r3, r2
 8000660:	781a      	ldrb	r2, [r3, #0]
 8000662:	7bfb      	ldrb	r3, [r7, #15]
 8000664:	4053      	eors	r3, r2
 8000666:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000668:	4a0c      	ldr	r2, [pc, #48]	@ (800069c <CRC16+0x68>)
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	4413      	add	r3, r2
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8000672:	883b      	ldrh	r3, [r7, #0]
 8000674:	1e5a      	subs	r2, r3, #1
 8000676:	803a      	strh	r2, [r7, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d1e6      	bne.n	800064a <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	021b      	lsls	r3, r3, #8
 8000680:	b21a      	sxth	r2, r3
 8000682:	7bbb      	ldrb	r3, [r7, #14]
 8000684:	b21b      	sxth	r3, r3
 8000686:	4313      	orrs	r3, r2
 8000688:	b21b      	sxth	r3, r3
 800068a:	b29b      	uxth	r3, r3
}
 800068c:	4618      	mov	r0, r3
 800068e:	3714      	adds	r7, #20
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	20000100 	.word	0x20000100
 800069c:	20000000 	.word	0x20000000

080006a0 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80006a6:	4b7e      	ldr	r3, [pc, #504]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	7ddb      	ldrb	r3, [r3, #23]
 80006ac:	3b01      	subs	r3, #1
 80006ae:	2b03      	cmp	r3, #3
 80006b0:	d80a      	bhi.n	80006c8 <Modbus_Protocal_Worker+0x28>
 80006b2:	a201      	add	r2, pc, #4	@ (adr r2, 80006b8 <Modbus_Protocal_Worker+0x18>)
 80006b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b8:	080006d3 	.word	0x080006d3
 80006bc:	08000867 	.word	0x08000867
 80006c0:	0800075f 	.word	0x0800075f
 80006c4:	080007a3 	.word	0x080007a3
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80006c8:	4b75      	ldr	r3, [pc, #468]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2201      	movs	r2, #1
 80006ce:	75da      	strb	r2, [r3, #23]
		break;
 80006d0:	e0e1      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80006d2:	4b73      	ldr	r3, [pc, #460]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d006      	beq.n	80006ec <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80006de:	4b70      	ldr	r3, [pc, #448]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2202      	movs	r2, #2
 80006e4:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80006e6:	f000 f9cd 	bl	8000a84 <Modbus_Emission>
 80006ea:	e018      	b.n	800071e <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 80006ec:	4b6c      	ldr	r3, [pc, #432]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	68db      	ldr	r3, [r3, #12]
 80006f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80006f6:	4b6a      	ldr	r3, [pc, #424]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8000700:	b29b      	uxth	r3, r3
 8000702:	429a      	cmp	r2, r3
 8000704:	d00b      	beq.n	800071e <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8000706:	4b66      	ldr	r3, [pc, #408]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2200      	movs	r2, #0
 800070c:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800070e:	4b64      	ldr	r3, [pc, #400]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2200      	movs	r2, #0
 8000714:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8000716:	4b62      	ldr	r3, [pc, #392]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2203      	movs	r2, #3
 800071c:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 800071e:	4b60      	ldr	r3, [pc, #384]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000728:	2b20      	cmp	r3, #32
 800072a:	f040 80ad 	bne.w	8000888 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 800072e:	4b5c      	ldr	r3, [pc, #368]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2200      	movs	r2, #0
 8000734:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8000738:	4b59      	ldr	r3, [pc, #356]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800073e:	4b58      	ldr	r3, [pc, #352]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	4b57      	ldr	r3, [pc, #348]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 800074a:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800074e:	4413      	add	r3, r2
 8000750:	3302      	adds	r3, #2
 8000752:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000756:	4619      	mov	r1, r3
 8000758:	f004 fa0a 	bl	8004b70 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 800075c:	e094      	b.n	8000888 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800075e:	4b50      	ldr	r3, [pc, #320]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	7d1b      	ldrb	r3, [r3, #20]
 8000764:	2b00      	cmp	r3, #0
 8000766:	f000 8091 	beq.w	800088c <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800076a:	4b4d      	ldr	r3, [pc, #308]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	22fe      	movs	r2, #254	@ 0xfe
 8000770:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8000772:	4b4b      	ldr	r3, [pc, #300]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 800077c:	4b48      	ldr	r3, [pc, #288]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	68db      	ldr	r3, [r3, #12]
 8000782:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 800078c:	4b44      	ldr	r3, [pc, #272]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800078e:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8000790:	1a8a      	subs	r2, r1, r2
 8000792:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8000794:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8000798:	4b41      	ldr	r3, [pc, #260]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2204      	movs	r2, #4
 800079e:	75da      	strb	r2, [r3, #23]
		}
		break;
 80007a0:	e074      	b.n	800088c <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80007a2:	4b3f      	ldr	r3, [pc, #252]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80007aa:	f113 0f02 	cmn.w	r3, #2
 80007ae:	d150      	bne.n	8000852 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80007b0:	4b3b      	ldr	r3, [pc, #236]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2200      	movs	r2, #0
 80007b6:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80007b8:	4b39      	ldr	r3, [pc, #228]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f203 2272 	addw	r2, r3, #626	@ 0x272
 80007c0:	4b37      	ldr	r3, [pc, #220]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80007c8:	3b02      	subs	r3, #2
 80007ca:	4619      	mov	r1, r3
 80007cc:	4610      	mov	r0, r2
 80007ce:	f7ff ff31 	bl	8000634 <CRC16>
 80007d2:	4603      	mov	r3, r0
 80007d4:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80007d6:	793a      	ldrb	r2, [r7, #4]
 80007d8:	4b31      	ldr	r3, [pc, #196]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007da:	6819      	ldr	r1, [r3, #0]
 80007dc:	4b30      	ldr	r3, [pc, #192]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80007e4:	3b02      	subs	r3, #2
 80007e6:	440b      	add	r3, r1
 80007e8:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d10c      	bne.n	800080a <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80007f0:	797a      	ldrb	r2, [r7, #5]
 80007f2:	4b2b      	ldr	r3, [pc, #172]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007f4:	6819      	ldr	r1, [r3, #0]
 80007f6:	4b2a      	ldr	r3, [pc, #168]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80007fe:	3b01      	subs	r3, #1
 8000800:	440b      	add	r3, r1
 8000802:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000806:	429a      	cmp	r2, r3
 8000808:	d004      	beq.n	8000814 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800080a:	4b25      	ldr	r3, [pc, #148]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	22ff      	movs	r2, #255	@ 0xff
 8000810:	759a      	strb	r2, [r3, #22]
				break;
 8000812:	e040      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8000814:	4b22      	ldr	r3, [pc, #136]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 800081c:	4b20      	ldr	r3, [pc, #128]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	429a      	cmp	r2, r3
 8000824:	d113      	bne.n	800084e <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8000826:	4b1e      	ldr	r3, [pc, #120]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 800082e:	4b1c      	ldr	r3, [pc, #112]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8000836:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8000838:	4b19      	ldr	r3, [pc, #100]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000840:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8000842:	461a      	mov	r2, r3
 8000844:	f005 ff1a 	bl	800667c <memcpy>

			//execute command
			Modbus_frame_response();
 8000848:	f000 f904 	bl	8000a54 <Modbus_frame_response>
 800084c:	e001      	b.n	8000852 <Modbus_Protocal_Worker+0x1b2>
				break;
 800084e:	bf00      	nop
					}
		break;


	}
}
 8000850:	e021      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 8000852:	4b13      	ldr	r3, [pc, #76]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	7d5b      	ldrb	r3, [r3, #21]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d019      	beq.n	8000890 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 800085c:	4b10      	ldr	r3, [pc, #64]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2201      	movs	r2, #1
 8000862:	75da      	strb	r2, [r3, #23]
		break;
 8000864:	e014      	b.n	8000890 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000866:	4b0e      	ldr	r3, [pc, #56]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000870:	2b20      	cmp	r3, #32
 8000872:	d10f      	bne.n	8000894 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8000874:	4b0a      	ldr	r3, [pc, #40]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2200      	movs	r2, #0
 800087a:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 800087e:	4b08      	ldr	r3, [pc, #32]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2201      	movs	r2, #1
 8000884:	75da      	strb	r2, [r3, #23]
		break;
 8000886:	e005      	b.n	8000894 <Modbus_Protocal_Worker+0x1f4>
		break;
 8000888:	bf00      	nop
 800088a:	e004      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
		break;
 800088c:	bf00      	nop
 800088e:	e002      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
		break;
 8000890:	bf00      	nop
 8000892:	e000      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
		break;
 8000894:	bf00      	nop
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000228 	.word	0x20000228

080008a4 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80008aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	7e5b      	ldrb	r3, [r3, #25]
 80008b0:	021b      	lsls	r3, r3, #8
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	4a1a      	ldr	r2, [pc, #104]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008b6:	6812      	ldr	r2, [r2, #0]
 80008b8:	7e92      	ldrb	r2, [r2, #26]
 80008ba:	4413      	add	r3, r2
 80008bc:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80008be:	88fa      	ldrh	r2, [r7, #6]
 80008c0:	4b17      	ldr	r3, [pc, #92]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	d903      	bls.n	80008d2 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80008ca:	2002      	movs	r0, #2
 80008cc:	f000 f8a0 	bl	8000a10 <ModbusErrorReply>
			 return;
 80008d0:	e023      	b.n	800091a <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80008d2:	4b13      	ldr	r3, [pc, #76]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	6859      	ldr	r1, [r3, #4]
 80008dc:	88fb      	ldrh	r3, [r7, #6]
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	440b      	add	r3, r1
 80008e2:	7ed2      	ldrb	r2, [r2, #27]
 80008e4:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80008e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	6859      	ldr	r1, [r3, #4]
 80008f0:	88fb      	ldrh	r3, [r7, #6]
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	440b      	add	r3, r1
 80008f6:	7f12      	ldrb	r2, [r2, #28]
 80008f8:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80008fa:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 8000902:	4b07      	ldr	r3, [pc, #28]	@ (8000920 <modbusWrite1Register+0x7c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8000908:	2208      	movs	r2, #8
 800090a:	4619      	mov	r1, r3
 800090c:	f005 feb6 	bl	800667c <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8000910:	4b03      	ldr	r3, [pc, #12]	@ (8000920 <modbusWrite1Register+0x7c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2205      	movs	r2, #5
 8000916:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000228 	.word	0x20000228

08000924 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8000924:	b590      	push	{r4, r7, lr}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 800092a:	4b38      	ldr	r3, [pc, #224]	@ (8000a0c <modbusRead1Register+0xe8>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	7edb      	ldrb	r3, [r3, #27]
 8000930:	021b      	lsls	r3, r3, #8
 8000932:	b29b      	uxth	r3, r3
 8000934:	4a35      	ldr	r2, [pc, #212]	@ (8000a0c <modbusRead1Register+0xe8>)
 8000936:	6812      	ldr	r2, [r2, #0]
 8000938:	7f12      	ldrb	r2, [r2, #28]
 800093a:	4413      	add	r3, r2
 800093c:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 800093e:	4b33      	ldr	r3, [pc, #204]	@ (8000a0c <modbusRead1Register+0xe8>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	7e5b      	ldrb	r3, [r3, #25]
 8000944:	021b      	lsls	r3, r3, #8
 8000946:	b29b      	uxth	r3, r3
 8000948:	4a30      	ldr	r2, [pc, #192]	@ (8000a0c <modbusRead1Register+0xe8>)
 800094a:	6812      	ldr	r2, [r2, #0]
 800094c:	7e92      	ldrb	r2, [r2, #26]
 800094e:	4413      	add	r3, r2
 8000950:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8000952:	88fb      	ldrh	r3, [r7, #6]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d002      	beq.n	800095e <modbusRead1Register+0x3a>
 8000958:	88fb      	ldrh	r3, [r7, #6]
 800095a:	2b7d      	cmp	r3, #125	@ 0x7d
 800095c:	d903      	bls.n	8000966 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800095e:	2003      	movs	r0, #3
 8000960:	f000 f856 	bl	8000a10 <ModbusErrorReply>
		 return;
 8000964:	e04e      	b.n	8000a04 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8000966:	88ba      	ldrh	r2, [r7, #4]
 8000968:	4b28      	ldr	r3, [pc, #160]	@ (8000a0c <modbusRead1Register+0xe8>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	429a      	cmp	r2, r3
 8000970:	d808      	bhi.n	8000984 <modbusRead1Register+0x60>
 8000972:	88ba      	ldrh	r2, [r7, #4]
 8000974:	88fb      	ldrh	r3, [r7, #6]
 8000976:	4413      	add	r3, r2
 8000978:	461a      	mov	r2, r3
 800097a:	4b24      	ldr	r3, [pc, #144]	@ (8000a0c <modbusRead1Register+0xe8>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	429a      	cmp	r2, r3
 8000982:	d903      	bls.n	800098c <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8000984:	2002      	movs	r0, #2
 8000986:	f000 f843 	bl	8000a10 <ModbusErrorReply>
		 return;
 800098a:	e03b      	b.n	8000a04 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 800098c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a0c <modbusRead1Register+0xe8>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2203      	movs	r2, #3
 8000992:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8000996:	88fb      	ldrh	r3, [r7, #6]
 8000998:	b2da      	uxtb	r2, r3
 800099a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a0c <modbusRead1Register+0xe8>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	0052      	lsls	r2, r2, #1
 80009a0:	b2d2      	uxtb	r2, r2
 80009a2:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80009a6:	2400      	movs	r4, #0
 80009a8:	e020      	b.n	80009ec <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80009aa:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <modbusRead1Register+0xe8>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	685a      	ldr	r2, [r3, #4]
 80009b0:	88bb      	ldrh	r3, [r7, #4]
 80009b2:	4423      	add	r3, r4
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	18d1      	adds	r1, r2, r3
 80009b8:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <modbusRead1Register+0xe8>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	1c63      	adds	r3, r4, #1
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	7849      	ldrb	r1, [r1, #1]
 80009c2:	4413      	add	r3, r2
 80009c4:	460a      	mov	r2, r1
 80009c6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80009ca:	4b10      	ldr	r3, [pc, #64]	@ (8000a0c <modbusRead1Register+0xe8>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	685a      	ldr	r2, [r3, #4]
 80009d0:	88bb      	ldrh	r3, [r7, #4]
 80009d2:	4423      	add	r3, r4
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	18d1      	adds	r1, r2, r3
 80009d8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <modbusRead1Register+0xe8>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	0063      	lsls	r3, r4, #1
 80009de:	3303      	adds	r3, #3
 80009e0:	7809      	ldrb	r1, [r1, #0]
 80009e2:	4413      	add	r3, r2
 80009e4:	460a      	mov	r2, r1
 80009e6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 80009ea:	3401      	adds	r4, #1
 80009ec:	88fb      	ldrh	r3, [r7, #6]
 80009ee:	429c      	cmp	r4, r3
 80009f0:	dbdb      	blt.n	80009aa <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80009f2:	88fb      	ldrh	r3, [r7, #6]
 80009f4:	3301      	adds	r3, #1
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	4b04      	ldr	r3, [pc, #16]	@ (8000a0c <modbusRead1Register+0xe8>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	0052      	lsls	r2, r2, #1
 80009fe:	b2d2      	uxtb	r2, r2
 8000a00:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd90      	pop	{r4, r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000228 	.word	0x20000228

08000a10 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a50 <ModbusErrorReply+0x40>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	7e1a      	ldrb	r2, [r3, #24]
 8000a20:	4b0b      	ldr	r3, [pc, #44]	@ (8000a50 <ModbusErrorReply+0x40>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000a28:	b2d2      	uxtb	r2, r2
 8000a2a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	@ (8000a50 <ModbusErrorReply+0x40>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	79fa      	ldrb	r2, [r7, #7]
 8000a34:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8000a38:	4b05      	ldr	r3, [pc, #20]	@ (8000a50 <ModbusErrorReply+0x40>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	20000228 	.word	0x20000228

08000a54 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8000a58:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <Modbus_frame_response+0x2c>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	7e1b      	ldrb	r3, [r3, #24]
 8000a5e:	2b03      	cmp	r3, #3
 8000a60:	d004      	beq.n	8000a6c <Modbus_frame_response+0x18>
 8000a62:	2b06      	cmp	r3, #6
 8000a64:	d105      	bne.n	8000a72 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8000a66:	f7ff ff1d 	bl	80008a4 <modbusWrite1Register>
		break;
 8000a6a:	e006      	b.n	8000a7a <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8000a6c:	f7ff ff5a 	bl	8000924 <modbusRead1Register>
		break;
 8000a70:	e003      	b.n	8000a7a <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8000a72:	2001      	movs	r0, #1
 8000a74:	f7ff ffcc 	bl	8000a10 <ModbusErrorReply>
		break;
 8000a78:	bf00      	nop

	}
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000228 	.word	0x20000228

08000a84 <Modbus_Emission>:

void Modbus_Emission()
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000a8a:	4b38      	ldr	r3, [pc, #224]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a94:	2b20      	cmp	r3, #32
 8000a96:	d15d      	bne.n	8000b54 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8000a98:	4b34      	ldr	r3, [pc, #208]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b33      	ldr	r3, [pc, #204]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	7812      	ldrb	r2, [r2, #0]
 8000aa2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8000aa6:	4b31      	ldr	r3, [pc, #196]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8000aae:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8000ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8000ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	f005 fddb 	bl	800667c <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8000ac6:	4b29      	ldr	r3, [pc, #164]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8000ace:	461a      	mov	r2, r3
 8000ad0:	4b26      	ldr	r3, [pc, #152]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	3203      	adds	r2, #3
 8000ad6:	b292      	uxth	r2, r2
 8000ad8:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000adc:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000aec:	3b02      	subs	r3, #2
 8000aee:	4619      	mov	r1, r3
 8000af0:	4610      	mov	r0, r2
 8000af2:	f7ff fd9f 	bl	8000634 <CRC16>
 8000af6:	4603      	mov	r3, r0
 8000af8:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8000afa:	4b1c      	ldr	r3, [pc, #112]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000b06:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8000b08:	7939      	ldrb	r1, [r7, #4]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	460a      	mov	r2, r1
 8000b0e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8000b12:	4b16      	ldr	r3, [pc, #88]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000b1e:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8000b20:	7979      	ldrb	r1, [r7, #5]
 8000b22:	4413      	add	r3, r2
 8000b24:	460a      	mov	r2, r1
 8000b26:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000b2a:	4b10      	ldr	r3, [pc, #64]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b34:	2b20      	cmp	r3, #32
 8000b36:	d10d      	bne.n	8000b54 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8000b38:	4b0c      	ldr	r3, [pc, #48]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8000b46:	4b09      	ldr	r3, [pc, #36]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b48:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8000b4a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000b4e:	461a      	mov	r2, r3
 8000b50:	f003 ff8e 	bl	8004a70 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8000b54:	4b05      	ldr	r3, [pc, #20]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8000b5c:	4b03      	ldr	r3, [pc, #12]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2200      	movs	r2, #0
 8000b62:	755a      	strb	r2, [r3, #21]

}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000228 	.word	0x20000228

08000b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b76:	f000 fe40 	bl	80017fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b7a:	f000 f873 	bl	8000c64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b7e:	f000 f9bb 	bl	8000ef8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b82:	f000 f987 	bl	8000e94 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000b86:	f000 f937 	bl	8000df8 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000b8a:	f000 f905 	bl	8000d98 <MX_TIM16_Init>
  MX_TIM2_Init();
 8000b8e:	f000 f8b5 	bl	8000cfc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000b92:	482c      	ldr	r0, [pc, #176]	@ (8000c44 <main+0xd4>)
 8000b94:	f002 fd4e 	bl	8003634 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000b98:	482a      	ldr	r0, [pc, #168]	@ (8000c44 <main+0xd4>)
 8000b9a:	f002 fdbb 	bl	8003714 <HAL_TIM_Base_Start_IT>
  hmodbus.huart = &huart2;
 8000b9e:	4b2a      	ldr	r3, [pc, #168]	@ (8000c48 <main+0xd8>)
 8000ba0:	4a2a      	ldr	r2, [pc, #168]	@ (8000c4c <main+0xdc>)
 8000ba2:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 8000ba4:	4b28      	ldr	r3, [pc, #160]	@ (8000c48 <main+0xd8>)
 8000ba6:	4a2a      	ldr	r2, [pc, #168]	@ (8000c50 <main+0xe0>)
 8000ba8:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 8000baa:	4b27      	ldr	r3, [pc, #156]	@ (8000c48 <main+0xd8>)
 8000bac:	2215      	movs	r2, #21
 8000bae:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 8000bb0:	4b25      	ldr	r3, [pc, #148]	@ (8000c48 <main+0xd8>)
 8000bb2:	22c8      	movs	r2, #200	@ 0xc8
 8000bb4:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8000bb6:	4927      	ldr	r1, [pc, #156]	@ (8000c54 <main+0xe4>)
 8000bb8:	4823      	ldr	r0, [pc, #140]	@ (8000c48 <main+0xd8>)
 8000bba:	f7ff fce5 	bl	8000588 <Modbus_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Set = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) ;
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc4:	f001 fc4e 	bl	8002464 <HAL_GPIO_ReadPin>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	461a      	mov	r2, r3
 8000bcc:	4b22      	ldr	r3, [pc, #136]	@ (8000c58 <main+0xe8>)
 8000bce:	801a      	strh	r2, [r3, #0]
	  ReSet = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8000bd0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bd8:	f001 fc44 	bl	8002464 <HAL_GPIO_ReadPin>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	461a      	mov	r2, r3
 8000be0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c5c <main+0xec>)
 8000be2:	801a      	strh	r2, [r3, #0]
		if (ReSet == 1) {
 8000be4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c5c <main+0xec>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d111      	bne.n	8000c10 <main+0xa0>
			for (int l = 0; l < 5; l++) {
 8000bec:	2300      	movs	r3, #0
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	e00b      	b.n	8000c0a <main+0x9a>
				registerFrame[0x23 + l].U16 = 0;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	3323      	adds	r3, #35	@ 0x23
 8000bf6:	4a17      	ldr	r2, [pc, #92]	@ (8000c54 <main+0xe4>)
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				i = 0;
 8000bfe:	4b18      	ldr	r3, [pc, #96]	@ (8000c60 <main+0xf0>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
			for (int l = 0; l < 5; l++) {
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3301      	adds	r3, #1
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2b04      	cmp	r3, #4
 8000c0e:	ddf0      	ble.n	8000bf2 <main+0x82>
			}
		}

		Modbus_Protocal_Worker();
 8000c10:	f7ff fd46 	bl	80006a0 <Modbus_Protocal_Worker>
//		Loop();
		Heartbeat();
 8000c14:	f000 fa1c 	bl	8001050 <Heartbeat>
		Routine();
 8000c18:	f000 fa34 	bl	8001084 <Routine>
		Vacuum();
 8000c1c:	f000 fa68 	bl	80010f0 <Vacuum>
		Gripper_Movement();
 8000c20:	f000 fa80 	bl	8001124 <Gripper_Movement>
		set_shelves();
 8000c24:	f000 fa98 	bl	8001158 <set_shelves>
		setGoalPoint();
 8000c28:	f000 faf0 	bl	800120c <setGoalPoint>
		run_pointmode();
 8000c2c:	f000 fb0a 	bl	8001244 <run_pointmode>
		set_home();
 8000c30:	f000 fb34 	bl	800129c <set_home>
		setPick_PlaceOrder();
 8000c34:	f000 fb64 	bl	8001300 <setPick_PlaceOrder>
		run_jog_mode();
 8000c38:	f000 fbe4 	bl	8001404 <run_jog_mode>
		ConvertToArray();
 8000c3c:	f000 fb7c 	bl	8001338 <ConvertToArray>
	  Set = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) ;
 8000c40:	e7bd      	b.n	8000bbe <main+0x4e>
 8000c42:	bf00      	nop
 8000c44:	2000022c 	.word	0x2000022c
 8000c48:	20000550 	.word	0x20000550
 8000c4c:	200003c4 	.word	0x200003c4
 8000c50:	200002f8 	.word	0x200002f8
 8000c54:	20000a28 	.word	0x20000a28
 8000c58:	20000bca 	.word	0x20000bca
 8000c5c:	20000bcc 	.word	0x20000bcc
 8000c60:	20000bf8 	.word	0x20000bf8

08000c64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b094      	sub	sp, #80	@ 0x50
 8000c68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6a:	f107 0318 	add.w	r3, r7, #24
 8000c6e:	2238      	movs	r2, #56	@ 0x38
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f005 fcd6 	bl	8006624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000c86:	2000      	movs	r0, #0
 8000c88:	f001 fc40 	bl	800250c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c94:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c96:	2340      	movs	r3, #64	@ 0x40
 8000c98:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000ca2:	2304      	movs	r3, #4
 8000ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000ca6:	2355      	movs	r3, #85	@ 0x55
 8000ca8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000caa:	2302      	movs	r3, #2
 8000cac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb6:	f107 0318 	add.w	r3, r7, #24
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f001 fcda 	bl	8002674 <HAL_RCC_OscConfig>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000cc6:	f000 fbc9 	bl	800145c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cca:	230f      	movs	r3, #15
 8000ccc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2104      	movs	r1, #4
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f001 ffd8 	bl	8002c98 <HAL_RCC_ClockConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000cee:	f000 fbb5 	bl	800145c <Error_Handler>
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	3750      	adds	r7, #80	@ 0x50
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d02:	f107 0310 	add.w	r3, r7, #16
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d94 <MX_TIM2_Init+0x98>)
 8000d1c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d20:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8000d22:	4b1c      	ldr	r3, [pc, #112]	@ (8000d94 <MX_TIM2_Init+0x98>)
 8000d24:	22a9      	movs	r2, #169	@ 0xa9
 8000d26:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d28:	4b1a      	ldr	r3, [pc, #104]	@ (8000d94 <MX_TIM2_Init+0x98>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d2e:	4b19      	ldr	r3, [pc, #100]	@ (8000d94 <MX_TIM2_Init+0x98>)
 8000d30:	f04f 32ff 	mov.w	r2, #4294967295
 8000d34:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d36:	4b17      	ldr	r3, [pc, #92]	@ (8000d94 <MX_TIM2_Init+0x98>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d3c:	4b15      	ldr	r3, [pc, #84]	@ (8000d94 <MX_TIM2_Init+0x98>)
 8000d3e:	2280      	movs	r2, #128	@ 0x80
 8000d40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d42:	4814      	ldr	r0, [pc, #80]	@ (8000d94 <MX_TIM2_Init+0x98>)
 8000d44:	f002 fc12 	bl	800356c <HAL_TIM_Base_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d4e:	f000 fb85 	bl	800145c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d58:	f107 0310 	add.w	r3, r7, #16
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	480d      	ldr	r0, [pc, #52]	@ (8000d94 <MX_TIM2_Init+0x98>)
 8000d60:	f002 ffc0 	bl	8003ce4 <HAL_TIM_ConfigClockSource>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d6a:	f000 fb77 	bl	800145c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4806      	ldr	r0, [pc, #24]	@ (8000d94 <MX_TIM2_Init+0x98>)
 8000d7c:	f003 fc78 	bl	8004670 <HAL_TIMEx_MasterConfigSynchronization>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d86:	f000 fb69 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	3720      	adds	r7, #32
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	2000022c 	.word	0x2000022c

08000d98 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000d9c:	4b14      	ldr	r3, [pc, #80]	@ (8000df0 <MX_TIM16_Init+0x58>)
 8000d9e:	4a15      	ldr	r2, [pc, #84]	@ (8000df4 <MX_TIM16_Init+0x5c>)
 8000da0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8000da2:	4b13      	ldr	r3, [pc, #76]	@ (8000df0 <MX_TIM16_Init+0x58>)
 8000da4:	22a9      	movs	r2, #169	@ 0xa9
 8000da6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da8:	4b11      	ldr	r3, [pc, #68]	@ (8000df0 <MX_TIM16_Init+0x58>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8000dae:	4b10      	ldr	r3, [pc, #64]	@ (8000df0 <MX_TIM16_Init+0x58>)
 8000db0:	f240 4279 	movw	r2, #1145	@ 0x479
 8000db4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db6:	4b0e      	ldr	r3, [pc, #56]	@ (8000df0 <MX_TIM16_Init+0x58>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000df0 <MX_TIM16_Init+0x58>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000df0 <MX_TIM16_Init+0x58>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000dc8:	4809      	ldr	r0, [pc, #36]	@ (8000df0 <MX_TIM16_Init+0x58>)
 8000dca:	f002 fbcf 	bl	800356c <HAL_TIM_Base_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000dd4:	f000 fb42 	bl	800145c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8000dd8:	2108      	movs	r1, #8
 8000dda:	4805      	ldr	r0, [pc, #20]	@ (8000df0 <MX_TIM16_Init+0x58>)
 8000ddc:	f002 fd12 	bl	8003804 <HAL_TIM_OnePulse_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8000de6:	f000 fb39 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200002f8 	.word	0x200002f8
 8000df4:	40014400 	.word	0x40014400

08000df8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dfc:	4b23      	ldr	r3, [pc, #140]	@ (8000e8c <MX_USART2_UART_Init+0x94>)
 8000dfe:	4a24      	ldr	r2, [pc, #144]	@ (8000e90 <MX_USART2_UART_Init+0x98>)
 8000e00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8000e02:	4b22      	ldr	r3, [pc, #136]	@ (8000e8c <MX_USART2_UART_Init+0x94>)
 8000e04:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8000e08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000e0a:	4b20      	ldr	r3, [pc, #128]	@ (8000e8c <MX_USART2_UART_Init+0x94>)
 8000e0c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e10:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e12:	4b1e      	ldr	r3, [pc, #120]	@ (8000e8c <MX_USART2_UART_Init+0x94>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000e18:	4b1c      	ldr	r3, [pc, #112]	@ (8000e8c <MX_USART2_UART_Init+0x94>)
 8000e1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e20:	4b1a      	ldr	r3, [pc, #104]	@ (8000e8c <MX_USART2_UART_Init+0x94>)
 8000e22:	220c      	movs	r2, #12
 8000e24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e26:	4b19      	ldr	r3, [pc, #100]	@ (8000e8c <MX_USART2_UART_Init+0x94>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e2c:	4b17      	ldr	r3, [pc, #92]	@ (8000e8c <MX_USART2_UART_Init+0x94>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e32:	4b16      	ldr	r3, [pc, #88]	@ (8000e8c <MX_USART2_UART_Init+0x94>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e38:	4b14      	ldr	r3, [pc, #80]	@ (8000e8c <MX_USART2_UART_Init+0x94>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e3e:	4b13      	ldr	r3, [pc, #76]	@ (8000e8c <MX_USART2_UART_Init+0x94>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e44:	4811      	ldr	r0, [pc, #68]	@ (8000e8c <MX_USART2_UART_Init+0x94>)
 8000e46:	f003 fcf9 	bl	800483c <HAL_UART_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8000e50:	f000 fb04 	bl	800145c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e54:	2100      	movs	r1, #0
 8000e56:	480d      	ldr	r0, [pc, #52]	@ (8000e8c <MX_USART2_UART_Init+0x94>)
 8000e58:	f005 fb19 	bl	800648e <HAL_UARTEx_SetTxFifoThreshold>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8000e62:	f000 fafb 	bl	800145c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e66:	2100      	movs	r1, #0
 8000e68:	4808      	ldr	r0, [pc, #32]	@ (8000e8c <MX_USART2_UART_Init+0x94>)
 8000e6a:	f005 fb4e 	bl	800650a <HAL_UARTEx_SetRxFifoThreshold>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8000e74:	f000 faf2 	bl	800145c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e78:	4804      	ldr	r0, [pc, #16]	@ (8000e8c <MX_USART2_UART_Init+0x94>)
 8000e7a:	f005 facf 	bl	800641c <HAL_UARTEx_DisableFifoMode>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8000e84:	f000 faea 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	200003c4 	.word	0x200003c4
 8000e90:	40004400 	.word	0x40004400

08000e94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000e9a:	4b16      	ldr	r3, [pc, #88]	@ (8000ef4 <MX_DMA_Init+0x60>)
 8000e9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e9e:	4a15      	ldr	r2, [pc, #84]	@ (8000ef4 <MX_DMA_Init+0x60>)
 8000ea0:	f043 0304 	orr.w	r3, r3, #4
 8000ea4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ea6:	4b13      	ldr	r3, [pc, #76]	@ (8000ef4 <MX_DMA_Init+0x60>)
 8000ea8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000eaa:	f003 0304 	and.w	r3, r3, #4
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ef4 <MX_DMA_Init+0x60>)
 8000eb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000eb6:	4a0f      	ldr	r2, [pc, #60]	@ (8000ef4 <MX_DMA_Init+0x60>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef4 <MX_DMA_Init+0x60>)
 8000ec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	603b      	str	r3, [r7, #0]
 8000ec8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2100      	movs	r1, #0
 8000ece:	200b      	movs	r0, #11
 8000ed0:	f000 fddf 	bl	8001a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ed4:	200b      	movs	r0, #11
 8000ed6:	f000 fdf6 	bl	8001ac6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	200c      	movs	r0, #12
 8000ee0:	f000 fdd7 	bl	8001a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000ee4:	200c      	movs	r0, #12
 8000ee6:	f000 fdee 	bl	8001ac6 <HAL_NVIC_EnableIRQ>

}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	@ 0x28
 8000efc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
 8000f0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0e:	4b4d      	ldr	r3, [pc, #308]	@ (8001044 <MX_GPIO_Init+0x14c>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f12:	4a4c      	ldr	r2, [pc, #304]	@ (8001044 <MX_GPIO_Init+0x14c>)
 8000f14:	f043 0304 	orr.w	r3, r3, #4
 8000f18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f1a:	4b4a      	ldr	r3, [pc, #296]	@ (8001044 <MX_GPIO_Init+0x14c>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1e:	f003 0304 	and.w	r3, r3, #4
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f26:	4b47      	ldr	r3, [pc, #284]	@ (8001044 <MX_GPIO_Init+0x14c>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2a:	4a46      	ldr	r2, [pc, #280]	@ (8001044 <MX_GPIO_Init+0x14c>)
 8000f2c:	f043 0320 	orr.w	r3, r3, #32
 8000f30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f32:	4b44      	ldr	r3, [pc, #272]	@ (8001044 <MX_GPIO_Init+0x14c>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f36:	f003 0320 	and.w	r3, r3, #32
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	4b41      	ldr	r3, [pc, #260]	@ (8001044 <MX_GPIO_Init+0x14c>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f42:	4a40      	ldr	r2, [pc, #256]	@ (8001044 <MX_GPIO_Init+0x14c>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f4a:	4b3e      	ldr	r3, [pc, #248]	@ (8001044 <MX_GPIO_Init+0x14c>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f56:	4b3b      	ldr	r3, [pc, #236]	@ (8001044 <MX_GPIO_Init+0x14c>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5a:	4a3a      	ldr	r2, [pc, #232]	@ (8001044 <MX_GPIO_Init+0x14c>)
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f62:	4b38      	ldr	r3, [pc, #224]	@ (8001044 <MX_GPIO_Init+0x14c>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2120      	movs	r1, #32
 8000f72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f76:	f001 fa8d 	bl	8002494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2180      	movs	r1, #128	@ 0x80
 8000f7e:	4832      	ldr	r0, [pc, #200]	@ (8001048 <MX_GPIO_Init+0x150>)
 8000f80:	f001 fa88 	bl	8002494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f84:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f8a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4619      	mov	r1, r3
 8000f9a:	482b      	ldr	r0, [pc, #172]	@ (8001048 <MX_GPIO_Init+0x150>)
 8000f9c:	f001 f8e0 	bl	8002160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fb6:	f001 f8d3 	bl	8002160 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fba:	2320      	movs	r3, #32
 8000fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fd4:	f001 f8c4 	bl	8002160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fd8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fde:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000fe2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	4619      	mov	r1, r3
 8000fee:	4817      	ldr	r0, [pc, #92]	@ (800104c <MX_GPIO_Init+0x154>)
 8000ff0:	f001 f8b6 	bl	8002160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ff4:	2380      	movs	r3, #128	@ 0x80
 8000ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	2300      	movs	r3, #0
 8001002:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4619      	mov	r1, r3
 800100a:	480f      	ldr	r0, [pc, #60]	@ (8001048 <MX_GPIO_Init+0x150>)
 800100c:	f001 f8a8 	bl	8002160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001010:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001014:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001016:	2300      	movs	r3, #0
 8001018:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800101a:	2302      	movs	r3, #2
 800101c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	4619      	mov	r1, r3
 8001024:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001028:	f001 f89a 	bl	8002160 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800102c:	2200      	movs	r2, #0
 800102e:	2100      	movs	r1, #0
 8001030:	2028      	movs	r0, #40	@ 0x28
 8001032:	f000 fd2e 	bl	8001a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001036:	2028      	movs	r0, #40	@ 0x28
 8001038:	f000 fd45 	bl	8001ac6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800103c:	bf00      	nop
 800103e:	3728      	adds	r7, #40	@ 0x28
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40021000 	.word	0x40021000
 8001048:	48000800 	.word	0x48000800
 800104c:	48000400 	.word	0x48000400

08001050 <Heartbeat>:
//	if (htim == &htim2) {
//		_micros += UINT32_MAX;
//	}
//}

void Heartbeat (){
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	static uint32_t timestamp = 0;
	if (timestamp < HAL_GetTick()) {
 8001054:	f000 fc36 	bl	80018c4 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	4b08      	ldr	r3, [pc, #32]	@ (800107c <Heartbeat+0x2c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	429a      	cmp	r2, r3
 8001060:	d909      	bls.n	8001076 <Heartbeat+0x26>
		timestamp = HAL_GetTick() + 200;
 8001062:	f000 fc2f 	bl	80018c4 <HAL_GetTick>
 8001066:	4603      	mov	r3, r0
 8001068:	33c8      	adds	r3, #200	@ 0xc8
 800106a:	4a04      	ldr	r2, [pc, #16]	@ (800107c <Heartbeat+0x2c>)
 800106c:	6013      	str	r3, [r2, #0]
		registerFrame[0x00].U16 = 22881;
 800106e:	4b04      	ldr	r3, [pc, #16]	@ (8001080 <Heartbeat+0x30>)
 8001070:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001074:	801a      	strh	r2, [r3, #0]

	}
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000c00 	.word	0x20000c00
 8001080:	20000a28 	.word	0x20000a28

08001084 <Routine>:

void Routine() {
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	static uint32_t timestamp = 0;
	if (timestamp < HAL_GetTick()) {
 8001088:	f000 fc1c 	bl	80018c4 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	4b15      	ldr	r3, [pc, #84]	@ (80010e4 <Routine+0x60>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	429a      	cmp	r2, r3
 8001094:	d923      	bls.n	80010de <Routine+0x5a>
		timestamp = HAL_GetTick() + 200;
 8001096:	f000 fc15 	bl	80018c4 <HAL_GetTick>
 800109a:	4603      	mov	r3, r0
 800109c:	33c8      	adds	r3, #200	@ 0xc8
 800109e:	4a11      	ldr	r2, [pc, #68]	@ (80010e4 <Routine+0x60>)
 80010a0:	6013      	str	r3, [r2, #0]
		if (registerFrame[0x00].U16 == 18537) {
 80010a2:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <Routine+0x64>)
 80010a4:	881b      	ldrh	r3, [r3, #0]
 80010a6:	f644 0269 	movw	r2, #18537	@ 0x4869
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d117      	bne.n	80010de <Routine+0x5a>
//			Reed_Out = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7); // set pull up, if on = 0
//			Reed_In = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8); // set pull up, if on = 0
//			if(Reed_Out == 0){
				registerFrame[0x04].U16 = 0b0000;  // Reed 1 = off , Reed 2 = on
 80010ae:	4b0e      	ldr	r3, [pc, #56]	@ (80010e8 <Routine+0x64>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	811a      	strh	r2, [r3, #8]
//			}
//			else if (Reed_In == 0){
//				registerFrame[0x04].U16 = 0b0010;  // Reed 1 = on , Reed 2 = off
//			}
			registerFrame[0x10].U16 = status1; // z - axis status * 10
 80010b4:	4b0d      	ldr	r3, [pc, #52]	@ (80010ec <Routine+0x68>)
 80010b6:	881a      	ldrh	r2, [r3, #0]
 80010b8:	4b0b      	ldr	r3, [pc, #44]	@ (80010e8 <Routine+0x64>)
 80010ba:	841a      	strh	r2, [r3, #32]
			registerFrame[0x11].U16 = 100 * 10; // z - axis position *10
 80010bc:	4b0a      	ldr	r3, [pc, #40]	@ (80010e8 <Routine+0x64>)
 80010be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010c2:	845a      	strh	r2, [r3, #34]	@ 0x22
			registerFrame[0x12].U16 = 100 * 10; // z - axis speed  *10
 80010c4:	4b08      	ldr	r3, [pc, #32]	@ (80010e8 <Routine+0x64>)
 80010c6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010ca:	849a      	strh	r2, [r3, #36]	@ 0x24
			registerFrame[0x13].U16 = 100 * 10; // z - axis acceleration *10
 80010cc:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <Routine+0x64>)
 80010ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010d2:	84da      	strh	r2, [r3, #38]	@ 0x26
			registerFrame[0x40].U16 = 100 * 10; // x - axis position * 10
 80010d4:	4b04      	ldr	r3, [pc, #16]	@ (80010e8 <Routine+0x64>)
 80010d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010da:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
		}
	}
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000c04 	.word	0x20000c04
 80010e8:	20000a28 	.word	0x20000a28
 80010ec:	20000bc6 	.word	0x20000bc6

080010f0 <Vacuum>:

void Vacuum(){ // อ่านค่า Vacuum from BaseSytem
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
	if(registerFrame[0x02].U16 == 0b0000){
 80010f4:	4b09      	ldr	r3, [pc, #36]	@ (800111c <Vacuum+0x2c>)
 80010f6:	889b      	ldrh	r3, [r3, #4]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d102      	bne.n	8001102 <Vacuum+0x12>
		VacuumState = 0; //Off
 80010fc:	4b08      	ldr	r3, [pc, #32]	@ (8001120 <Vacuum+0x30>)
 80010fe:	2200      	movs	r2, #0
 8001100:	801a      	strh	r2, [r3, #0]
	}
	if(registerFrame[0x02].U16 == 0b0001){
 8001102:	4b06      	ldr	r3, [pc, #24]	@ (800111c <Vacuum+0x2c>)
 8001104:	889b      	ldrh	r3, [r3, #4]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d102      	bne.n	8001110 <Vacuum+0x20>
		VacuumState = 1; //On
 800110a:	4b05      	ldr	r3, [pc, #20]	@ (8001120 <Vacuum+0x30>)
 800110c:	2201      	movs	r2, #1
 800110e:	801a      	strh	r2, [r3, #0]
		}
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20000a28 	.word	0x20000a28
 8001120:	20000bb8 	.word	0x20000bb8

08001124 <Gripper_Movement>:

void Gripper_Movement(){ // อ่านค่า Gripper from BaseSytem
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
	if(registerFrame[0x03].U16 == 0b0000){
 8001128:	4b09      	ldr	r3, [pc, #36]	@ (8001150 <Gripper_Movement+0x2c>)
 800112a:	88db      	ldrh	r3, [r3, #6]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d102      	bne.n	8001136 <Gripper_Movement+0x12>
			GripperState = 0; //Backward
 8001130:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <Gripper_Movement+0x30>)
 8001132:	2200      	movs	r2, #0
 8001134:	801a      	strh	r2, [r3, #0]
		}
	if(registerFrame[0x03].U16 == 0b0001){
 8001136:	4b06      	ldr	r3, [pc, #24]	@ (8001150 <Gripper_Movement+0x2c>)
 8001138:	88db      	ldrh	r3, [r3, #6]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d102      	bne.n	8001144 <Gripper_Movement+0x20>
			GripperState = 1; //Forward
 800113e:	4b05      	ldr	r3, [pc, #20]	@ (8001154 <Gripper_Movement+0x30>)
 8001140:	2201      	movs	r2, #1
 8001142:	801a      	strh	r2, [r3, #0]
			}
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20000a28 	.word	0x20000a28
 8001154:	20000bba 	.word	0x20000bba

08001158 <set_shelves>:

void set_shelves() {
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	if (registerFrame[0x01].U16 == 1) {
 800115c:	4b25      	ldr	r3, [pc, #148]	@ (80011f4 <set_shelves+0x9c>)
 800115e:	885b      	ldrh	r3, [r3, #2]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d144      	bne.n	80011ee <set_shelves+0x96>
//		registerFrame[0x01].U16 = 0b0000; //reset base status
		registerFrame[0x10].U16 = 0b0001; // update z axis status
 8001164:	4b23      	ldr	r3, [pc, #140]	@ (80011f4 <set_shelves+0x9c>)
 8001166:	2201      	movs	r2, #1
 8001168:	841a      	strh	r2, [r3, #32]
		status1 = 1 ;
 800116a:	4b23      	ldr	r3, [pc, #140]	@ (80011f8 <set_shelves+0xa0>)
 800116c:	2201      	movs	r2, #1
 800116e:	801a      	strh	r2, [r3, #0]
		y += 1;
 8001170:	4b22      	ldr	r3, [pc, #136]	@ (80011fc <set_shelves+0xa4>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	3301      	adds	r3, #1
 8001176:	4a21      	ldr	r2, [pc, #132]	@ (80011fc <set_shelves+0xa4>)
 8001178:	6013      	str	r3, [r2, #0]
		if (Set == 1) {
 800117a:	4b21      	ldr	r3, [pc, #132]	@ (8001200 <set_shelves+0xa8>)
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d125      	bne.n	80011ce <set_shelves+0x76>
			static uint32_t TimeStamp = 0;
			if (HAL_GetTick() > TimeStamp) {
 8001182:	f000 fb9f 	bl	80018c4 <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	4b1e      	ldr	r3, [pc, #120]	@ (8001204 <set_shelves+0xac>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	429a      	cmp	r2, r3
 800118e:	d92e      	bls.n	80011ee <set_shelves+0x96>
				TimeStamp = HAL_GetTick() + 500;
 8001190:	f000 fb98 	bl	80018c4 <HAL_GetTick>
 8001194:	4603      	mov	r3, r0
 8001196:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800119a:	4a1a      	ldr	r2, [pc, #104]	@ (8001204 <set_shelves+0xac>)
 800119c:	6013      	str	r3, [r2, #0]
				registerFrame[0x23 + i].U16 = 1000 * i;
 800119e:	4b1a      	ldr	r3, [pc, #104]	@ (8001208 <set_shelves+0xb0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	b299      	uxth	r1, r3
 80011a4:	4b18      	ldr	r3, [pc, #96]	@ (8001208 <set_shelves+0xb0>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f103 0223 	add.w	r2, r3, #35	@ 0x23
 80011ac:	460b      	mov	r3, r1
 80011ae:	4619      	mov	r1, r3
 80011b0:	0149      	lsls	r1, r1, #5
 80011b2:	1ac9      	subs	r1, r1, r3
 80011b4:	0089      	lsls	r1, r1, #2
 80011b6:	440b      	add	r3, r1
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	b299      	uxth	r1, r3
 80011bc:	4b0d      	ldr	r3, [pc, #52]	@ (80011f4 <set_shelves+0x9c>)
 80011be:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				i += 1;
 80011c2:	4b11      	ldr	r3, [pc, #68]	@ (8001208 <set_shelves+0xb0>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	3301      	adds	r3, #1
 80011c8:	4a0f      	ldr	r2, [pc, #60]	@ (8001208 <set_shelves+0xb0>)
 80011ca:	6013      	str	r3, [r2, #0]
			registerFrame[0x01].U16 = 0b00000;
			registerFrame[0x10].U16 = 0b00000;
			status1 = 0;
		}
	}
}
 80011cc:	e00f      	b.n	80011ee <set_shelves+0x96>
		else if (i > 4)
 80011ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001208 <set_shelves+0xb0>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	dd0b      	ble.n	80011ee <set_shelves+0x96>
			i = 0;
 80011d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001208 <set_shelves+0xb0>)
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
			registerFrame[0x01].U16 = 0b00000;
 80011dc:	4b05      	ldr	r3, [pc, #20]	@ (80011f4 <set_shelves+0x9c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	805a      	strh	r2, [r3, #2]
			registerFrame[0x10].U16 = 0b00000;
 80011e2:	4b04      	ldr	r3, [pc, #16]	@ (80011f4 <set_shelves+0x9c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	841a      	strh	r2, [r3, #32]
			status1 = 0;
 80011e8:	4b03      	ldr	r3, [pc, #12]	@ (80011f8 <set_shelves+0xa0>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	801a      	strh	r2, [r3, #0]
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000a28 	.word	0x20000a28
 80011f8:	20000bc6 	.word	0x20000bc6
 80011fc:	20000bfc 	.word	0x20000bfc
 8001200:	20000bca 	.word	0x20000bca
 8001204:	20000c08 	.word	0x20000c08
 8001208:	20000bf8 	.word	0x20000bf8

0800120c <setGoalPoint>:

void setGoalPoint(){
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
	if(registerFrame[0x01].U16 == 8){ // if run point mode
 8001210:	4b09      	ldr	r3, [pc, #36]	@ (8001238 <setGoalPoint+0x2c>)
 8001212:	885b      	ldrh	r3, [r3, #2]
 8001214:	2b08      	cmp	r3, #8
 8001216:	d109      	bne.n	800122c <setGoalPoint+0x20>
		 GoalPoint = (registerFrame[0x30].U16)/10 ; // divide 10 because data from base system
 8001218:	4b07      	ldr	r3, [pc, #28]	@ (8001238 <setGoalPoint+0x2c>)
 800121a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800121e:	4a07      	ldr	r2, [pc, #28]	@ (800123c <setGoalPoint+0x30>)
 8001220:	fba2 2303 	umull	r2, r3, r2, r3
 8001224:	08db      	lsrs	r3, r3, #3
 8001226:	b29a      	uxth	r2, r3
 8001228:	4b05      	ldr	r3, [pc, #20]	@ (8001240 <setGoalPoint+0x34>)
 800122a:	801a      	strh	r2, [r3, #0]
	}
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000a28 	.word	0x20000a28
 800123c:	cccccccd 	.word	0xcccccccd
 8001240:	20000bbc 	.word	0x20000bbc

08001244 <run_pointmode>:



void run_pointmode() {
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
	if (registerFrame[0x01].U16 == 8) {
 8001248:	4b10      	ldr	r3, [pc, #64]	@ (800128c <run_pointmode+0x48>)
 800124a:	885b      	ldrh	r3, [r3, #2]
 800124c:	2b08      	cmp	r3, #8
 800124e:	d11b      	bne.n	8001288 <run_pointmode+0x44>
//		registerFrame[0x01].U16 = 0;
		registerFrame[0x10].U16 = 16;
 8001250:	4b0e      	ldr	r3, [pc, #56]	@ (800128c <run_pointmode+0x48>)
 8001252:	2210      	movs	r2, #16
 8001254:	841a      	strh	r2, [r3, #32]
		status1 = 16 ;
 8001256:	4b0e      	ldr	r3, [pc, #56]	@ (8001290 <run_pointmode+0x4c>)
 8001258:	2210      	movs	r2, #16
 800125a:	801a      	strh	r2, [r3, #0]
		B1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800125c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001260:	480c      	ldr	r0, [pc, #48]	@ (8001294 <run_pointmode+0x50>)
 8001262:	f001 f8ff 	bl	8002464 <HAL_GPIO_ReadPin>
 8001266:	4603      	mov	r3, r0
 8001268:	461a      	mov	r2, r3
 800126a:	4b0b      	ldr	r3, [pc, #44]	@ (8001298 <run_pointmode+0x54>)
 800126c:	801a      	strh	r2, [r3, #0]
		if (B1 == 1) {
 800126e:	4b0a      	ldr	r3, [pc, #40]	@ (8001298 <run_pointmode+0x54>)
 8001270:	881b      	ldrh	r3, [r3, #0]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d108      	bne.n	8001288 <run_pointmode+0x44>
			registerFrame[0x01].U16 = 0;
 8001276:	4b05      	ldr	r3, [pc, #20]	@ (800128c <run_pointmode+0x48>)
 8001278:	2200      	movs	r2, #0
 800127a:	805a      	strh	r2, [r3, #2]
			registerFrame[0x10].U16 = 0;
 800127c:	4b03      	ldr	r3, [pc, #12]	@ (800128c <run_pointmode+0x48>)
 800127e:	2200      	movs	r2, #0
 8001280:	841a      	strh	r2, [r3, #32]
			status1 = 0;
 8001282:	4b03      	ldr	r3, [pc, #12]	@ (8001290 <run_pointmode+0x4c>)
 8001284:	2200      	movs	r2, #0
 8001286:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000a28 	.word	0x20000a28
 8001290:	20000bc6 	.word	0x20000bc6
 8001294:	48000800 	.word	0x48000800
 8001298:	20000bc8 	.word	0x20000bc8

0800129c <set_home>:

void set_home() {
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
	if (registerFrame[0x01].U16 == 0b0010) {
 80012a0:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <set_home+0x50>)
 80012a2:	885b      	ldrh	r3, [r3, #2]
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d11e      	bne.n	80012e6 <set_home+0x4a>
//		registerFrame[0x01].U16 = 0b0000;
		registerFrame[0x10].U16 = 0b0010;
 80012a8:	4b10      	ldr	r3, [pc, #64]	@ (80012ec <set_home+0x50>)
 80012aa:	2202      	movs	r2, #2
 80012ac:	841a      	strh	r2, [r3, #32]
		status1 = 2;
 80012ae:	4b10      	ldr	r3, [pc, #64]	@ (80012f0 <set_home+0x54>)
 80012b0:	2202      	movs	r2, #2
 80012b2:	801a      	strh	r2, [r3, #0]
		GoalPoint = 0;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	@ (80012f4 <set_home+0x58>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	801a      	strh	r2, [r3, #0]

		B1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80012ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012be:	480e      	ldr	r0, [pc, #56]	@ (80012f8 <set_home+0x5c>)
 80012c0:	f001 f8d0 	bl	8002464 <HAL_GPIO_ReadPin>
 80012c4:	4603      	mov	r3, r0
 80012c6:	461a      	mov	r2, r3
 80012c8:	4b0c      	ldr	r3, [pc, #48]	@ (80012fc <set_home+0x60>)
 80012ca:	801a      	strh	r2, [r3, #0]
		if (B1 == 1) {
 80012cc:	4b0b      	ldr	r3, [pc, #44]	@ (80012fc <set_home+0x60>)
 80012ce:	881b      	ldrh	r3, [r3, #0]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d108      	bne.n	80012e6 <set_home+0x4a>
			registerFrame[0x01].U16 = 0b0000;
 80012d4:	4b05      	ldr	r3, [pc, #20]	@ (80012ec <set_home+0x50>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	805a      	strh	r2, [r3, #2]
			registerFrame[0x10].U16 = 0b0000;
 80012da:	4b04      	ldr	r3, [pc, #16]	@ (80012ec <set_home+0x50>)
 80012dc:	2200      	movs	r2, #0
 80012de:	841a      	strh	r2, [r3, #32]
			status1 = 0;
 80012e0:	4b03      	ldr	r3, [pc, #12]	@ (80012f0 <set_home+0x54>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	801a      	strh	r2, [r3, #0]
		}
	}
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000a28 	.word	0x20000a28
 80012f0:	20000bc6 	.word	0x20000bc6
 80012f4:	20000bbc 	.word	0x20000bbc
 80012f8:	48000800 	.word	0x48000800
 80012fc:	20000bc8 	.word	0x20000bc8

08001300 <setPick_PlaceOrder>:

void setPick_PlaceOrder(){
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
	if (registerFrame[0x01].U16 == 4) {
 8001304:	4b09      	ldr	r3, [pc, #36]	@ (800132c <setPick_PlaceOrder+0x2c>)
 8001306:	885b      	ldrh	r3, [r3, #2]
 8001308:	2b04      	cmp	r3, #4
 800130a:	d109      	bne.n	8001320 <setPick_PlaceOrder+0x20>
		PickOrder = registerFrame[0x21].U16; // ค่าชั้นที่ต้อง Pick
 800130c:	4b07      	ldr	r3, [pc, #28]	@ (800132c <setPick_PlaceOrder+0x2c>)
 800130e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8001312:	4b07      	ldr	r3, [pc, #28]	@ (8001330 <setPick_PlaceOrder+0x30>)
 8001314:	801a      	strh	r2, [r3, #0]
		PlaceOrder = registerFrame[0x22].U16; // ค่าชั้นที่ต้อง Place
 8001316:	4b05      	ldr	r3, [pc, #20]	@ (800132c <setPick_PlaceOrder+0x2c>)
 8001318:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 800131c:	4b05      	ldr	r3, [pc, #20]	@ (8001334 <setPick_PlaceOrder+0x34>)
 800131e:	801a      	strh	r2, [r3, #0]
	}
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000a28 	.word	0x20000a28
 8001330:	20000bbe 	.word	0x20000bbe
 8001334:	20000bc0 	.word	0x20000bc0

08001338 <ConvertToArray>:

void ConvertToArray(){
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
	Pick = PickOrder ;
 800133e:	4b2a      	ldr	r3, [pc, #168]	@ (80013e8 <ConvertToArray+0xb0>)
 8001340:	881a      	ldrh	r2, [r3, #0]
 8001342:	4b2a      	ldr	r3, [pc, #168]	@ (80013ec <ConvertToArray+0xb4>)
 8001344:	801a      	strh	r2, [r3, #0]
	Place = PlaceOrder ;
 8001346:	4b2a      	ldr	r3, [pc, #168]	@ (80013f0 <ConvertToArray+0xb8>)
 8001348:	881a      	ldrh	r2, [r3, #0]
 800134a:	4b2a      	ldr	r3, [pc, #168]	@ (80013f4 <ConvertToArray+0xbc>)
 800134c:	801a      	strh	r2, [r3, #0]
 	for (int i = 4; i >= 0; i--) {  // convert Pick from int to array
 800134e:	2304      	movs	r3, #4
 8001350:	607b      	str	r3, [r7, #4]
 8001352:	e01c      	b.n	800138e <ConvertToArray+0x56>
		arrayPick[i] = Pick % 10;
 8001354:	4b25      	ldr	r3, [pc, #148]	@ (80013ec <ConvertToArray+0xb4>)
 8001356:	881a      	ldrh	r2, [r3, #0]
 8001358:	4b27      	ldr	r3, [pc, #156]	@ (80013f8 <ConvertToArray+0xc0>)
 800135a:	fba3 1302 	umull	r1, r3, r3, r2
 800135e:	08d9      	lsrs	r1, r3, #3
 8001360:	460b      	mov	r3, r1
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	440b      	add	r3, r1
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	b29b      	uxth	r3, r3
 800136c:	4619      	mov	r1, r3
 800136e:	4a23      	ldr	r2, [pc, #140]	@ (80013fc <ConvertToArray+0xc4>)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Pick /= 10;
 8001376:	4b1d      	ldr	r3, [pc, #116]	@ (80013ec <ConvertToArray+0xb4>)
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	4a1f      	ldr	r2, [pc, #124]	@ (80013f8 <ConvertToArray+0xc0>)
 800137c:	fba2 2303 	umull	r2, r3, r2, r3
 8001380:	08db      	lsrs	r3, r3, #3
 8001382:	b29a      	uxth	r2, r3
 8001384:	4b19      	ldr	r3, [pc, #100]	@ (80013ec <ConvertToArray+0xb4>)
 8001386:	801a      	strh	r2, [r3, #0]
 	for (int i = 4; i >= 0; i--) {  // convert Pick from int to array
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3b01      	subs	r3, #1
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	dadf      	bge.n	8001354 <ConvertToArray+0x1c>
	}

	for (int i = 4; i >= 0; i--) {  // convert Place from int to array
 8001394:	2304      	movs	r3, #4
 8001396:	603b      	str	r3, [r7, #0]
 8001398:	e01c      	b.n	80013d4 <ConvertToArray+0x9c>
		arrayPlace[i] = Place % 10;
 800139a:	4b16      	ldr	r3, [pc, #88]	@ (80013f4 <ConvertToArray+0xbc>)
 800139c:	881a      	ldrh	r2, [r3, #0]
 800139e:	4b16      	ldr	r3, [pc, #88]	@ (80013f8 <ConvertToArray+0xc0>)
 80013a0:	fba3 1302 	umull	r1, r3, r3, r2
 80013a4:	08d9      	lsrs	r1, r3, #3
 80013a6:	460b      	mov	r3, r1
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	440b      	add	r3, r1
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	4619      	mov	r1, r3
 80013b4:	4a12      	ldr	r2, [pc, #72]	@ (8001400 <ConvertToArray+0xc8>)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Place /= 10;
 80013bc:	4b0d      	ldr	r3, [pc, #52]	@ (80013f4 <ConvertToArray+0xbc>)
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	4a0d      	ldr	r2, [pc, #52]	@ (80013f8 <ConvertToArray+0xc0>)
 80013c2:	fba2 2303 	umull	r2, r3, r2, r3
 80013c6:	08db      	lsrs	r3, r3, #3
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	4b0a      	ldr	r3, [pc, #40]	@ (80013f4 <ConvertToArray+0xbc>)
 80013cc:	801a      	strh	r2, [r3, #0]
	for (int i = 4; i >= 0; i--) {  // convert Place from int to array
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	603b      	str	r3, [r7, #0]
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	dadf      	bge.n	800139a <ConvertToArray+0x62>
	}
}
 80013da:	bf00      	nop
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	20000bbe 	.word	0x20000bbe
 80013ec:	20000bc2 	.word	0x20000bc2
 80013f0:	20000bc0 	.word	0x20000bc0
 80013f4:	20000bc4 	.word	0x20000bc4
 80013f8:	cccccccd 	.word	0xcccccccd
 80013fc:	20000bd0 	.word	0x20000bd0
 8001400:	20000be4 	.word	0x20000be4

08001404 <run_jog_mode>:


void run_jog_mode() {
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
	if (registerFrame[0x01].U16 == 0b0100) {
 8001408:	4b10      	ldr	r3, [pc, #64]	@ (800144c <run_jog_mode+0x48>)
 800140a:	885b      	ldrh	r3, [r3, #2]
 800140c:	2b04      	cmp	r3, #4
 800140e:	d11b      	bne.n	8001448 <run_jog_mode+0x44>
//		registerFrame[0x01].U16 = 0b0000;
		// loop หยิบจับ 5 รอบ
		registerFrame[0x10].U16 = 0b0100;
 8001410:	4b0e      	ldr	r3, [pc, #56]	@ (800144c <run_jog_mode+0x48>)
 8001412:	2204      	movs	r2, #4
 8001414:	841a      	strh	r2, [r3, #32]
		status1 = 4 ;
 8001416:	4b0e      	ldr	r3, [pc, #56]	@ (8001450 <run_jog_mode+0x4c>)
 8001418:	2204      	movs	r2, #4
 800141a:	801a      	strh	r2, [r3, #0]
//		registerFrame[0x10].U16 = 0b1000;
//		status1 = 8 ;
//		//condition ตำ�?หน่งที่จะไปวาง


		B1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800141c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001420:	480c      	ldr	r0, [pc, #48]	@ (8001454 <run_jog_mode+0x50>)
 8001422:	f001 f81f 	bl	8002464 <HAL_GPIO_ReadPin>
 8001426:	4603      	mov	r3, r0
 8001428:	461a      	mov	r2, r3
 800142a:	4b0b      	ldr	r3, [pc, #44]	@ (8001458 <run_jog_mode+0x54>)
 800142c:	801a      	strh	r2, [r3, #0]
		if (B1 == 1) {
 800142e:	4b0a      	ldr	r3, [pc, #40]	@ (8001458 <run_jog_mode+0x54>)
 8001430:	881b      	ldrh	r3, [r3, #0]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d108      	bne.n	8001448 <run_jog_mode+0x44>
			registerFrame[0x01].U16 = 0b0000;
 8001436:	4b05      	ldr	r3, [pc, #20]	@ (800144c <run_jog_mode+0x48>)
 8001438:	2200      	movs	r2, #0
 800143a:	805a      	strh	r2, [r3, #2]
			registerFrame[0x10].U16 = 0b0000;
 800143c:	4b03      	ldr	r3, [pc, #12]	@ (800144c <run_jog_mode+0x48>)
 800143e:	2200      	movs	r2, #0
 8001440:	841a      	strh	r2, [r3, #32]
			status1 = 0;
 8001442:	4b03      	ldr	r3, [pc, #12]	@ (8001450 <run_jog_mode+0x4c>)
 8001444:	2200      	movs	r2, #0
 8001446:	801a      	strh	r2, [r3, #0]
		}

	}
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000a28 	.word	0x20000a28
 8001450:	20000bc6 	.word	0x20000bc6
 8001454:	48000800 	.word	0x48000800
 8001458:	20000bc8 	.word	0x20000bc8

0800145c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001460:	b672      	cpsid	i
}
 8001462:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001464:	bf00      	nop
 8001466:	e7fd      	b.n	8001464 <Error_Handler+0x8>

08001468 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146e:	4b0f      	ldr	r3, [pc, #60]	@ (80014ac <HAL_MspInit+0x44>)
 8001470:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001472:	4a0e      	ldr	r2, [pc, #56]	@ (80014ac <HAL_MspInit+0x44>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6613      	str	r3, [r2, #96]	@ 0x60
 800147a:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <HAL_MspInit+0x44>)
 800147c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001486:	4b09      	ldr	r3, [pc, #36]	@ (80014ac <HAL_MspInit+0x44>)
 8001488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800148a:	4a08      	ldr	r2, [pc, #32]	@ (80014ac <HAL_MspInit+0x44>)
 800148c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001490:	6593      	str	r3, [r2, #88]	@ 0x58
 8001492:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <HAL_MspInit+0x44>)
 8001494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800149e:	f001 f8d9 	bl	8002654 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40021000 	.word	0x40021000

080014b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014c0:	d114      	bne.n	80014ec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014c2:	4b19      	ldr	r3, [pc, #100]	@ (8001528 <HAL_TIM_Base_MspInit+0x78>)
 80014c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c6:	4a18      	ldr	r2, [pc, #96]	@ (8001528 <HAL_TIM_Base_MspInit+0x78>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80014ce:	4b16      	ldr	r3, [pc, #88]	@ (8001528 <HAL_TIM_Base_MspInit+0x78>)
 80014d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014da:	2200      	movs	r2, #0
 80014dc:	2100      	movs	r1, #0
 80014de:	201c      	movs	r0, #28
 80014e0:	f000 fad7 	bl	8001a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014e4:	201c      	movs	r0, #28
 80014e6:	f000 faee 	bl	8001ac6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80014ea:	e018      	b.n	800151e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM16)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a0e      	ldr	r2, [pc, #56]	@ (800152c <HAL_TIM_Base_MspInit+0x7c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d113      	bne.n	800151e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80014f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <HAL_TIM_Base_MspInit+0x78>)
 80014f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001528 <HAL_TIM_Base_MspInit+0x78>)
 80014fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001500:	6613      	str	r3, [r2, #96]	@ 0x60
 8001502:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <HAL_TIM_Base_MspInit+0x78>)
 8001504:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800150e:	2200      	movs	r2, #0
 8001510:	2100      	movs	r1, #0
 8001512:	2019      	movs	r0, #25
 8001514:	f000 fabd 	bl	8001a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001518:	2019      	movs	r0, #25
 800151a:	f000 fad4 	bl	8001ac6 <HAL_NVIC_EnableIRQ>
}
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40021000 	.word	0x40021000
 800152c:	40014400 	.word	0x40014400

08001530 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b09e      	sub	sp, #120	@ 0x78
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	2254      	movs	r2, #84	@ 0x54
 800154e:	2100      	movs	r1, #0
 8001550:	4618      	mov	r0, r3
 8001552:	f005 f867 	bl	8006624 <memset>
  if(huart->Instance==USART2)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a4d      	ldr	r2, [pc, #308]	@ (8001690 <HAL_UART_MspInit+0x160>)
 800155c:	4293      	cmp	r3, r2
 800155e:	f040 8092 	bne.w	8001686 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001562:	2302      	movs	r3, #2
 8001564:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001566:	2300      	movs	r3, #0
 8001568:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800156a:	f107 0310 	add.w	r3, r7, #16
 800156e:	4618      	mov	r0, r3
 8001570:	f001 fdae 	bl	80030d0 <HAL_RCCEx_PeriphCLKConfig>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800157a:	f7ff ff6f 	bl	800145c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800157e:	4b45      	ldr	r3, [pc, #276]	@ (8001694 <HAL_UART_MspInit+0x164>)
 8001580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001582:	4a44      	ldr	r2, [pc, #272]	@ (8001694 <HAL_UART_MspInit+0x164>)
 8001584:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001588:	6593      	str	r3, [r2, #88]	@ 0x58
 800158a:	4b42      	ldr	r3, [pc, #264]	@ (8001694 <HAL_UART_MspInit+0x164>)
 800158c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800158e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001596:	4b3f      	ldr	r3, [pc, #252]	@ (8001694 <HAL_UART_MspInit+0x164>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159a:	4a3e      	ldr	r2, [pc, #248]	@ (8001694 <HAL_UART_MspInit+0x164>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015a2:	4b3c      	ldr	r3, [pc, #240]	@ (8001694 <HAL_UART_MspInit+0x164>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015ae:	230c      	movs	r3, #12
 80015b0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b2:	2302      	movs	r3, #2
 80015b4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2300      	movs	r3, #0
 80015bc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015be:	2307      	movs	r3, #7
 80015c0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80015c6:	4619      	mov	r1, r3
 80015c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015cc:	f000 fdc8 	bl	8002160 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 80015d0:	4b31      	ldr	r3, [pc, #196]	@ (8001698 <HAL_UART_MspInit+0x168>)
 80015d2:	4a32      	ldr	r2, [pc, #200]	@ (800169c <HAL_UART_MspInit+0x16c>)
 80015d4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80015d6:	4b30      	ldr	r3, [pc, #192]	@ (8001698 <HAL_UART_MspInit+0x168>)
 80015d8:	221b      	movs	r2, #27
 80015da:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001698 <HAL_UART_MspInit+0x168>)
 80015de:	2210      	movs	r2, #16
 80015e0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001698 <HAL_UART_MspInit+0x168>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001698 <HAL_UART_MspInit+0x168>)
 80015ea:	2280      	movs	r2, #128	@ 0x80
 80015ec:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001698 <HAL_UART_MspInit+0x168>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015f4:	4b28      	ldr	r3, [pc, #160]	@ (8001698 <HAL_UART_MspInit+0x168>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80015fa:	4b27      	ldr	r3, [pc, #156]	@ (8001698 <HAL_UART_MspInit+0x168>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001600:	4b25      	ldr	r3, [pc, #148]	@ (8001698 <HAL_UART_MspInit+0x168>)
 8001602:	2200      	movs	r2, #0
 8001604:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001606:	4824      	ldr	r0, [pc, #144]	@ (8001698 <HAL_UART_MspInit+0x168>)
 8001608:	f000 fa78 	bl	8001afc <HAL_DMA_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8001612:	f7ff ff23 	bl	800145c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a1f      	ldr	r2, [pc, #124]	@ (8001698 <HAL_UART_MspInit+0x168>)
 800161a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800161c:	4a1e      	ldr	r2, [pc, #120]	@ (8001698 <HAL_UART_MspInit+0x168>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8001622:	4b1f      	ldr	r3, [pc, #124]	@ (80016a0 <HAL_UART_MspInit+0x170>)
 8001624:	4a1f      	ldr	r2, [pc, #124]	@ (80016a4 <HAL_UART_MspInit+0x174>)
 8001626:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001628:	4b1d      	ldr	r3, [pc, #116]	@ (80016a0 <HAL_UART_MspInit+0x170>)
 800162a:	221a      	movs	r2, #26
 800162c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800162e:	4b1c      	ldr	r3, [pc, #112]	@ (80016a0 <HAL_UART_MspInit+0x170>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001634:	4b1a      	ldr	r3, [pc, #104]	@ (80016a0 <HAL_UART_MspInit+0x170>)
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800163a:	4b19      	ldr	r3, [pc, #100]	@ (80016a0 <HAL_UART_MspInit+0x170>)
 800163c:	2280      	movs	r2, #128	@ 0x80
 800163e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001640:	4b17      	ldr	r3, [pc, #92]	@ (80016a0 <HAL_UART_MspInit+0x170>)
 8001642:	2200      	movs	r2, #0
 8001644:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001646:	4b16      	ldr	r3, [pc, #88]	@ (80016a0 <HAL_UART_MspInit+0x170>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800164c:	4b14      	ldr	r3, [pc, #80]	@ (80016a0 <HAL_UART_MspInit+0x170>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001652:	4b13      	ldr	r3, [pc, #76]	@ (80016a0 <HAL_UART_MspInit+0x170>)
 8001654:	2200      	movs	r2, #0
 8001656:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001658:	4811      	ldr	r0, [pc, #68]	@ (80016a0 <HAL_UART_MspInit+0x170>)
 800165a:	f000 fa4f 	bl	8001afc <HAL_DMA_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8001664:	f7ff fefa 	bl	800145c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a0d      	ldr	r2, [pc, #52]	@ (80016a0 <HAL_UART_MspInit+0x170>)
 800166c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001670:	4a0b      	ldr	r2, [pc, #44]	@ (80016a0 <HAL_UART_MspInit+0x170>)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2100      	movs	r1, #0
 800167a:	2026      	movs	r0, #38	@ 0x26
 800167c:	f000 fa09 	bl	8001a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001680:	2026      	movs	r0, #38	@ 0x26
 8001682:	f000 fa20 	bl	8001ac6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001686:	bf00      	nop
 8001688:	3778      	adds	r7, #120	@ 0x78
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40004400 	.word	0x40004400
 8001694:	40021000 	.word	0x40021000
 8001698:	20000490 	.word	0x20000490
 800169c:	40020008 	.word	0x40020008
 80016a0:	200004f0 	.word	0x200004f0
 80016a4:	4002001c 	.word	0x4002001c

080016a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016ac:	bf00      	nop
 80016ae:	e7fd      	b.n	80016ac <NMI_Handler+0x4>

080016b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b4:	bf00      	nop
 80016b6:	e7fd      	b.n	80016b4 <HardFault_Handler+0x4>

080016b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <MemManage_Handler+0x4>

080016c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <BusFault_Handler+0x4>

080016c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016cc:	bf00      	nop
 80016ce:	e7fd      	b.n	80016cc <UsageFault_Handler+0x4>

080016d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016fe:	f000 f8cf 	bl	80018a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800170c:	4802      	ldr	r0, [pc, #8]	@ (8001718 <DMA1_Channel1_IRQHandler+0x10>)
 800170e:	f000 fbd8 	bl	8001ec2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000490 	.word	0x20000490

0800171c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001720:	4802      	ldr	r0, [pc, #8]	@ (800172c <DMA1_Channel2_IRQHandler+0x10>)
 8001722:	f000 fbce 	bl	8001ec2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200004f0 	.word	0x200004f0

08001730 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001734:	4802      	ldr	r0, [pc, #8]	@ (8001740 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001736:	f002 f95b 	bl	80039f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	200002f8 	.word	0x200002f8

08001744 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001748:	4802      	ldr	r0, [pc, #8]	@ (8001754 <TIM2_IRQHandler+0x10>)
 800174a:	f002 f951 	bl	80039f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	2000022c 	.word	0x2000022c

08001758 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800175c:	4802      	ldr	r0, [pc, #8]	@ (8001768 <USART2_IRQHandler+0x10>)
 800175e:	f003 fa53 	bl	8004c08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200003c4 	.word	0x200003c4

0800176c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001770:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001774:	f000 fea6 	bl	80024c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001778:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800177c:	f000 fea2 	bl	80024c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}

08001784 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001788:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <SystemInit+0x20>)
 800178a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800178e:	4a05      	ldr	r2, [pc, #20]	@ (80017a4 <SystemInit+0x20>)
 8001790:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001794:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017a8:	480d      	ldr	r0, [pc, #52]	@ (80017e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017aa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017ac:	f7ff ffea 	bl	8001784 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017b0:	480c      	ldr	r0, [pc, #48]	@ (80017e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80017b2:	490d      	ldr	r1, [pc, #52]	@ (80017e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017b4:	4a0d      	ldr	r2, [pc, #52]	@ (80017ec <LoopForever+0xe>)
  movs r3, #0
 80017b6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80017b8:	e002      	b.n	80017c0 <LoopCopyDataInit>

080017ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017be:	3304      	adds	r3, #4

080017c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c4:	d3f9      	bcc.n	80017ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017c6:	4a0a      	ldr	r2, [pc, #40]	@ (80017f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017c8:	4c0a      	ldr	r4, [pc, #40]	@ (80017f4 <LoopForever+0x16>)
  movs r3, #0
 80017ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017cc:	e001      	b.n	80017d2 <LoopFillZerobss>

080017ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d0:	3204      	adds	r2, #4

080017d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d4:	d3fb      	bcc.n	80017ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017d6:	f004 ff2d 	bl	8006634 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017da:	f7ff f9c9 	bl	8000b70 <main>

080017de <LoopForever>:

LoopForever:
    b LoopForever
 80017de:	e7fe      	b.n	80017de <LoopForever>
  ldr   r0, =_estack
 80017e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e8:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 80017ec:	08006700 	.word	0x08006700
  ldr r2, =_sbss
 80017f0:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 80017f4:	20000c10 	.word	0x20000c10

080017f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017f8:	e7fe      	b.n	80017f8 <ADC1_2_IRQHandler>

080017fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001800:	2300      	movs	r3, #0
 8001802:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001804:	2003      	movs	r0, #3
 8001806:	f000 f939 	bl	8001a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800180a:	2000      	movs	r0, #0
 800180c:	f000 f80e 	bl	800182c <HAL_InitTick>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d002      	beq.n	800181c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	71fb      	strb	r3, [r7, #7]
 800181a:	e001      	b.n	8001820 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800181c:	f7ff fe24 	bl	8001468 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001820:	79fb      	ldrb	r3, [r7, #7]

}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001834:	2300      	movs	r3, #0
 8001836:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001838:	4b16      	ldr	r3, [pc, #88]	@ (8001894 <HAL_InitTick+0x68>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d022      	beq.n	8001886 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001840:	4b15      	ldr	r3, [pc, #84]	@ (8001898 <HAL_InitTick+0x6c>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4b13      	ldr	r3, [pc, #76]	@ (8001894 <HAL_InitTick+0x68>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800184c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001850:	fbb2 f3f3 	udiv	r3, r2, r3
 8001854:	4618      	mov	r0, r3
 8001856:	f000 f944 	bl	8001ae2 <HAL_SYSTICK_Config>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d10f      	bne.n	8001880 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b0f      	cmp	r3, #15
 8001864:	d809      	bhi.n	800187a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001866:	2200      	movs	r2, #0
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	f04f 30ff 	mov.w	r0, #4294967295
 800186e:	f000 f910 	bl	8001a92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001872:	4a0a      	ldr	r2, [pc, #40]	@ (800189c <HAL_InitTick+0x70>)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6013      	str	r3, [r2, #0]
 8001878:	e007      	b.n	800188a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	73fb      	strb	r3, [r7, #15]
 800187e:	e004      	b.n	800188a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	73fb      	strb	r3, [r7, #15]
 8001884:	e001      	b.n	800188a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800188a:	7bfb      	ldrb	r3, [r7, #15]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000208 	.word	0x20000208
 8001898:	20000200 	.word	0x20000200
 800189c:	20000204 	.word	0x20000204

080018a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a4:	4b05      	ldr	r3, [pc, #20]	@ (80018bc <HAL_IncTick+0x1c>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b05      	ldr	r3, [pc, #20]	@ (80018c0 <HAL_IncTick+0x20>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4413      	add	r3, r2
 80018ae:	4a03      	ldr	r2, [pc, #12]	@ (80018bc <HAL_IncTick+0x1c>)
 80018b0:	6013      	str	r3, [r2, #0]
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	20000c0c 	.word	0x20000c0c
 80018c0:	20000208 	.word	0x20000208

080018c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return uwTick;
 80018c8:	4b03      	ldr	r3, [pc, #12]	@ (80018d8 <HAL_GetTick+0x14>)
 80018ca:	681b      	ldr	r3, [r3, #0]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	20000c0c 	.word	0x20000c0c

080018dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001920 <__NVIC_SetPriorityGrouping+0x44>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018f8:	4013      	ands	r3, r2
 80018fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001904:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001908:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800190c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800190e:	4a04      	ldr	r2, [pc, #16]	@ (8001920 <__NVIC_SetPriorityGrouping+0x44>)
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	60d3      	str	r3, [r2, #12]
}
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001928:	4b04      	ldr	r3, [pc, #16]	@ (800193c <__NVIC_GetPriorityGrouping+0x18>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	0a1b      	lsrs	r3, r3, #8
 800192e:	f003 0307 	and.w	r3, r3, #7
}
 8001932:	4618      	mov	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800194a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194e:	2b00      	cmp	r3, #0
 8001950:	db0b      	blt.n	800196a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	f003 021f 	and.w	r2, r3, #31
 8001958:	4907      	ldr	r1, [pc, #28]	@ (8001978 <__NVIC_EnableIRQ+0x38>)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	095b      	lsrs	r3, r3, #5
 8001960:	2001      	movs	r0, #1
 8001962:	fa00 f202 	lsl.w	r2, r0, r2
 8001966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000e100 	.word	0xe000e100

0800197c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	6039      	str	r1, [r7, #0]
 8001986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198c:	2b00      	cmp	r3, #0
 800198e:	db0a      	blt.n	80019a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	b2da      	uxtb	r2, r3
 8001994:	490c      	ldr	r1, [pc, #48]	@ (80019c8 <__NVIC_SetPriority+0x4c>)
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	0112      	lsls	r2, r2, #4
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	440b      	add	r3, r1
 80019a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a4:	e00a      	b.n	80019bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	4908      	ldr	r1, [pc, #32]	@ (80019cc <__NVIC_SetPriority+0x50>)
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	3b04      	subs	r3, #4
 80019b4:	0112      	lsls	r2, r2, #4
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	440b      	add	r3, r1
 80019ba:	761a      	strb	r2, [r3, #24]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000e100 	.word	0xe000e100
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b089      	sub	sp, #36	@ 0x24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f1c3 0307 	rsb	r3, r3, #7
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	bf28      	it	cs
 80019ee:	2304      	movcs	r3, #4
 80019f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3304      	adds	r3, #4
 80019f6:	2b06      	cmp	r3, #6
 80019f8:	d902      	bls.n	8001a00 <NVIC_EncodePriority+0x30>
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3b03      	subs	r3, #3
 80019fe:	e000      	b.n	8001a02 <NVIC_EncodePriority+0x32>
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	f04f 32ff 	mov.w	r2, #4294967295
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	401a      	ands	r2, r3
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a18:	f04f 31ff 	mov.w	r1, #4294967295
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a22:	43d9      	mvns	r1, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	4313      	orrs	r3, r2
         );
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3724      	adds	r7, #36	@ 0x24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a48:	d301      	bcc.n	8001a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e00f      	b.n	8001a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a78 <SysTick_Config+0x40>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a56:	210f      	movs	r1, #15
 8001a58:	f04f 30ff 	mov.w	r0, #4294967295
 8001a5c:	f7ff ff8e 	bl	800197c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a60:	4b05      	ldr	r3, [pc, #20]	@ (8001a78 <SysTick_Config+0x40>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a66:	4b04      	ldr	r3, [pc, #16]	@ (8001a78 <SysTick_Config+0x40>)
 8001a68:	2207      	movs	r2, #7
 8001a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	e000e010 	.word	0xe000e010

08001a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff ff29 	bl	80018dc <__NVIC_SetPriorityGrouping>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b086      	sub	sp, #24
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa0:	f7ff ff40 	bl	8001924 <__NVIC_GetPriorityGrouping>
 8001aa4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	68b9      	ldr	r1, [r7, #8]
 8001aaa:	6978      	ldr	r0, [r7, #20]
 8001aac:	f7ff ff90 	bl	80019d0 <NVIC_EncodePriority>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ab6:	4611      	mov	r1, r2
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff ff5f 	bl	800197c <__NVIC_SetPriority>
}
 8001abe:	bf00      	nop
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	4603      	mov	r3, r0
 8001ace:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ff33 	bl	8001940 <__NVIC_EnableIRQ>
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff ffa4 	bl	8001a38 <SysTick_Config>
 8001af0:	4603      	mov	r3, r0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e08d      	b.n	8001c2a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	461a      	mov	r2, r3
 8001b14:	4b47      	ldr	r3, [pc, #284]	@ (8001c34 <HAL_DMA_Init+0x138>)
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d80f      	bhi.n	8001b3a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	4b45      	ldr	r3, [pc, #276]	@ (8001c38 <HAL_DMA_Init+0x13c>)
 8001b22:	4413      	add	r3, r2
 8001b24:	4a45      	ldr	r2, [pc, #276]	@ (8001c3c <HAL_DMA_Init+0x140>)
 8001b26:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2a:	091b      	lsrs	r3, r3, #4
 8001b2c:	009a      	lsls	r2, r3, #2
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a42      	ldr	r2, [pc, #264]	@ (8001c40 <HAL_DMA_Init+0x144>)
 8001b36:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b38:	e00e      	b.n	8001b58 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	4b40      	ldr	r3, [pc, #256]	@ (8001c44 <HAL_DMA_Init+0x148>)
 8001b42:	4413      	add	r3, r2
 8001b44:	4a3d      	ldr	r2, [pc, #244]	@ (8001c3c <HAL_DMA_Init+0x140>)
 8001b46:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4a:	091b      	lsrs	r3, r3, #4
 8001b4c:	009a      	lsls	r2, r3, #2
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a3c      	ldr	r2, [pc, #240]	@ (8001c48 <HAL_DMA_Init+0x14c>)
 8001b56:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001b6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001b7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 fa76 	bl	800209c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001bb8:	d102      	bne.n	8001bc0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bc8:	b2d2      	uxtb	r2, r2
 8001bca:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001bd4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d010      	beq.n	8001c00 <HAL_DMA_Init+0x104>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	d80c      	bhi.n	8001c00 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 fa96 	bl	8002118 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	e008      	b.n	8001c12 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40020407 	.word	0x40020407
 8001c38:	bffdfff8 	.word	0xbffdfff8
 8001c3c:	cccccccd 	.word	0xcccccccd
 8001c40:	40020000 	.word	0x40020000
 8001c44:	bffdfbf8 	.word	0xbffdfbf8
 8001c48:	40020400 	.word	0x40020400

08001c4c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
 8001c58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d101      	bne.n	8001c6c <HAL_DMA_Start_IT+0x20>
 8001c68:	2302      	movs	r3, #2
 8001c6a:	e066      	b.n	8001d3a <HAL_DMA_Start_IT+0xee>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d155      	bne.n	8001d2c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2202      	movs	r2, #2
 8001c84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 0201 	bic.w	r2, r2, #1
 8001c9c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	68b9      	ldr	r1, [r7, #8]
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f000 f9bb 	bl	8002020 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d008      	beq.n	8001cc4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f042 020e 	orr.w	r2, r2, #14
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	e00f      	b.n	8001ce4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f022 0204 	bic.w	r2, r2, #4
 8001cd2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f042 020a 	orr.w	r2, r2, #10
 8001ce2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d007      	beq.n	8001d02 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cfc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d00:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d007      	beq.n	8001d1a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d18:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f042 0201 	orr.w	r2, r2, #1
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	e005      	b.n	8001d38 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001d34:	2302      	movs	r3, #2
 8001d36:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b085      	sub	sp, #20
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d005      	beq.n	8001d66 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2204      	movs	r2, #4
 8001d5e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	73fb      	strb	r3, [r7, #15]
 8001d64:	e037      	b.n	8001dd6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 020e 	bic.w	r2, r2, #14
 8001d74:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d84:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 0201 	bic.w	r2, r2, #1
 8001d94:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9a:	f003 021f 	and.w	r2, r3, #31
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da2:	2101      	movs	r1, #1
 8001da4:	fa01 f202 	lsl.w	r2, r1, r2
 8001da8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001db2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00c      	beq.n	8001dd6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001dca:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001dd4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d00d      	beq.n	8001e28 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2204      	movs	r2, #4
 8001e10:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	73fb      	strb	r3, [r7, #15]
 8001e26:	e047      	b.n	8001eb8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 020e 	bic.w	r2, r2, #14
 8001e36:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 0201 	bic.w	r2, r2, #1
 8001e46:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e52:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5c:	f003 021f 	and.w	r2, r3, #31
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e64:	2101      	movs	r1, #1
 8001e66:	fa01 f202 	lsl.w	r2, r1, r2
 8001e6a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001e74:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00c      	beq.n	8001e98 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e8c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001e96:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	4798      	blx	r3
    }
  }
  return status;
 8001eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b084      	sub	sp, #16
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ede:	f003 031f 	and.w	r3, r3, #31
 8001ee2:	2204      	movs	r2, #4
 8001ee4:	409a      	lsls	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d026      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x7a>
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d021      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0320 	and.w	r3, r3, #32
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d107      	bne.n	8001f16 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0204 	bic.w	r2, r2, #4
 8001f14:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1a:	f003 021f 	and.w	r2, r3, #31
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f22:	2104      	movs	r1, #4
 8001f24:	fa01 f202 	lsl.w	r2, r1, r2
 8001f28:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d071      	beq.n	8002016 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001f3a:	e06c      	b.n	8002016 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f40:	f003 031f 	and.w	r3, r3, #31
 8001f44:	2202      	movs	r2, #2
 8001f46:	409a      	lsls	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d02e      	beq.n	8001fae <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d029      	beq.n	8001fae <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0320 	and.w	r3, r3, #32
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d10b      	bne.n	8001f80 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 020a 	bic.w	r2, r2, #10
 8001f76:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f84:	f003 021f 	and.w	r2, r3, #31
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8c:	2102      	movs	r1, #2
 8001f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f92:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d038      	beq.n	8002016 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001fac:	e033      	b.n	8002016 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb2:	f003 031f 	and.w	r3, r3, #31
 8001fb6:	2208      	movs	r2, #8
 8001fb8:	409a      	lsls	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d02a      	beq.n	8002018 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	f003 0308 	and.w	r3, r3, #8
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d025      	beq.n	8002018 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 020e 	bic.w	r2, r2, #14
 8001fda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe0:	f003 021f 	and.w	r2, r3, #31
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe8:	2101      	movs	r1, #1
 8001fea:	fa01 f202 	lsl.w	r2, r1, r2
 8001fee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800200a:	2b00      	cmp	r3, #0
 800200c:	d004      	beq.n	8002018 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002016:	bf00      	nop
 8002018:	bf00      	nop
}
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
 800202c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002036:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800203c:	2b00      	cmp	r3, #0
 800203e:	d004      	beq.n	800204a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002048:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204e:	f003 021f 	and.w	r2, r3, #31
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002056:	2101      	movs	r1, #1
 8002058:	fa01 f202 	lsl.w	r2, r1, r2
 800205c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	2b10      	cmp	r3, #16
 800206c:	d108      	bne.n	8002080 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800207e:	e007      	b.n	8002090 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68ba      	ldr	r2, [r7, #8]
 8002086:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	60da      	str	r2, [r3, #12]
}
 8002090:	bf00      	nop
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800209c:	b480      	push	{r7}
 800209e:	b087      	sub	sp, #28
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	4b16      	ldr	r3, [pc, #88]	@ (8002104 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d802      	bhi.n	80020b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80020b0:	4b15      	ldr	r3, [pc, #84]	@ (8002108 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80020b2:	617b      	str	r3, [r7, #20]
 80020b4:	e001      	b.n	80020ba <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80020b6:	4b15      	ldr	r3, [pc, #84]	@ (800210c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80020b8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	3b08      	subs	r3, #8
 80020c6:	4a12      	ldr	r2, [pc, #72]	@ (8002110 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80020c8:	fba2 2303 	umull	r2, r3, r2, r3
 80020cc:	091b      	lsrs	r3, r3, #4
 80020ce:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d4:	089b      	lsrs	r3, r3, #2
 80020d6:	009a      	lsls	r2, r3, #2
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4413      	add	r3, r2
 80020dc:	461a      	mov	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a0b      	ldr	r2, [pc, #44]	@ (8002114 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80020e6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f003 031f 	and.w	r3, r3, #31
 80020ee:	2201      	movs	r2, #1
 80020f0:	409a      	lsls	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80020f6:	bf00      	nop
 80020f8:	371c      	adds	r7, #28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	40020407 	.word	0x40020407
 8002108:	40020800 	.word	0x40020800
 800210c:	40020820 	.word	0x40020820
 8002110:	cccccccd 	.word	0xcccccccd
 8002114:	40020880 	.word	0x40020880

08002118 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	b2db      	uxtb	r3, r3
 8002126:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	4b0b      	ldr	r3, [pc, #44]	@ (8002158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800212c:	4413      	add	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	461a      	mov	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a08      	ldr	r2, [pc, #32]	@ (800215c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800213a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	3b01      	subs	r3, #1
 8002140:	f003 031f 	and.w	r3, r3, #31
 8002144:	2201      	movs	r2, #1
 8002146:	409a      	lsls	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800214c:	bf00      	nop
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	1000823f 	.word	0x1000823f
 800215c:	40020940 	.word	0x40020940

08002160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002160:	b480      	push	{r7}
 8002162:	b087      	sub	sp, #28
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800216e:	e15a      	b.n	8002426 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	2101      	movs	r1, #1
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	fa01 f303 	lsl.w	r3, r1, r3
 800217c:	4013      	ands	r3, r2
 800217e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 814c 	beq.w	8002420 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 0303 	and.w	r3, r3, #3
 8002190:	2b01      	cmp	r3, #1
 8002192:	d005      	beq.n	80021a0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800219c:	2b02      	cmp	r3, #2
 800219e:	d130      	bne.n	8002202 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	2203      	movs	r2, #3
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	4013      	ands	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	68da      	ldr	r2, [r3, #12]
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021d6:	2201      	movs	r2, #1
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43db      	mvns	r3, r3
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	4013      	ands	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	091b      	lsrs	r3, r3, #4
 80021ec:	f003 0201 	and.w	r2, r3, #1
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	2b03      	cmp	r3, #3
 800220c:	d017      	beq.n	800223e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	2203      	movs	r2, #3
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	43db      	mvns	r3, r3
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	4013      	ands	r3, r2
 8002224:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	4313      	orrs	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d123      	bne.n	8002292 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	08da      	lsrs	r2, r3, #3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3208      	adds	r2, #8
 8002252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002256:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	220f      	movs	r2, #15
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43db      	mvns	r3, r3
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	4013      	ands	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	691a      	ldr	r2, [r3, #16]
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	08da      	lsrs	r2, r3, #3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3208      	adds	r2, #8
 800228c:	6939      	ldr	r1, [r7, #16]
 800228e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	2203      	movs	r2, #3
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43db      	mvns	r3, r3
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	4013      	ands	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 0203 	and.w	r2, r3, #3
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 80a6 	beq.w	8002420 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d4:	4b5b      	ldr	r3, [pc, #364]	@ (8002444 <HAL_GPIO_Init+0x2e4>)
 80022d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022d8:	4a5a      	ldr	r2, [pc, #360]	@ (8002444 <HAL_GPIO_Init+0x2e4>)
 80022da:	f043 0301 	orr.w	r3, r3, #1
 80022de:	6613      	str	r3, [r2, #96]	@ 0x60
 80022e0:	4b58      	ldr	r3, [pc, #352]	@ (8002444 <HAL_GPIO_Init+0x2e4>)
 80022e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022ec:	4a56      	ldr	r2, [pc, #344]	@ (8002448 <HAL_GPIO_Init+0x2e8>)
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	089b      	lsrs	r3, r3, #2
 80022f2:	3302      	adds	r3, #2
 80022f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f003 0303 	and.w	r3, r3, #3
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	220f      	movs	r2, #15
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	4013      	ands	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002316:	d01f      	beq.n	8002358 <HAL_GPIO_Init+0x1f8>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a4c      	ldr	r2, [pc, #304]	@ (800244c <HAL_GPIO_Init+0x2ec>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d019      	beq.n	8002354 <HAL_GPIO_Init+0x1f4>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a4b      	ldr	r2, [pc, #300]	@ (8002450 <HAL_GPIO_Init+0x2f0>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d013      	beq.n	8002350 <HAL_GPIO_Init+0x1f0>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a4a      	ldr	r2, [pc, #296]	@ (8002454 <HAL_GPIO_Init+0x2f4>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d00d      	beq.n	800234c <HAL_GPIO_Init+0x1ec>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a49      	ldr	r2, [pc, #292]	@ (8002458 <HAL_GPIO_Init+0x2f8>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d007      	beq.n	8002348 <HAL_GPIO_Init+0x1e8>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a48      	ldr	r2, [pc, #288]	@ (800245c <HAL_GPIO_Init+0x2fc>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d101      	bne.n	8002344 <HAL_GPIO_Init+0x1e4>
 8002340:	2305      	movs	r3, #5
 8002342:	e00a      	b.n	800235a <HAL_GPIO_Init+0x1fa>
 8002344:	2306      	movs	r3, #6
 8002346:	e008      	b.n	800235a <HAL_GPIO_Init+0x1fa>
 8002348:	2304      	movs	r3, #4
 800234a:	e006      	b.n	800235a <HAL_GPIO_Init+0x1fa>
 800234c:	2303      	movs	r3, #3
 800234e:	e004      	b.n	800235a <HAL_GPIO_Init+0x1fa>
 8002350:	2302      	movs	r3, #2
 8002352:	e002      	b.n	800235a <HAL_GPIO_Init+0x1fa>
 8002354:	2301      	movs	r3, #1
 8002356:	e000      	b.n	800235a <HAL_GPIO_Init+0x1fa>
 8002358:	2300      	movs	r3, #0
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	f002 0203 	and.w	r2, r2, #3
 8002360:	0092      	lsls	r2, r2, #2
 8002362:	4093      	lsls	r3, r2
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	4313      	orrs	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800236a:	4937      	ldr	r1, [pc, #220]	@ (8002448 <HAL_GPIO_Init+0x2e8>)
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	089b      	lsrs	r3, r3, #2
 8002370:	3302      	adds	r3, #2
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002378:	4b39      	ldr	r3, [pc, #228]	@ (8002460 <HAL_GPIO_Init+0x300>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	43db      	mvns	r3, r3
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4013      	ands	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	4313      	orrs	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800239c:	4a30      	ldr	r2, [pc, #192]	@ (8002460 <HAL_GPIO_Init+0x300>)
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023a2:	4b2f      	ldr	r3, [pc, #188]	@ (8002460 <HAL_GPIO_Init+0x300>)
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	43db      	mvns	r3, r3
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	4013      	ands	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023c6:	4a26      	ldr	r2, [pc, #152]	@ (8002460 <HAL_GPIO_Init+0x300>)
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80023cc:	4b24      	ldr	r3, [pc, #144]	@ (8002460 <HAL_GPIO_Init+0x300>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	43db      	mvns	r3, r3
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	4013      	ands	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002460 <HAL_GPIO_Init+0x300>)
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80023f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002460 <HAL_GPIO_Init+0x300>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	43db      	mvns	r3, r3
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	4013      	ands	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	4313      	orrs	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800241a:	4a11      	ldr	r2, [pc, #68]	@ (8002460 <HAL_GPIO_Init+0x300>)
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	3301      	adds	r3, #1
 8002424:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	fa22 f303 	lsr.w	r3, r2, r3
 8002430:	2b00      	cmp	r3, #0
 8002432:	f47f ae9d 	bne.w	8002170 <HAL_GPIO_Init+0x10>
  }
}
 8002436:	bf00      	nop
 8002438:	bf00      	nop
 800243a:	371c      	adds	r7, #28
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	40021000 	.word	0x40021000
 8002448:	40010000 	.word	0x40010000
 800244c:	48000400 	.word	0x48000400
 8002450:	48000800 	.word	0x48000800
 8002454:	48000c00 	.word	0x48000c00
 8002458:	48001000 	.word	0x48001000
 800245c:	48001400 	.word	0x48001400
 8002460:	40010400 	.word	0x40010400

08002464 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691a      	ldr	r2, [r3, #16]
 8002474:	887b      	ldrh	r3, [r7, #2]
 8002476:	4013      	ands	r3, r2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d002      	beq.n	8002482 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800247c:	2301      	movs	r3, #1
 800247e:	73fb      	strb	r3, [r7, #15]
 8002480:	e001      	b.n	8002486 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002482:	2300      	movs	r3, #0
 8002484:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002486:	7bfb      	ldrb	r3, [r7, #15]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	460b      	mov	r3, r1
 800249e:	807b      	strh	r3, [r7, #2]
 80024a0:	4613      	mov	r3, r2
 80024a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024a4:	787b      	ldrb	r3, [r7, #1]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024aa:	887a      	ldrh	r2, [r7, #2]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024b0:	e002      	b.n	80024b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024b2:	887a      	ldrh	r2, [r7, #2]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024ce:	4b08      	ldr	r3, [pc, #32]	@ (80024f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024d0:	695a      	ldr	r2, [r3, #20]
 80024d2:	88fb      	ldrh	r3, [r7, #6]
 80024d4:	4013      	ands	r3, r2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d006      	beq.n	80024e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024da:	4a05      	ldr	r2, [pc, #20]	@ (80024f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024dc:	88fb      	ldrh	r3, [r7, #6]
 80024de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024e0:	88fb      	ldrh	r3, [r7, #6]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 f806 	bl	80024f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80024e8:	bf00      	nop
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40010400 	.word	0x40010400

080024f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
	...

0800250c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d141      	bne.n	800259e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800251a:	4b4b      	ldr	r3, [pc, #300]	@ (8002648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002522:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002526:	d131      	bne.n	800258c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002528:	4b47      	ldr	r3, [pc, #284]	@ (8002648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800252a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800252e:	4a46      	ldr	r2, [pc, #280]	@ (8002648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002530:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002534:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002538:	4b43      	ldr	r3, [pc, #268]	@ (8002648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002540:	4a41      	ldr	r2, [pc, #260]	@ (8002648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002542:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002546:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002548:	4b40      	ldr	r3, [pc, #256]	@ (800264c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2232      	movs	r2, #50	@ 0x32
 800254e:	fb02 f303 	mul.w	r3, r2, r3
 8002552:	4a3f      	ldr	r2, [pc, #252]	@ (8002650 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002554:	fba2 2303 	umull	r2, r3, r2, r3
 8002558:	0c9b      	lsrs	r3, r3, #18
 800255a:	3301      	adds	r3, #1
 800255c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800255e:	e002      	b.n	8002566 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	3b01      	subs	r3, #1
 8002564:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002566:	4b38      	ldr	r3, [pc, #224]	@ (8002648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800256e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002572:	d102      	bne.n	800257a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f2      	bne.n	8002560 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800257a:	4b33      	ldr	r3, [pc, #204]	@ (8002648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002582:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002586:	d158      	bne.n	800263a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e057      	b.n	800263c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800258c:	4b2e      	ldr	r3, [pc, #184]	@ (8002648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800258e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002592:	4a2d      	ldr	r2, [pc, #180]	@ (8002648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002594:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002598:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800259c:	e04d      	b.n	800263a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025a4:	d141      	bne.n	800262a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80025a6:	4b28      	ldr	r3, [pc, #160]	@ (8002648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80025ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025b2:	d131      	bne.n	8002618 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025b4:	4b24      	ldr	r3, [pc, #144]	@ (8002648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025ba:	4a23      	ldr	r2, [pc, #140]	@ (8002648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025c4:	4b20      	ldr	r3, [pc, #128]	@ (8002648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80025cc:	4a1e      	ldr	r2, [pc, #120]	@ (8002648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025d4:	4b1d      	ldr	r3, [pc, #116]	@ (800264c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2232      	movs	r2, #50	@ 0x32
 80025da:	fb02 f303 	mul.w	r3, r2, r3
 80025de:	4a1c      	ldr	r2, [pc, #112]	@ (8002650 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80025e0:	fba2 2303 	umull	r2, r3, r2, r3
 80025e4:	0c9b      	lsrs	r3, r3, #18
 80025e6:	3301      	adds	r3, #1
 80025e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025ea:	e002      	b.n	80025f2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025f2:	4b15      	ldr	r3, [pc, #84]	@ (8002648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025fe:	d102      	bne.n	8002606 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f2      	bne.n	80025ec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002606:	4b10      	ldr	r3, [pc, #64]	@ (8002648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800260e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002612:	d112      	bne.n	800263a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e011      	b.n	800263c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002618:	4b0b      	ldr	r3, [pc, #44]	@ (8002648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800261a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800261e:	4a0a      	ldr	r2, [pc, #40]	@ (8002648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002620:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002624:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002628:	e007      	b.n	800263a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800262a:	4b07      	ldr	r3, [pc, #28]	@ (8002648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002632:	4a05      	ldr	r2, [pc, #20]	@ (8002648 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002634:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002638:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	40007000 	.word	0x40007000
 800264c:	20000200 	.word	0x20000200
 8002650:	431bde83 	.word	0x431bde83

08002654 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002658:	4b05      	ldr	r3, [pc, #20]	@ (8002670 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	4a04      	ldr	r2, [pc, #16]	@ (8002670 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800265e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002662:	6093      	str	r3, [r2, #8]
}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40007000 	.word	0x40007000

08002674 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b088      	sub	sp, #32
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e2fe      	b.n	8002c84 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d075      	beq.n	800277e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002692:	4b97      	ldr	r3, [pc, #604]	@ (80028f0 <HAL_RCC_OscConfig+0x27c>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 030c 	and.w	r3, r3, #12
 800269a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800269c:	4b94      	ldr	r3, [pc, #592]	@ (80028f0 <HAL_RCC_OscConfig+0x27c>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	2b0c      	cmp	r3, #12
 80026aa:	d102      	bne.n	80026b2 <HAL_RCC_OscConfig+0x3e>
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	d002      	beq.n	80026b8 <HAL_RCC_OscConfig+0x44>
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	d10b      	bne.n	80026d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b8:	4b8d      	ldr	r3, [pc, #564]	@ (80028f0 <HAL_RCC_OscConfig+0x27c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d05b      	beq.n	800277c <HAL_RCC_OscConfig+0x108>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d157      	bne.n	800277c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e2d9      	b.n	8002c84 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026d8:	d106      	bne.n	80026e8 <HAL_RCC_OscConfig+0x74>
 80026da:	4b85      	ldr	r3, [pc, #532]	@ (80028f0 <HAL_RCC_OscConfig+0x27c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a84      	ldr	r2, [pc, #528]	@ (80028f0 <HAL_RCC_OscConfig+0x27c>)
 80026e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	e01d      	b.n	8002724 <HAL_RCC_OscConfig+0xb0>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026f0:	d10c      	bne.n	800270c <HAL_RCC_OscConfig+0x98>
 80026f2:	4b7f      	ldr	r3, [pc, #508]	@ (80028f0 <HAL_RCC_OscConfig+0x27c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a7e      	ldr	r2, [pc, #504]	@ (80028f0 <HAL_RCC_OscConfig+0x27c>)
 80026f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	4b7c      	ldr	r3, [pc, #496]	@ (80028f0 <HAL_RCC_OscConfig+0x27c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a7b      	ldr	r2, [pc, #492]	@ (80028f0 <HAL_RCC_OscConfig+0x27c>)
 8002704:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002708:	6013      	str	r3, [r2, #0]
 800270a:	e00b      	b.n	8002724 <HAL_RCC_OscConfig+0xb0>
 800270c:	4b78      	ldr	r3, [pc, #480]	@ (80028f0 <HAL_RCC_OscConfig+0x27c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a77      	ldr	r2, [pc, #476]	@ (80028f0 <HAL_RCC_OscConfig+0x27c>)
 8002712:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002716:	6013      	str	r3, [r2, #0]
 8002718:	4b75      	ldr	r3, [pc, #468]	@ (80028f0 <HAL_RCC_OscConfig+0x27c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a74      	ldr	r2, [pc, #464]	@ (80028f0 <HAL_RCC_OscConfig+0x27c>)
 800271e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002722:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d013      	beq.n	8002754 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272c:	f7ff f8ca 	bl	80018c4 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002734:	f7ff f8c6 	bl	80018c4 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b64      	cmp	r3, #100	@ 0x64
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e29e      	b.n	8002c84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002746:	4b6a      	ldr	r3, [pc, #424]	@ (80028f0 <HAL_RCC_OscConfig+0x27c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0f0      	beq.n	8002734 <HAL_RCC_OscConfig+0xc0>
 8002752:	e014      	b.n	800277e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7ff f8b6 	bl	80018c4 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800275c:	f7ff f8b2 	bl	80018c4 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b64      	cmp	r3, #100	@ 0x64
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e28a      	b.n	8002c84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800276e:	4b60      	ldr	r3, [pc, #384]	@ (80028f0 <HAL_RCC_OscConfig+0x27c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0xe8>
 800277a:	e000      	b.n	800277e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800277c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d075      	beq.n	8002876 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800278a:	4b59      	ldr	r3, [pc, #356]	@ (80028f0 <HAL_RCC_OscConfig+0x27c>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 030c 	and.w	r3, r3, #12
 8002792:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002794:	4b56      	ldr	r3, [pc, #344]	@ (80028f0 <HAL_RCC_OscConfig+0x27c>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	f003 0303 	and.w	r3, r3, #3
 800279c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	2b0c      	cmp	r3, #12
 80027a2:	d102      	bne.n	80027aa <HAL_RCC_OscConfig+0x136>
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d002      	beq.n	80027b0 <HAL_RCC_OscConfig+0x13c>
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d11f      	bne.n	80027f0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027b0:	4b4f      	ldr	r3, [pc, #316]	@ (80028f0 <HAL_RCC_OscConfig+0x27c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d005      	beq.n	80027c8 <HAL_RCC_OscConfig+0x154>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e25d      	b.n	8002c84 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c8:	4b49      	ldr	r3, [pc, #292]	@ (80028f0 <HAL_RCC_OscConfig+0x27c>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	061b      	lsls	r3, r3, #24
 80027d6:	4946      	ldr	r1, [pc, #280]	@ (80028f0 <HAL_RCC_OscConfig+0x27c>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80027dc:	4b45      	ldr	r3, [pc, #276]	@ (80028f4 <HAL_RCC_OscConfig+0x280>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff f823 	bl	800182c <HAL_InitTick>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d043      	beq.n	8002874 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e249      	b.n	8002c84 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d023      	beq.n	8002840 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027f8:	4b3d      	ldr	r3, [pc, #244]	@ (80028f0 <HAL_RCC_OscConfig+0x27c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a3c      	ldr	r2, [pc, #240]	@ (80028f0 <HAL_RCC_OscConfig+0x27c>)
 80027fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002802:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002804:	f7ff f85e 	bl	80018c4 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800280c:	f7ff f85a 	bl	80018c4 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e232      	b.n	8002c84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800281e:	4b34      	ldr	r3, [pc, #208]	@ (80028f0 <HAL_RCC_OscConfig+0x27c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f0      	beq.n	800280c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800282a:	4b31      	ldr	r3, [pc, #196]	@ (80028f0 <HAL_RCC_OscConfig+0x27c>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	061b      	lsls	r3, r3, #24
 8002838:	492d      	ldr	r1, [pc, #180]	@ (80028f0 <HAL_RCC_OscConfig+0x27c>)
 800283a:	4313      	orrs	r3, r2
 800283c:	604b      	str	r3, [r1, #4]
 800283e:	e01a      	b.n	8002876 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002840:	4b2b      	ldr	r3, [pc, #172]	@ (80028f0 <HAL_RCC_OscConfig+0x27c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a2a      	ldr	r2, [pc, #168]	@ (80028f0 <HAL_RCC_OscConfig+0x27c>)
 8002846:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800284a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284c:	f7ff f83a 	bl	80018c4 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002854:	f7ff f836 	bl	80018c4 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e20e      	b.n	8002c84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002866:	4b22      	ldr	r3, [pc, #136]	@ (80028f0 <HAL_RCC_OscConfig+0x27c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0x1e0>
 8002872:	e000      	b.n	8002876 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002874:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d041      	beq.n	8002906 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d01c      	beq.n	80028c4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800288a:	4b19      	ldr	r3, [pc, #100]	@ (80028f0 <HAL_RCC_OscConfig+0x27c>)
 800288c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002890:	4a17      	ldr	r2, [pc, #92]	@ (80028f0 <HAL_RCC_OscConfig+0x27c>)
 8002892:	f043 0301 	orr.w	r3, r3, #1
 8002896:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800289a:	f7ff f813 	bl	80018c4 <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a2:	f7ff f80f 	bl	80018c4 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e1e7      	b.n	8002c84 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028b4:	4b0e      	ldr	r3, [pc, #56]	@ (80028f0 <HAL_RCC_OscConfig+0x27c>)
 80028b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0ef      	beq.n	80028a2 <HAL_RCC_OscConfig+0x22e>
 80028c2:	e020      	b.n	8002906 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028c4:	4b0a      	ldr	r3, [pc, #40]	@ (80028f0 <HAL_RCC_OscConfig+0x27c>)
 80028c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028ca:	4a09      	ldr	r2, [pc, #36]	@ (80028f0 <HAL_RCC_OscConfig+0x27c>)
 80028cc:	f023 0301 	bic.w	r3, r3, #1
 80028d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d4:	f7fe fff6 	bl	80018c4 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028da:	e00d      	b.n	80028f8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028dc:	f7fe fff2 	bl	80018c4 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d906      	bls.n	80028f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e1ca      	b.n	8002c84 <HAL_RCC_OscConfig+0x610>
 80028ee:	bf00      	nop
 80028f0:	40021000 	.word	0x40021000
 80028f4:	20000204 	.word	0x20000204
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028f8:	4b8c      	ldr	r3, [pc, #560]	@ (8002b2c <HAL_RCC_OscConfig+0x4b8>)
 80028fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1ea      	bne.n	80028dc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 80a6 	beq.w	8002a60 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002914:	2300      	movs	r3, #0
 8002916:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002918:	4b84      	ldr	r3, [pc, #528]	@ (8002b2c <HAL_RCC_OscConfig+0x4b8>)
 800291a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800291c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_RCC_OscConfig+0x2b4>
 8002924:	2301      	movs	r3, #1
 8002926:	e000      	b.n	800292a <HAL_RCC_OscConfig+0x2b6>
 8002928:	2300      	movs	r3, #0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00d      	beq.n	800294a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800292e:	4b7f      	ldr	r3, [pc, #508]	@ (8002b2c <HAL_RCC_OscConfig+0x4b8>)
 8002930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002932:	4a7e      	ldr	r2, [pc, #504]	@ (8002b2c <HAL_RCC_OscConfig+0x4b8>)
 8002934:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002938:	6593      	str	r3, [r2, #88]	@ 0x58
 800293a:	4b7c      	ldr	r3, [pc, #496]	@ (8002b2c <HAL_RCC_OscConfig+0x4b8>)
 800293c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800293e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002946:	2301      	movs	r3, #1
 8002948:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800294a:	4b79      	ldr	r3, [pc, #484]	@ (8002b30 <HAL_RCC_OscConfig+0x4bc>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002952:	2b00      	cmp	r3, #0
 8002954:	d118      	bne.n	8002988 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002956:	4b76      	ldr	r3, [pc, #472]	@ (8002b30 <HAL_RCC_OscConfig+0x4bc>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a75      	ldr	r2, [pc, #468]	@ (8002b30 <HAL_RCC_OscConfig+0x4bc>)
 800295c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002960:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002962:	f7fe ffaf 	bl	80018c4 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800296a:	f7fe ffab 	bl	80018c4 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e183      	b.n	8002c84 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800297c:	4b6c      	ldr	r3, [pc, #432]	@ (8002b30 <HAL_RCC_OscConfig+0x4bc>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0f0      	beq.n	800296a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d108      	bne.n	80029a2 <HAL_RCC_OscConfig+0x32e>
 8002990:	4b66      	ldr	r3, [pc, #408]	@ (8002b2c <HAL_RCC_OscConfig+0x4b8>)
 8002992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002996:	4a65      	ldr	r2, [pc, #404]	@ (8002b2c <HAL_RCC_OscConfig+0x4b8>)
 8002998:	f043 0301 	orr.w	r3, r3, #1
 800299c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029a0:	e024      	b.n	80029ec <HAL_RCC_OscConfig+0x378>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	2b05      	cmp	r3, #5
 80029a8:	d110      	bne.n	80029cc <HAL_RCC_OscConfig+0x358>
 80029aa:	4b60      	ldr	r3, [pc, #384]	@ (8002b2c <HAL_RCC_OscConfig+0x4b8>)
 80029ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029b0:	4a5e      	ldr	r2, [pc, #376]	@ (8002b2c <HAL_RCC_OscConfig+0x4b8>)
 80029b2:	f043 0304 	orr.w	r3, r3, #4
 80029b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029ba:	4b5c      	ldr	r3, [pc, #368]	@ (8002b2c <HAL_RCC_OscConfig+0x4b8>)
 80029bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029c0:	4a5a      	ldr	r2, [pc, #360]	@ (8002b2c <HAL_RCC_OscConfig+0x4b8>)
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029ca:	e00f      	b.n	80029ec <HAL_RCC_OscConfig+0x378>
 80029cc:	4b57      	ldr	r3, [pc, #348]	@ (8002b2c <HAL_RCC_OscConfig+0x4b8>)
 80029ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029d2:	4a56      	ldr	r2, [pc, #344]	@ (8002b2c <HAL_RCC_OscConfig+0x4b8>)
 80029d4:	f023 0301 	bic.w	r3, r3, #1
 80029d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029dc:	4b53      	ldr	r3, [pc, #332]	@ (8002b2c <HAL_RCC_OscConfig+0x4b8>)
 80029de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029e2:	4a52      	ldr	r2, [pc, #328]	@ (8002b2c <HAL_RCC_OscConfig+0x4b8>)
 80029e4:	f023 0304 	bic.w	r3, r3, #4
 80029e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d016      	beq.n	8002a22 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f4:	f7fe ff66 	bl	80018c4 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029fa:	e00a      	b.n	8002a12 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029fc:	f7fe ff62 	bl	80018c4 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e138      	b.n	8002c84 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a12:	4b46      	ldr	r3, [pc, #280]	@ (8002b2c <HAL_RCC_OscConfig+0x4b8>)
 8002a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0ed      	beq.n	80029fc <HAL_RCC_OscConfig+0x388>
 8002a20:	e015      	b.n	8002a4e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a22:	f7fe ff4f 	bl	80018c4 <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a28:	e00a      	b.n	8002a40 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a2a:	f7fe ff4b 	bl	80018c4 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e121      	b.n	8002c84 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a40:	4b3a      	ldr	r3, [pc, #232]	@ (8002b2c <HAL_RCC_OscConfig+0x4b8>)
 8002a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1ed      	bne.n	8002a2a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a4e:	7ffb      	ldrb	r3, [r7, #31]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d105      	bne.n	8002a60 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a54:	4b35      	ldr	r3, [pc, #212]	@ (8002b2c <HAL_RCC_OscConfig+0x4b8>)
 8002a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a58:	4a34      	ldr	r2, [pc, #208]	@ (8002b2c <HAL_RCC_OscConfig+0x4b8>)
 8002a5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a5e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0320 	and.w	r3, r3, #32
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d03c      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d01c      	beq.n	8002aae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a74:	4b2d      	ldr	r3, [pc, #180]	@ (8002b2c <HAL_RCC_OscConfig+0x4b8>)
 8002a76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a7a:	4a2c      	ldr	r2, [pc, #176]	@ (8002b2c <HAL_RCC_OscConfig+0x4b8>)
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a84:	f7fe ff1e 	bl	80018c4 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a8c:	f7fe ff1a 	bl	80018c4 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e0f2      	b.n	8002c84 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a9e:	4b23      	ldr	r3, [pc, #140]	@ (8002b2c <HAL_RCC_OscConfig+0x4b8>)
 8002aa0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0ef      	beq.n	8002a8c <HAL_RCC_OscConfig+0x418>
 8002aac:	e01b      	b.n	8002ae6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002aae:	4b1f      	ldr	r3, [pc, #124]	@ (8002b2c <HAL_RCC_OscConfig+0x4b8>)
 8002ab0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ab4:	4a1d      	ldr	r2, [pc, #116]	@ (8002b2c <HAL_RCC_OscConfig+0x4b8>)
 8002ab6:	f023 0301 	bic.w	r3, r3, #1
 8002aba:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002abe:	f7fe ff01 	bl	80018c4 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ac6:	f7fe fefd 	bl	80018c4 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e0d5      	b.n	8002c84 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ad8:	4b14      	ldr	r3, [pc, #80]	@ (8002b2c <HAL_RCC_OscConfig+0x4b8>)
 8002ada:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1ef      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 80c9 	beq.w	8002c82 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002af0:	4b0e      	ldr	r3, [pc, #56]	@ (8002b2c <HAL_RCC_OscConfig+0x4b8>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 030c 	and.w	r3, r3, #12
 8002af8:	2b0c      	cmp	r3, #12
 8002afa:	f000 8083 	beq.w	8002c04 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d15e      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b06:	4b09      	ldr	r3, [pc, #36]	@ (8002b2c <HAL_RCC_OscConfig+0x4b8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a08      	ldr	r2, [pc, #32]	@ (8002b2c <HAL_RCC_OscConfig+0x4b8>)
 8002b0c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b12:	f7fe fed7 	bl	80018c4 <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b18:	e00c      	b.n	8002b34 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1a:	f7fe fed3 	bl	80018c4 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d905      	bls.n	8002b34 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e0ab      	b.n	8002c84 <HAL_RCC_OscConfig+0x610>
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b34:	4b55      	ldr	r3, [pc, #340]	@ (8002c8c <HAL_RCC_OscConfig+0x618>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1ec      	bne.n	8002b1a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b40:	4b52      	ldr	r3, [pc, #328]	@ (8002c8c <HAL_RCC_OscConfig+0x618>)
 8002b42:	68da      	ldr	r2, [r3, #12]
 8002b44:	4b52      	ldr	r3, [pc, #328]	@ (8002c90 <HAL_RCC_OscConfig+0x61c>)
 8002b46:	4013      	ands	r3, r2
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6a11      	ldr	r1, [r2, #32]
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b50:	3a01      	subs	r2, #1
 8002b52:	0112      	lsls	r2, r2, #4
 8002b54:	4311      	orrs	r1, r2
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002b5a:	0212      	lsls	r2, r2, #8
 8002b5c:	4311      	orrs	r1, r2
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002b62:	0852      	lsrs	r2, r2, #1
 8002b64:	3a01      	subs	r2, #1
 8002b66:	0552      	lsls	r2, r2, #21
 8002b68:	4311      	orrs	r1, r2
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002b6e:	0852      	lsrs	r2, r2, #1
 8002b70:	3a01      	subs	r2, #1
 8002b72:	0652      	lsls	r2, r2, #25
 8002b74:	4311      	orrs	r1, r2
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002b7a:	06d2      	lsls	r2, r2, #27
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	4943      	ldr	r1, [pc, #268]	@ (8002c8c <HAL_RCC_OscConfig+0x618>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b84:	4b41      	ldr	r3, [pc, #260]	@ (8002c8c <HAL_RCC_OscConfig+0x618>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a40      	ldr	r2, [pc, #256]	@ (8002c8c <HAL_RCC_OscConfig+0x618>)
 8002b8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b8e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b90:	4b3e      	ldr	r3, [pc, #248]	@ (8002c8c <HAL_RCC_OscConfig+0x618>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	4a3d      	ldr	r2, [pc, #244]	@ (8002c8c <HAL_RCC_OscConfig+0x618>)
 8002b96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b9a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9c:	f7fe fe92 	bl	80018c4 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba4:	f7fe fe8e 	bl	80018c4 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e066      	b.n	8002c84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bb6:	4b35      	ldr	r3, [pc, #212]	@ (8002c8c <HAL_RCC_OscConfig+0x618>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0f0      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x530>
 8002bc2:	e05e      	b.n	8002c82 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc4:	4b31      	ldr	r3, [pc, #196]	@ (8002c8c <HAL_RCC_OscConfig+0x618>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a30      	ldr	r2, [pc, #192]	@ (8002c8c <HAL_RCC_OscConfig+0x618>)
 8002bca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd0:	f7fe fe78 	bl	80018c4 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd8:	f7fe fe74 	bl	80018c4 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e04c      	b.n	8002c84 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bea:	4b28      	ldr	r3, [pc, #160]	@ (8002c8c <HAL_RCC_OscConfig+0x618>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f0      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002bf6:	4b25      	ldr	r3, [pc, #148]	@ (8002c8c <HAL_RCC_OscConfig+0x618>)
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	4924      	ldr	r1, [pc, #144]	@ (8002c8c <HAL_RCC_OscConfig+0x618>)
 8002bfc:	4b25      	ldr	r3, [pc, #148]	@ (8002c94 <HAL_RCC_OscConfig+0x620>)
 8002bfe:	4013      	ands	r3, r2
 8002c00:	60cb      	str	r3, [r1, #12]
 8002c02:	e03e      	b.n	8002c82 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d101      	bne.n	8002c10 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e039      	b.n	8002c84 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002c10:	4b1e      	ldr	r3, [pc, #120]	@ (8002c8c <HAL_RCC_OscConfig+0x618>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f003 0203 	and.w	r2, r3, #3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d12c      	bne.n	8002c7e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d123      	bne.n	8002c7e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c40:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d11b      	bne.n	8002c7e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c50:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d113      	bne.n	8002c7e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c60:	085b      	lsrs	r3, r3, #1
 8002c62:	3b01      	subs	r3, #1
 8002c64:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d109      	bne.n	8002c7e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c74:	085b      	lsrs	r3, r3, #1
 8002c76:	3b01      	subs	r3, #1
 8002c78:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d001      	beq.n	8002c82 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3720      	adds	r7, #32
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	019f800c 	.word	0x019f800c
 8002c94:	feeefffc 	.word	0xfeeefffc

08002c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e11e      	b.n	8002eee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb0:	4b91      	ldr	r3, [pc, #580]	@ (8002ef8 <HAL_RCC_ClockConfig+0x260>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 030f 	and.w	r3, r3, #15
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d910      	bls.n	8002ce0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cbe:	4b8e      	ldr	r3, [pc, #568]	@ (8002ef8 <HAL_RCC_ClockConfig+0x260>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f023 020f 	bic.w	r2, r3, #15
 8002cc6:	498c      	ldr	r1, [pc, #560]	@ (8002ef8 <HAL_RCC_ClockConfig+0x260>)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cce:	4b8a      	ldr	r3, [pc, #552]	@ (8002ef8 <HAL_RCC_ClockConfig+0x260>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d001      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e106      	b.n	8002eee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d073      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d129      	bne.n	8002d48 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cf4:	4b81      	ldr	r3, [pc, #516]	@ (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e0f4      	b.n	8002eee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002d04:	f000 f99e 	bl	8003044 <RCC_GetSysClockFreqFromPLLSource>
 8002d08:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	4a7c      	ldr	r2, [pc, #496]	@ (8002f00 <HAL_RCC_ClockConfig+0x268>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d93f      	bls.n	8002d92 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002d12:	4b7a      	ldr	r3, [pc, #488]	@ (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d009      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d033      	beq.n	8002d92 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d12f      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d32:	4b72      	ldr	r3, [pc, #456]	@ (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d3a:	4a70      	ldr	r2, [pc, #448]	@ (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002d3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d40:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d42:	2380      	movs	r3, #128	@ 0x80
 8002d44:	617b      	str	r3, [r7, #20]
 8002d46:	e024      	b.n	8002d92 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d107      	bne.n	8002d60 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d50:	4b6a      	ldr	r3, [pc, #424]	@ (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d109      	bne.n	8002d70 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e0c6      	b.n	8002eee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d60:	4b66      	ldr	r3, [pc, #408]	@ (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e0be      	b.n	8002eee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002d70:	f000 f8ce 	bl	8002f10 <HAL_RCC_GetSysClockFreq>
 8002d74:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	4a61      	ldr	r2, [pc, #388]	@ (8002f00 <HAL_RCC_ClockConfig+0x268>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d909      	bls.n	8002d92 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d7e:	4b5f      	ldr	r3, [pc, #380]	@ (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d86:	4a5d      	ldr	r2, [pc, #372]	@ (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002d88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d8c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002d8e:	2380      	movs	r3, #128	@ 0x80
 8002d90:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d92:	4b5a      	ldr	r3, [pc, #360]	@ (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f023 0203 	bic.w	r2, r3, #3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	4957      	ldr	r1, [pc, #348]	@ (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002da4:	f7fe fd8e 	bl	80018c4 <HAL_GetTick>
 8002da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002daa:	e00a      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dac:	f7fe fd8a 	bl	80018c4 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e095      	b.n	8002eee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc2:	4b4e      	ldr	r3, [pc, #312]	@ (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 020c 	and.w	r2, r3, #12
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d1eb      	bne.n	8002dac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d023      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d005      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dec:	4b43      	ldr	r3, [pc, #268]	@ (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	4a42      	ldr	r2, [pc, #264]	@ (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002df2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002df6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d007      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002e04:	4b3d      	ldr	r3, [pc, #244]	@ (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002e0c:	4a3b      	ldr	r2, [pc, #236]	@ (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002e0e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002e12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e14:	4b39      	ldr	r3, [pc, #228]	@ (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	4936      	ldr	r1, [pc, #216]	@ (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	608b      	str	r3, [r1, #8]
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	2b80      	cmp	r3, #128	@ 0x80
 8002e2c:	d105      	bne.n	8002e3a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002e2e:	4b33      	ldr	r3, [pc, #204]	@ (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	4a32      	ldr	r2, [pc, #200]	@ (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002e34:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e38:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e3a:	4b2f      	ldr	r3, [pc, #188]	@ (8002ef8 <HAL_RCC_ClockConfig+0x260>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d21d      	bcs.n	8002e84 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e48:	4b2b      	ldr	r3, [pc, #172]	@ (8002ef8 <HAL_RCC_ClockConfig+0x260>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f023 020f 	bic.w	r2, r3, #15
 8002e50:	4929      	ldr	r1, [pc, #164]	@ (8002ef8 <HAL_RCC_ClockConfig+0x260>)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e58:	f7fe fd34 	bl	80018c4 <HAL_GetTick>
 8002e5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5e:	e00a      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e60:	f7fe fd30 	bl	80018c4 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e03b      	b.n	8002eee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e76:	4b20      	ldr	r3, [pc, #128]	@ (8002ef8 <HAL_RCC_ClockConfig+0x260>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d1ed      	bne.n	8002e60 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d008      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e90:	4b1a      	ldr	r3, [pc, #104]	@ (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	4917      	ldr	r1, [pc, #92]	@ (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d009      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eae:	4b13      	ldr	r3, [pc, #76]	@ (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	490f      	ldr	r1, [pc, #60]	@ (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ec2:	f000 f825 	bl	8002f10 <HAL_RCC_GetSysClockFreq>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8002efc <HAL_RCC_ClockConfig+0x264>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	091b      	lsrs	r3, r3, #4
 8002ece:	f003 030f 	and.w	r3, r3, #15
 8002ed2:	490c      	ldr	r1, [pc, #48]	@ (8002f04 <HAL_RCC_ClockConfig+0x26c>)
 8002ed4:	5ccb      	ldrb	r3, [r1, r3]
 8002ed6:	f003 031f 	and.w	r3, r3, #31
 8002eda:	fa22 f303 	lsr.w	r3, r2, r3
 8002ede:	4a0a      	ldr	r2, [pc, #40]	@ (8002f08 <HAL_RCC_ClockConfig+0x270>)
 8002ee0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8002f0c <HAL_RCC_ClockConfig+0x274>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fe fca0 	bl	800182c <HAL_InitTick>
 8002eec:	4603      	mov	r3, r0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40022000 	.word	0x40022000
 8002efc:	40021000 	.word	0x40021000
 8002f00:	04c4b400 	.word	0x04c4b400
 8002f04:	080066b0 	.word	0x080066b0
 8002f08:	20000200 	.word	0x20000200
 8002f0c:	20000204 	.word	0x20000204

08002f10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b087      	sub	sp, #28
 8002f14:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002f16:	4b2c      	ldr	r3, [pc, #176]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 030c 	and.w	r3, r3, #12
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d102      	bne.n	8002f28 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f22:	4b2a      	ldr	r3, [pc, #168]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f24:	613b      	str	r3, [r7, #16]
 8002f26:	e047      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002f28:	4b27      	ldr	r3, [pc, #156]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 030c 	and.w	r3, r3, #12
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d102      	bne.n	8002f3a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f34:	4b26      	ldr	r3, [pc, #152]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f36:	613b      	str	r3, [r7, #16]
 8002f38:	e03e      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002f3a:	4b23      	ldr	r3, [pc, #140]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
 8002f42:	2b0c      	cmp	r3, #12
 8002f44:	d136      	bne.n	8002fb4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f46:	4b20      	ldr	r3, [pc, #128]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f50:	4b1d      	ldr	r3, [pc, #116]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	091b      	lsrs	r3, r3, #4
 8002f56:	f003 030f 	and.w	r3, r3, #15
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	d10c      	bne.n	8002f7e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f64:	4a1a      	ldr	r2, [pc, #104]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6c:	4a16      	ldr	r2, [pc, #88]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f6e:	68d2      	ldr	r2, [r2, #12]
 8002f70:	0a12      	lsrs	r2, r2, #8
 8002f72:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002f76:	fb02 f303 	mul.w	r3, r2, r3
 8002f7a:	617b      	str	r3, [r7, #20]
      break;
 8002f7c:	e00c      	b.n	8002f98 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f7e:	4a13      	ldr	r2, [pc, #76]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f86:	4a10      	ldr	r2, [pc, #64]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f88:	68d2      	ldr	r2, [r2, #12]
 8002f8a:	0a12      	lsrs	r2, r2, #8
 8002f8c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002f90:	fb02 f303 	mul.w	r3, r2, r3
 8002f94:	617b      	str	r3, [r7, #20]
      break;
 8002f96:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f98:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	0e5b      	lsrs	r3, r3, #25
 8002f9e:	f003 0303 	and.w	r3, r3, #3
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb0:	613b      	str	r3, [r7, #16]
 8002fb2:	e001      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002fb8:	693b      	ldr	r3, [r7, #16]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	371c      	adds	r7, #28
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	00f42400 	.word	0x00f42400
 8002fd0:	016e3600 	.word	0x016e3600

08002fd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fd8:	4b03      	ldr	r3, [pc, #12]	@ (8002fe8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fda:	681b      	ldr	r3, [r3, #0]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	20000200 	.word	0x20000200

08002fec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ff0:	f7ff fff0 	bl	8002fd4 <HAL_RCC_GetHCLKFreq>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	4b06      	ldr	r3, [pc, #24]	@ (8003010 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	0a1b      	lsrs	r3, r3, #8
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	4904      	ldr	r1, [pc, #16]	@ (8003014 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003002:	5ccb      	ldrb	r3, [r1, r3]
 8003004:	f003 031f 	and.w	r3, r3, #31
 8003008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800300c:	4618      	mov	r0, r3
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40021000 	.word	0x40021000
 8003014:	080066c0 	.word	0x080066c0

08003018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800301c:	f7ff ffda 	bl	8002fd4 <HAL_RCC_GetHCLKFreq>
 8003020:	4602      	mov	r2, r0
 8003022:	4b06      	ldr	r3, [pc, #24]	@ (800303c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	0adb      	lsrs	r3, r3, #11
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	4904      	ldr	r1, [pc, #16]	@ (8003040 <HAL_RCC_GetPCLK2Freq+0x28>)
 800302e:	5ccb      	ldrb	r3, [r1, r3]
 8003030:	f003 031f 	and.w	r3, r3, #31
 8003034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003038:	4618      	mov	r0, r3
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40021000 	.word	0x40021000
 8003040:	080066c0 	.word	0x080066c0

08003044 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003044:	b480      	push	{r7}
 8003046:	b087      	sub	sp, #28
 8003048:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800304a:	4b1e      	ldr	r3, [pc, #120]	@ (80030c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003054:	4b1b      	ldr	r3, [pc, #108]	@ (80030c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	091b      	lsrs	r3, r3, #4
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	3301      	adds	r3, #1
 8003060:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	2b03      	cmp	r3, #3
 8003066:	d10c      	bne.n	8003082 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003068:	4a17      	ldr	r2, [pc, #92]	@ (80030c8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003070:	4a14      	ldr	r2, [pc, #80]	@ (80030c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003072:	68d2      	ldr	r2, [r2, #12]
 8003074:	0a12      	lsrs	r2, r2, #8
 8003076:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800307a:	fb02 f303 	mul.w	r3, r2, r3
 800307e:	617b      	str	r3, [r7, #20]
    break;
 8003080:	e00c      	b.n	800309c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003082:	4a12      	ldr	r2, [pc, #72]	@ (80030cc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	fbb2 f3f3 	udiv	r3, r2, r3
 800308a:	4a0e      	ldr	r2, [pc, #56]	@ (80030c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800308c:	68d2      	ldr	r2, [r2, #12]
 800308e:	0a12      	lsrs	r2, r2, #8
 8003090:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003094:	fb02 f303 	mul.w	r3, r2, r3
 8003098:	617b      	str	r3, [r7, #20]
    break;
 800309a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800309c:	4b09      	ldr	r3, [pc, #36]	@ (80030c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	0e5b      	lsrs	r3, r3, #25
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	3301      	adds	r3, #1
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80030b6:	687b      	ldr	r3, [r7, #4]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	371c      	adds	r7, #28
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	40021000 	.word	0x40021000
 80030c8:	016e3600 	.word	0x016e3600
 80030cc:	00f42400 	.word	0x00f42400

080030d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030d8:	2300      	movs	r3, #0
 80030da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030dc:	2300      	movs	r3, #0
 80030de:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 8098 	beq.w	800321e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ee:	2300      	movs	r3, #0
 80030f0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030f2:	4b43      	ldr	r3, [pc, #268]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10d      	bne.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030fe:	4b40      	ldr	r3, [pc, #256]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003102:	4a3f      	ldr	r2, [pc, #252]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003104:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003108:	6593      	str	r3, [r2, #88]	@ 0x58
 800310a:	4b3d      	ldr	r3, [pc, #244]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800310c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800310e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003112:	60bb      	str	r3, [r7, #8]
 8003114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003116:	2301      	movs	r3, #1
 8003118:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800311a:	4b3a      	ldr	r3, [pc, #232]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a39      	ldr	r2, [pc, #228]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003120:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003124:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003126:	f7fe fbcd 	bl	80018c4 <HAL_GetTick>
 800312a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800312c:	e009      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800312e:	f7fe fbc9 	bl	80018c4 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d902      	bls.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	74fb      	strb	r3, [r7, #19]
        break;
 8003140:	e005      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003142:	4b30      	ldr	r3, [pc, #192]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0ef      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800314e:	7cfb      	ldrb	r3, [r7, #19]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d159      	bne.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003154:	4b2a      	ldr	r3, [pc, #168]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800315a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800315e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d01e      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	429a      	cmp	r2, r3
 800316e:	d019      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003170:	4b23      	ldr	r3, [pc, #140]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003176:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800317a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800317c:	4b20      	ldr	r3, [pc, #128]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800317e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003182:	4a1f      	ldr	r2, [pc, #124]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003184:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003188:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800318c:	4b1c      	ldr	r3, [pc, #112]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800318e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003192:	4a1b      	ldr	r2, [pc, #108]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003194:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003198:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800319c:	4a18      	ldr	r2, [pc, #96]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d016      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ae:	f7fe fb89 	bl	80018c4 <HAL_GetTick>
 80031b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031b4:	e00b      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b6:	f7fe fb85 	bl	80018c4 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d902      	bls.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	74fb      	strb	r3, [r7, #19]
            break;
 80031cc:	e006      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0ec      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80031dc:	7cfb      	ldrb	r3, [r7, #19]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10b      	bne.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031e2:	4b07      	ldr	r3, [pc, #28]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031f0:	4903      	ldr	r1, [pc, #12]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80031f8:	e008      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031fa:	7cfb      	ldrb	r3, [r7, #19]
 80031fc:	74bb      	strb	r3, [r7, #18]
 80031fe:	e005      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003200:	40021000 	.word	0x40021000
 8003204:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003208:	7cfb      	ldrb	r3, [r7, #19]
 800320a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800320c:	7c7b      	ldrb	r3, [r7, #17]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d105      	bne.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003212:	4ba7      	ldr	r3, [pc, #668]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003216:	4aa6      	ldr	r2, [pc, #664]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003218:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800321c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00a      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800322a:	4ba1      	ldr	r3, [pc, #644]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800322c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003230:	f023 0203 	bic.w	r2, r3, #3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	499d      	ldr	r1, [pc, #628]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800323a:	4313      	orrs	r3, r2
 800323c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00a      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800324c:	4b98      	ldr	r3, [pc, #608]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800324e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003252:	f023 020c 	bic.w	r2, r3, #12
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	4995      	ldr	r1, [pc, #596]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800325c:	4313      	orrs	r3, r2
 800325e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0304 	and.w	r3, r3, #4
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00a      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800326e:	4b90      	ldr	r3, [pc, #576]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003274:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	498c      	ldr	r1, [pc, #560]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800327e:	4313      	orrs	r3, r2
 8003280:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0308 	and.w	r3, r3, #8
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00a      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003290:	4b87      	ldr	r3, [pc, #540]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003296:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	4984      	ldr	r1, [pc, #528]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0310 	and.w	r3, r3, #16
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00a      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032b2:	4b7f      	ldr	r3, [pc, #508]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	497b      	ldr	r1, [pc, #492]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0320 	and.w	r3, r3, #32
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00a      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032d4:	4b76      	ldr	r3, [pc, #472]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	4973      	ldr	r1, [pc, #460]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00a      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032f6:	4b6e      	ldr	r3, [pc, #440]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032fc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	69db      	ldr	r3, [r3, #28]
 8003304:	496a      	ldr	r1, [pc, #424]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003306:	4313      	orrs	r3, r2
 8003308:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00a      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003318:	4b65      	ldr	r3, [pc, #404]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800331a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800331e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	4962      	ldr	r1, [pc, #392]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003328:	4313      	orrs	r3, r2
 800332a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00a      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800333a:	4b5d      	ldr	r3, [pc, #372]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800333c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003340:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003348:	4959      	ldr	r1, [pc, #356]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800334a:	4313      	orrs	r3, r2
 800334c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00a      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800335c:	4b54      	ldr	r3, [pc, #336]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800335e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003362:	f023 0203 	bic.w	r2, r3, #3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800336a:	4951      	ldr	r1, [pc, #324]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800336c:	4313      	orrs	r3, r2
 800336e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00a      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800337e:	4b4c      	ldr	r3, [pc, #304]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003380:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003384:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800338c:	4948      	ldr	r1, [pc, #288]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800338e:	4313      	orrs	r3, r2
 8003390:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800339c:	2b00      	cmp	r3, #0
 800339e:	d015      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033a0:	4b43      	ldr	r3, [pc, #268]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ae:	4940      	ldr	r1, [pc, #256]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033be:	d105      	bne.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033c0:	4b3b      	ldr	r3, [pc, #236]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	4a3a      	ldr	r2, [pc, #232]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033ca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d015      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80033d8:	4b35      	ldr	r3, [pc, #212]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033de:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033e6:	4932      	ldr	r1, [pc, #200]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033f6:	d105      	bne.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033f8:	4b2d      	ldr	r3, [pc, #180]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	4a2c      	ldr	r2, [pc, #176]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003402:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d015      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003410:	4b27      	ldr	r3, [pc, #156]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003416:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800341e:	4924      	ldr	r1, [pc, #144]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003420:	4313      	orrs	r3, r2
 8003422:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800342a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800342e:	d105      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003430:	4b1f      	ldr	r3, [pc, #124]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	4a1e      	ldr	r2, [pc, #120]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003436:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800343a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d015      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003448:	4b19      	ldr	r3, [pc, #100]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800344a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800344e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003456:	4916      	ldr	r1, [pc, #88]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003458:	4313      	orrs	r3, r2
 800345a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003462:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003466:	d105      	bne.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003468:	4b11      	ldr	r3, [pc, #68]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	4a10      	ldr	r2, [pc, #64]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800346e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003472:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d019      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003480:	4b0b      	ldr	r3, [pc, #44]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003486:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348e:	4908      	ldr	r1, [pc, #32]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003490:	4313      	orrs	r3, r2
 8003492:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800349e:	d109      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034a0:	4b03      	ldr	r3, [pc, #12]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	4a02      	ldr	r2, [pc, #8]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034aa:	60d3      	str	r3, [r2, #12]
 80034ac:	e002      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80034ae:	bf00      	nop
 80034b0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d015      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80034c0:	4b29      	ldr	r3, [pc, #164]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80034c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ce:	4926      	ldr	r1, [pc, #152]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034de:	d105      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80034e0:	4b21      	ldr	r3, [pc, #132]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	4a20      	ldr	r2, [pc, #128]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80034e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034ea:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d015      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80034f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80034fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034fe:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003506:	4918      	ldr	r1, [pc, #96]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003508:	4313      	orrs	r3, r2
 800350a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003512:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003516:	d105      	bne.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003518:	4b13      	ldr	r3, [pc, #76]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	4a12      	ldr	r2, [pc, #72]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800351e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003522:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d015      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003530:	4b0d      	ldr	r3, [pc, #52]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003532:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003536:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800353e:	490a      	ldr	r1, [pc, #40]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003540:	4313      	orrs	r3, r2
 8003542:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800354a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800354e:	d105      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003550:	4b05      	ldr	r3, [pc, #20]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	4a04      	ldr	r2, [pc, #16]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003556:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800355a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800355c:	7cbb      	ldrb	r3, [r7, #18]
}
 800355e:	4618      	mov	r0, r3
 8003560:	3718      	adds	r7, #24
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40021000 	.word	0x40021000

0800356c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e054      	b.n	8003628 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d111      	bne.n	80035ae <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 fff6 	bl	8004584 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800359c:	2b00      	cmp	r3, #0
 800359e:	d102      	bne.n	80035a6 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a23      	ldr	r2, [pc, #140]	@ (8003630 <HAL_TIM_Base_Init+0xc4>)
 80035a4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2202      	movs	r2, #2
 80035b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	3304      	adds	r3, #4
 80035be:	4619      	mov	r1, r3
 80035c0:	4610      	mov	r0, r2
 80035c2:	f000 fe69 	bl	8004298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	080014b1 	.word	0x080014b1

08003634 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b01      	cmp	r3, #1
 8003646:	d001      	beq.n	800364c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e04c      	b.n	80036e6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2202      	movs	r2, #2
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a26      	ldr	r2, [pc, #152]	@ (80036f4 <HAL_TIM_Base_Start+0xc0>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d022      	beq.n	80036a4 <HAL_TIM_Base_Start+0x70>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003666:	d01d      	beq.n	80036a4 <HAL_TIM_Base_Start+0x70>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a22      	ldr	r2, [pc, #136]	@ (80036f8 <HAL_TIM_Base_Start+0xc4>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d018      	beq.n	80036a4 <HAL_TIM_Base_Start+0x70>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a21      	ldr	r2, [pc, #132]	@ (80036fc <HAL_TIM_Base_Start+0xc8>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d013      	beq.n	80036a4 <HAL_TIM_Base_Start+0x70>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a1f      	ldr	r2, [pc, #124]	@ (8003700 <HAL_TIM_Base_Start+0xcc>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d00e      	beq.n	80036a4 <HAL_TIM_Base_Start+0x70>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a1e      	ldr	r2, [pc, #120]	@ (8003704 <HAL_TIM_Base_Start+0xd0>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d009      	beq.n	80036a4 <HAL_TIM_Base_Start+0x70>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a1c      	ldr	r2, [pc, #112]	@ (8003708 <HAL_TIM_Base_Start+0xd4>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d004      	beq.n	80036a4 <HAL_TIM_Base_Start+0x70>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a1b      	ldr	r2, [pc, #108]	@ (800370c <HAL_TIM_Base_Start+0xd8>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d115      	bne.n	80036d0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	4b19      	ldr	r3, [pc, #100]	@ (8003710 <HAL_TIM_Base_Start+0xdc>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b06      	cmp	r3, #6
 80036b4:	d015      	beq.n	80036e2 <HAL_TIM_Base_Start+0xae>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036bc:	d011      	beq.n	80036e2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f042 0201 	orr.w	r2, r2, #1
 80036cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ce:	e008      	b.n	80036e2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0201 	orr.w	r2, r2, #1
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	e000      	b.n	80036e4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	40012c00 	.word	0x40012c00
 80036f8:	40000400 	.word	0x40000400
 80036fc:	40000800 	.word	0x40000800
 8003700:	40000c00 	.word	0x40000c00
 8003704:	40013400 	.word	0x40013400
 8003708:	40014000 	.word	0x40014000
 800370c:	40015000 	.word	0x40015000
 8003710:	00010007 	.word	0x00010007

08003714 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b01      	cmp	r3, #1
 8003726:	d001      	beq.n	800372c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e054      	b.n	80037d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 0201 	orr.w	r2, r2, #1
 8003742:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a26      	ldr	r2, [pc, #152]	@ (80037e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d022      	beq.n	8003794 <HAL_TIM_Base_Start_IT+0x80>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003756:	d01d      	beq.n	8003794 <HAL_TIM_Base_Start_IT+0x80>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a22      	ldr	r2, [pc, #136]	@ (80037e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d018      	beq.n	8003794 <HAL_TIM_Base_Start_IT+0x80>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a21      	ldr	r2, [pc, #132]	@ (80037ec <HAL_TIM_Base_Start_IT+0xd8>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d013      	beq.n	8003794 <HAL_TIM_Base_Start_IT+0x80>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a1f      	ldr	r2, [pc, #124]	@ (80037f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d00e      	beq.n	8003794 <HAL_TIM_Base_Start_IT+0x80>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a1e      	ldr	r2, [pc, #120]	@ (80037f4 <HAL_TIM_Base_Start_IT+0xe0>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d009      	beq.n	8003794 <HAL_TIM_Base_Start_IT+0x80>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a1c      	ldr	r2, [pc, #112]	@ (80037f8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d004      	beq.n	8003794 <HAL_TIM_Base_Start_IT+0x80>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a1b      	ldr	r2, [pc, #108]	@ (80037fc <HAL_TIM_Base_Start_IT+0xe8>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d115      	bne.n	80037c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	4b19      	ldr	r3, [pc, #100]	@ (8003800 <HAL_TIM_Base_Start_IT+0xec>)
 800379c:	4013      	ands	r3, r2
 800379e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2b06      	cmp	r3, #6
 80037a4:	d015      	beq.n	80037d2 <HAL_TIM_Base_Start_IT+0xbe>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037ac:	d011      	beq.n	80037d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f042 0201 	orr.w	r2, r2, #1
 80037bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037be:	e008      	b.n	80037d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f042 0201 	orr.w	r2, r2, #1
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	e000      	b.n	80037d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	40012c00 	.word	0x40012c00
 80037e8:	40000400 	.word	0x40000400
 80037ec:	40000800 	.word	0x40000800
 80037f0:	40000c00 	.word	0x40000c00
 80037f4:	40013400 	.word	0x40013400
 80037f8:	40014000 	.word	0x40014000
 80037fc:	40015000 	.word	0x40015000
 8003800:	00010007 	.word	0x00010007

08003804 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e04c      	b.n	80038b2 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b00      	cmp	r3, #0
 8003822:	d111      	bne.n	8003848 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 fea9 	bl	8004584 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003836:	2b00      	cmp	r3, #0
 8003838:	d102      	bne.n	8003840 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a1f      	ldr	r2, [pc, #124]	@ (80038bc <HAL_TIM_OnePulse_Init+0xb8>)
 800383e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2202      	movs	r2, #2
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3304      	adds	r3, #4
 8003858:	4619      	mov	r1, r3
 800385a:	4610      	mov	r0, r2
 800385c:	f000 fd1c 	bl	8004298 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0208 	bic.w	r2, r2, #8
 800386e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6819      	ldr	r1, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	080038c1 	.word	0x080038c1

080038c0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80038ec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80038f4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80038fc:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038fe:	7bfb      	ldrb	r3, [r7, #15]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d108      	bne.n	8003916 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003904:	7bbb      	ldrb	r3, [r7, #14]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d105      	bne.n	8003916 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800390a:	7b7b      	ldrb	r3, [r7, #13]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d102      	bne.n	8003916 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003910:	7b3b      	ldrb	r3, [r7, #12]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d001      	beq.n	800391a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e059      	b.n	80039ce <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2202      	movs	r2, #2
 800391e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2202      	movs	r2, #2
 8003926:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2202      	movs	r2, #2
 800392e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2202      	movs	r2, #2
 8003936:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68da      	ldr	r2, [r3, #12]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f042 0202 	orr.w	r2, r2, #2
 8003948:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68da      	ldr	r2, [r3, #12]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f042 0204 	orr.w	r2, r2, #4
 8003958:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2201      	movs	r2, #1
 8003960:	2100      	movs	r1, #0
 8003962:	4618      	mov	r0, r3
 8003964:	f000 fde8 	bl	8004538 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2201      	movs	r2, #1
 800396e:	2104      	movs	r1, #4
 8003970:	4618      	mov	r0, r3
 8003972:	f000 fde1 	bl	8004538 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a17      	ldr	r2, [pc, #92]	@ (80039d8 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d018      	beq.n	80039b2 <HAL_TIM_OnePulse_Start_IT+0xde>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a15      	ldr	r2, [pc, #84]	@ (80039dc <HAL_TIM_OnePulse_Start_IT+0x108>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d013      	beq.n	80039b2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a14      	ldr	r2, [pc, #80]	@ (80039e0 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d00e      	beq.n	80039b2 <HAL_TIM_OnePulse_Start_IT+0xde>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a12      	ldr	r2, [pc, #72]	@ (80039e4 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d009      	beq.n	80039b2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a11      	ldr	r2, [pc, #68]	@ (80039e8 <HAL_TIM_OnePulse_Start_IT+0x114>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d004      	beq.n	80039b2 <HAL_TIM_OnePulse_Start_IT+0xde>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a0f      	ldr	r2, [pc, #60]	@ (80039ec <HAL_TIM_OnePulse_Start_IT+0x118>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d101      	bne.n	80039b6 <HAL_TIM_OnePulse_Start_IT+0xe2>
 80039b2:	2301      	movs	r3, #1
 80039b4:	e000      	b.n	80039b8 <HAL_TIM_OnePulse_Start_IT+0xe4>
 80039b6:	2300      	movs	r3, #0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d007      	beq.n	80039cc <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80039ca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40012c00 	.word	0x40012c00
 80039dc:	40013400 	.word	0x40013400
 80039e0:	40014000 	.word	0x40014000
 80039e4:	40014400 	.word	0x40014400
 80039e8:	40014800 	.word	0x40014800
 80039ec:	40015000 	.word	0x40015000

080039f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d026      	beq.n	8003a60 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d021      	beq.n	8003a60 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f06f 0202 	mvn.w	r2, #2
 8003a24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	f003 0303 	and.w	r3, r3, #3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d005      	beq.n	8003a46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	4798      	blx	r3
 8003a44:	e009      	b.n	8003a5a <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d026      	beq.n	8003ab8 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d021      	beq.n	8003ab8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f06f 0204 	mvn.w	r2, #4
 8003a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2202      	movs	r2, #2
 8003a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d005      	beq.n	8003a9e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	4798      	blx	r3
 8003a9c:	e009      	b.n	8003ab2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	f003 0308 	and.w	r3, r3, #8
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d026      	beq.n	8003b10 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f003 0308 	and.w	r3, r3, #8
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d021      	beq.n	8003b10 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f06f 0208 	mvn.w	r2, #8
 8003ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2204      	movs	r2, #4
 8003ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	f003 0303 	and.w	r3, r3, #3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d005      	beq.n	8003af6 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	4798      	blx	r3
 8003af4:	e009      	b.n	8003b0a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	f003 0310 	and.w	r3, r3, #16
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d026      	beq.n	8003b68 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f003 0310 	and.w	r3, r3, #16
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d021      	beq.n	8003b68 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f06f 0210 	mvn.w	r2, #16
 8003b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2208      	movs	r2, #8
 8003b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	69db      	ldr	r3, [r3, #28]
 8003b3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d005      	beq.n	8003b4e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	4798      	blx	r3
 8003b4c:	e009      	b.n	8003b62 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00e      	beq.n	8003b90 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d009      	beq.n	8003b90 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f06f 0201 	mvn.w	r2, #1
 8003b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d104      	bne.n	8003ba4 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00e      	beq.n	8003bc2 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d009      	beq.n	8003bc2 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00e      	beq.n	8003bea <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d009      	beq.n	8003bea <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00e      	beq.n	8003c12 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d009      	beq.n	8003c12 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	f003 0320 	and.w	r3, r3, #32
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00e      	beq.n	8003c3a <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f003 0320 	and.w	r3, r3, #32
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d009      	beq.n	8003c3a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f06f 0220 	mvn.w	r2, #32
 8003c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00e      	beq.n	8003c62 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d009      	beq.n	8003c62 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00e      	beq.n	8003c8a <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d009      	beq.n	8003c8a <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003c7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00e      	beq.n	8003cb2 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d009      	beq.n	8003cb2 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00e      	beq.n	8003cda <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d009      	beq.n	8003cda <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cda:	bf00      	nop
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
	...

08003ce4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d101      	bne.n	8003d00 <HAL_TIM_ConfigClockSource+0x1c>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	e0f6      	b.n	8003eee <HAL_TIM_ConfigClockSource+0x20a>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003d1e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a6f      	ldr	r2, [pc, #444]	@ (8003ef8 <HAL_TIM_ConfigClockSource+0x214>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	f000 80c1 	beq.w	8003ec2 <HAL_TIM_ConfigClockSource+0x1de>
 8003d40:	4a6d      	ldr	r2, [pc, #436]	@ (8003ef8 <HAL_TIM_ConfigClockSource+0x214>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	f200 80c6 	bhi.w	8003ed4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003d48:	4a6c      	ldr	r2, [pc, #432]	@ (8003efc <HAL_TIM_ConfigClockSource+0x218>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	f000 80b9 	beq.w	8003ec2 <HAL_TIM_ConfigClockSource+0x1de>
 8003d50:	4a6a      	ldr	r2, [pc, #424]	@ (8003efc <HAL_TIM_ConfigClockSource+0x218>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	f200 80be 	bhi.w	8003ed4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003d58:	4a69      	ldr	r2, [pc, #420]	@ (8003f00 <HAL_TIM_ConfigClockSource+0x21c>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	f000 80b1 	beq.w	8003ec2 <HAL_TIM_ConfigClockSource+0x1de>
 8003d60:	4a67      	ldr	r2, [pc, #412]	@ (8003f00 <HAL_TIM_ConfigClockSource+0x21c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	f200 80b6 	bhi.w	8003ed4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003d68:	4a66      	ldr	r2, [pc, #408]	@ (8003f04 <HAL_TIM_ConfigClockSource+0x220>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	f000 80a9 	beq.w	8003ec2 <HAL_TIM_ConfigClockSource+0x1de>
 8003d70:	4a64      	ldr	r2, [pc, #400]	@ (8003f04 <HAL_TIM_ConfigClockSource+0x220>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	f200 80ae 	bhi.w	8003ed4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003d78:	4a63      	ldr	r2, [pc, #396]	@ (8003f08 <HAL_TIM_ConfigClockSource+0x224>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	f000 80a1 	beq.w	8003ec2 <HAL_TIM_ConfigClockSource+0x1de>
 8003d80:	4a61      	ldr	r2, [pc, #388]	@ (8003f08 <HAL_TIM_ConfigClockSource+0x224>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	f200 80a6 	bhi.w	8003ed4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003d88:	4a60      	ldr	r2, [pc, #384]	@ (8003f0c <HAL_TIM_ConfigClockSource+0x228>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	f000 8099 	beq.w	8003ec2 <HAL_TIM_ConfigClockSource+0x1de>
 8003d90:	4a5e      	ldr	r2, [pc, #376]	@ (8003f0c <HAL_TIM_ConfigClockSource+0x228>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	f200 809e 	bhi.w	8003ed4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003d98:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003d9c:	f000 8091 	beq.w	8003ec2 <HAL_TIM_ConfigClockSource+0x1de>
 8003da0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003da4:	f200 8096 	bhi.w	8003ed4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003da8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dac:	f000 8089 	beq.w	8003ec2 <HAL_TIM_ConfigClockSource+0x1de>
 8003db0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003db4:	f200 808e 	bhi.w	8003ed4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003db8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dbc:	d03e      	beq.n	8003e3c <HAL_TIM_ConfigClockSource+0x158>
 8003dbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dc2:	f200 8087 	bhi.w	8003ed4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003dc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dca:	f000 8086 	beq.w	8003eda <HAL_TIM_ConfigClockSource+0x1f6>
 8003dce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dd2:	d87f      	bhi.n	8003ed4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003dd4:	2b70      	cmp	r3, #112	@ 0x70
 8003dd6:	d01a      	beq.n	8003e0e <HAL_TIM_ConfigClockSource+0x12a>
 8003dd8:	2b70      	cmp	r3, #112	@ 0x70
 8003dda:	d87b      	bhi.n	8003ed4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ddc:	2b60      	cmp	r3, #96	@ 0x60
 8003dde:	d050      	beq.n	8003e82 <HAL_TIM_ConfigClockSource+0x19e>
 8003de0:	2b60      	cmp	r3, #96	@ 0x60
 8003de2:	d877      	bhi.n	8003ed4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003de4:	2b50      	cmp	r3, #80	@ 0x50
 8003de6:	d03c      	beq.n	8003e62 <HAL_TIM_ConfigClockSource+0x17e>
 8003de8:	2b50      	cmp	r3, #80	@ 0x50
 8003dea:	d873      	bhi.n	8003ed4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003dec:	2b40      	cmp	r3, #64	@ 0x40
 8003dee:	d058      	beq.n	8003ea2 <HAL_TIM_ConfigClockSource+0x1be>
 8003df0:	2b40      	cmp	r3, #64	@ 0x40
 8003df2:	d86f      	bhi.n	8003ed4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003df4:	2b30      	cmp	r3, #48	@ 0x30
 8003df6:	d064      	beq.n	8003ec2 <HAL_TIM_ConfigClockSource+0x1de>
 8003df8:	2b30      	cmp	r3, #48	@ 0x30
 8003dfa:	d86b      	bhi.n	8003ed4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003dfc:	2b20      	cmp	r3, #32
 8003dfe:	d060      	beq.n	8003ec2 <HAL_TIM_ConfigClockSource+0x1de>
 8003e00:	2b20      	cmp	r3, #32
 8003e02:	d867      	bhi.n	8003ed4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d05c      	beq.n	8003ec2 <HAL_TIM_ConfigClockSource+0x1de>
 8003e08:	2b10      	cmp	r3, #16
 8003e0a:	d05a      	beq.n	8003ec2 <HAL_TIM_ConfigClockSource+0x1de>
 8003e0c:	e062      	b.n	8003ed4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e1e:	f000 fb6b 	bl	80044f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003e30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	609a      	str	r2, [r3, #8]
      break;
 8003e3a:	e04f      	b.n	8003edc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e4c:	f000 fb54 	bl	80044f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689a      	ldr	r2, [r3, #8]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e5e:	609a      	str	r2, [r3, #8]
      break;
 8003e60:	e03c      	b.n	8003edc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e6e:	461a      	mov	r2, r3
 8003e70:	f000 fac6 	bl	8004400 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2150      	movs	r1, #80	@ 0x50
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 fb1f 	bl	80044be <TIM_ITRx_SetConfig>
      break;
 8003e80:	e02c      	b.n	8003edc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f000 fae5 	bl	800445e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2160      	movs	r1, #96	@ 0x60
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 fb0f 	bl	80044be <TIM_ITRx_SetConfig>
      break;
 8003ea0:	e01c      	b.n	8003edc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eae:	461a      	mov	r2, r3
 8003eb0:	f000 faa6 	bl	8004400 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2140      	movs	r1, #64	@ 0x40
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 faff 	bl	80044be <TIM_ITRx_SetConfig>
      break;
 8003ec0:	e00c      	b.n	8003edc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4619      	mov	r1, r3
 8003ecc:	4610      	mov	r0, r2
 8003ece:	f000 faf6 	bl	80044be <TIM_ITRx_SetConfig>
      break;
 8003ed2:	e003      	b.n	8003edc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ed8:	e000      	b.n	8003edc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003eda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	00100070 	.word	0x00100070
 8003efc:	00100060 	.word	0x00100060
 8003f00:	00100050 	.word	0x00100050
 8003f04:	00100040 	.word	0x00100040
 8003f08:	00100030 	.word	0x00100030
 8003f0c:	00100020 	.word	0x00100020

08003f10 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b087      	sub	sp, #28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	607a      	str	r2, [r7, #4]
 8003fe4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e14a      	b.n	800428a <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	f040 80dd 	bne.w	80041bc <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8004002:	7afb      	ldrb	r3, [r7, #11]
 8004004:	2b1f      	cmp	r3, #31
 8004006:	f200 80d6 	bhi.w	80041b6 <HAL_TIM_RegisterCallback+0x1de>
 800400a:	a201      	add	r2, pc, #4	@ (adr r2, 8004010 <HAL_TIM_RegisterCallback+0x38>)
 800400c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004010:	08004091 	.word	0x08004091
 8004014:	08004099 	.word	0x08004099
 8004018:	080040a1 	.word	0x080040a1
 800401c:	080040a9 	.word	0x080040a9
 8004020:	080040b1 	.word	0x080040b1
 8004024:	080040b9 	.word	0x080040b9
 8004028:	080040c1 	.word	0x080040c1
 800402c:	080040c9 	.word	0x080040c9
 8004030:	080040d1 	.word	0x080040d1
 8004034:	080040d9 	.word	0x080040d9
 8004038:	080040e1 	.word	0x080040e1
 800403c:	080040e9 	.word	0x080040e9
 8004040:	080040f1 	.word	0x080040f1
 8004044:	080040f9 	.word	0x080040f9
 8004048:	08004103 	.word	0x08004103
 800404c:	0800410d 	.word	0x0800410d
 8004050:	08004117 	.word	0x08004117
 8004054:	08004121 	.word	0x08004121
 8004058:	0800412b 	.word	0x0800412b
 800405c:	08004135 	.word	0x08004135
 8004060:	0800413f 	.word	0x0800413f
 8004064:	08004149 	.word	0x08004149
 8004068:	08004153 	.word	0x08004153
 800406c:	0800415d 	.word	0x0800415d
 8004070:	08004167 	.word	0x08004167
 8004074:	08004171 	.word	0x08004171
 8004078:	0800417b 	.word	0x0800417b
 800407c:	08004185 	.word	0x08004185
 8004080:	0800418f 	.word	0x0800418f
 8004084:	08004199 	.word	0x08004199
 8004088:	080041a3 	.word	0x080041a3
 800408c:	080041ad 	.word	0x080041ad
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8004096:	e0f7      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800409e:	e0f3      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80040a6:	e0ef      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80040ae:	e0eb      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80040b6:	e0e7      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80040be:	e0e3      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80040c6:	e0df      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80040ce:	e0db      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80040d6:	e0d7      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80040de:	e0d3      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80040e6:	e0cf      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80040ee:	e0cb      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80040f6:	e0c7      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8004100:	e0c2      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800410a:	e0bd      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8004114:	e0b8      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800411e:	e0b3      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8004128:	e0ae      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8004132:	e0a9      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800413c:	e0a4      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8004146:	e09f      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8004150:	e09a      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800415a:	e095      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8004164:	e090      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800416e:	e08b      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8004178:	e086      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8004182:	e081      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800418c:	e07c      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8004196:	e077      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 80041a0:	e072      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80041aa:	e06d      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80041b4:	e068      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	75fb      	strb	r3, [r7, #23]
        break;
 80041ba:	e065      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d15d      	bne.n	8004284 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 80041c8:	7afb      	ldrb	r3, [r7, #11]
 80041ca:	2b0d      	cmp	r3, #13
 80041cc:	d857      	bhi.n	800427e <HAL_TIM_RegisterCallback+0x2a6>
 80041ce:	a201      	add	r2, pc, #4	@ (adr r2, 80041d4 <HAL_TIM_RegisterCallback+0x1fc>)
 80041d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d4:	0800420d 	.word	0x0800420d
 80041d8:	08004215 	.word	0x08004215
 80041dc:	0800421d 	.word	0x0800421d
 80041e0:	08004225 	.word	0x08004225
 80041e4:	0800422d 	.word	0x0800422d
 80041e8:	08004235 	.word	0x08004235
 80041ec:	0800423d 	.word	0x0800423d
 80041f0:	08004245 	.word	0x08004245
 80041f4:	0800424d 	.word	0x0800424d
 80041f8:	08004255 	.word	0x08004255
 80041fc:	0800425d 	.word	0x0800425d
 8004200:	08004265 	.word	0x08004265
 8004204:	0800426d 	.word	0x0800426d
 8004208:	08004275 	.word	0x08004275
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8004212:	e039      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800421a:	e035      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8004222:	e031      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800422a:	e02d      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8004232:	e029      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800423a:	e025      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8004242:	e021      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800424a:	e01d      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8004252:	e019      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800425a:	e015      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8004262:	e011      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800426a:	e00d      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8004272:	e009      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800427c:	e004      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	75fb      	strb	r3, [r7, #23]
        break;
 8004282:	e001      	b.n	8004288 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004288:	7dfb      	ldrb	r3, [r7, #23]
}
 800428a:	4618      	mov	r0, r3
 800428c:	371c      	adds	r7, #28
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop

08004298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a4c      	ldr	r2, [pc, #304]	@ (80043dc <TIM_Base_SetConfig+0x144>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d017      	beq.n	80042e0 <TIM_Base_SetConfig+0x48>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042b6:	d013      	beq.n	80042e0 <TIM_Base_SetConfig+0x48>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a49      	ldr	r2, [pc, #292]	@ (80043e0 <TIM_Base_SetConfig+0x148>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d00f      	beq.n	80042e0 <TIM_Base_SetConfig+0x48>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a48      	ldr	r2, [pc, #288]	@ (80043e4 <TIM_Base_SetConfig+0x14c>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d00b      	beq.n	80042e0 <TIM_Base_SetConfig+0x48>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a47      	ldr	r2, [pc, #284]	@ (80043e8 <TIM_Base_SetConfig+0x150>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d007      	beq.n	80042e0 <TIM_Base_SetConfig+0x48>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a46      	ldr	r2, [pc, #280]	@ (80043ec <TIM_Base_SetConfig+0x154>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d003      	beq.n	80042e0 <TIM_Base_SetConfig+0x48>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a45      	ldr	r2, [pc, #276]	@ (80043f0 <TIM_Base_SetConfig+0x158>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d108      	bne.n	80042f2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a39      	ldr	r2, [pc, #228]	@ (80043dc <TIM_Base_SetConfig+0x144>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d023      	beq.n	8004342 <TIM_Base_SetConfig+0xaa>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004300:	d01f      	beq.n	8004342 <TIM_Base_SetConfig+0xaa>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a36      	ldr	r2, [pc, #216]	@ (80043e0 <TIM_Base_SetConfig+0x148>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d01b      	beq.n	8004342 <TIM_Base_SetConfig+0xaa>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a35      	ldr	r2, [pc, #212]	@ (80043e4 <TIM_Base_SetConfig+0x14c>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d017      	beq.n	8004342 <TIM_Base_SetConfig+0xaa>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a34      	ldr	r2, [pc, #208]	@ (80043e8 <TIM_Base_SetConfig+0x150>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d013      	beq.n	8004342 <TIM_Base_SetConfig+0xaa>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a33      	ldr	r2, [pc, #204]	@ (80043ec <TIM_Base_SetConfig+0x154>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d00f      	beq.n	8004342 <TIM_Base_SetConfig+0xaa>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a33      	ldr	r2, [pc, #204]	@ (80043f4 <TIM_Base_SetConfig+0x15c>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d00b      	beq.n	8004342 <TIM_Base_SetConfig+0xaa>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a32      	ldr	r2, [pc, #200]	@ (80043f8 <TIM_Base_SetConfig+0x160>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d007      	beq.n	8004342 <TIM_Base_SetConfig+0xaa>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a31      	ldr	r2, [pc, #196]	@ (80043fc <TIM_Base_SetConfig+0x164>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d003      	beq.n	8004342 <TIM_Base_SetConfig+0xaa>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a2c      	ldr	r2, [pc, #176]	@ (80043f0 <TIM_Base_SetConfig+0x158>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d108      	bne.n	8004354 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004348:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	4313      	orrs	r3, r2
 8004352:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	4313      	orrs	r3, r2
 8004360:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a18      	ldr	r2, [pc, #96]	@ (80043dc <TIM_Base_SetConfig+0x144>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d013      	beq.n	80043a8 <TIM_Base_SetConfig+0x110>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a1a      	ldr	r2, [pc, #104]	@ (80043ec <TIM_Base_SetConfig+0x154>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d00f      	beq.n	80043a8 <TIM_Base_SetConfig+0x110>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a1a      	ldr	r2, [pc, #104]	@ (80043f4 <TIM_Base_SetConfig+0x15c>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d00b      	beq.n	80043a8 <TIM_Base_SetConfig+0x110>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a19      	ldr	r2, [pc, #100]	@ (80043f8 <TIM_Base_SetConfig+0x160>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d007      	beq.n	80043a8 <TIM_Base_SetConfig+0x110>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a18      	ldr	r2, [pc, #96]	@ (80043fc <TIM_Base_SetConfig+0x164>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d003      	beq.n	80043a8 <TIM_Base_SetConfig+0x110>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a13      	ldr	r2, [pc, #76]	@ (80043f0 <TIM_Base_SetConfig+0x158>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d103      	bne.n	80043b0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	691a      	ldr	r2, [r3, #16]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d105      	bne.n	80043ce <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	f023 0201 	bic.w	r2, r3, #1
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	611a      	str	r2, [r3, #16]
  }
}
 80043ce:	bf00      	nop
 80043d0:	3714      	adds	r7, #20
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	40012c00 	.word	0x40012c00
 80043e0:	40000400 	.word	0x40000400
 80043e4:	40000800 	.word	0x40000800
 80043e8:	40000c00 	.word	0x40000c00
 80043ec:	40013400 	.word	0x40013400
 80043f0:	40015000 	.word	0x40015000
 80043f4:	40014000 	.word	0x40014000
 80043f8:	40014400 	.word	0x40014400
 80043fc:	40014800 	.word	0x40014800

08004400 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004400:	b480      	push	{r7}
 8004402:	b087      	sub	sp, #28
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	f023 0201 	bic.w	r2, r3, #1
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800442a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	011b      	lsls	r3, r3, #4
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	4313      	orrs	r3, r2
 8004434:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f023 030a 	bic.w	r3, r3, #10
 800443c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	4313      	orrs	r3, r2
 8004444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	621a      	str	r2, [r3, #32]
}
 8004452:	bf00      	nop
 8004454:	371c      	adds	r7, #28
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800445e:	b480      	push	{r7}
 8004460:	b087      	sub	sp, #28
 8004462:	af00      	add	r7, sp, #0
 8004464:	60f8      	str	r0, [r7, #12]
 8004466:	60b9      	str	r1, [r7, #8]
 8004468:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	f023 0210 	bic.w	r2, r3, #16
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004488:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	031b      	lsls	r3, r3, #12
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	4313      	orrs	r3, r2
 8004492:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800449a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	011b      	lsls	r3, r3, #4
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	621a      	str	r2, [r3, #32]
}
 80044b2:	bf00      	nop
 80044b4:	371c      	adds	r7, #28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044be:	b480      	push	{r7}
 80044c0:	b085      	sub	sp, #20
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
 80044c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80044d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4313      	orrs	r3, r2
 80044e0:	f043 0307 	orr.w	r3, r3, #7
 80044e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	609a      	str	r2, [r3, #8]
}
 80044ec:	bf00      	nop
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
 8004504:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004512:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	021a      	lsls	r2, r3, #8
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	431a      	orrs	r2, r3
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	4313      	orrs	r3, r2
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	4313      	orrs	r3, r2
 8004524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	609a      	str	r2, [r3, #8]
}
 800452c:	bf00      	nop
 800452e:	371c      	adds	r7, #28
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004538:	b480      	push	{r7}
 800453a:	b087      	sub	sp, #28
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	f003 031f 	and.w	r3, r3, #31
 800454a:	2201      	movs	r2, #1
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6a1a      	ldr	r2, [r3, #32]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	43db      	mvns	r3, r3
 800455a:	401a      	ands	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6a1a      	ldr	r2, [r3, #32]
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	f003 031f 	and.w	r3, r3, #31
 800456a:	6879      	ldr	r1, [r7, #4]
 800456c:	fa01 f303 	lsl.w	r3, r1, r3
 8004570:	431a      	orrs	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	621a      	str	r2, [r3, #32]
}
 8004576:	bf00      	nop
 8004578:	371c      	adds	r7, #28
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
	...

08004584 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a26      	ldr	r2, [pc, #152]	@ (8004628 <TIM_ResetCallback+0xa4>)
 8004590:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a25      	ldr	r2, [pc, #148]	@ (800462c <TIM_ResetCallback+0xa8>)
 8004598:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a24      	ldr	r2, [pc, #144]	@ (8004630 <TIM_ResetCallback+0xac>)
 80045a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a23      	ldr	r2, [pc, #140]	@ (8004634 <TIM_ResetCallback+0xb0>)
 80045a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a22      	ldr	r2, [pc, #136]	@ (8004638 <TIM_ResetCallback+0xb4>)
 80045b0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a21      	ldr	r2, [pc, #132]	@ (800463c <TIM_ResetCallback+0xb8>)
 80045b8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a20      	ldr	r2, [pc, #128]	@ (8004640 <TIM_ResetCallback+0xbc>)
 80045c0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a1f      	ldr	r2, [pc, #124]	@ (8004644 <TIM_ResetCallback+0xc0>)
 80045c8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a1e      	ldr	r2, [pc, #120]	@ (8004648 <TIM_ResetCallback+0xc4>)
 80045d0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a1d      	ldr	r2, [pc, #116]	@ (800464c <TIM_ResetCallback+0xc8>)
 80045d8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a1c      	ldr	r2, [pc, #112]	@ (8004650 <TIM_ResetCallback+0xcc>)
 80045e0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a1b      	ldr	r2, [pc, #108]	@ (8004654 <TIM_ResetCallback+0xd0>)
 80045e8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a1a      	ldr	r2, [pc, #104]	@ (8004658 <TIM_ResetCallback+0xd4>)
 80045f0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a19      	ldr	r2, [pc, #100]	@ (800465c <TIM_ResetCallback+0xd8>)
 80045f8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a18      	ldr	r2, [pc, #96]	@ (8004660 <TIM_ResetCallback+0xdc>)
 8004600:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a17      	ldr	r2, [pc, #92]	@ (8004664 <TIM_ResetCallback+0xe0>)
 8004608:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a16      	ldr	r2, [pc, #88]	@ (8004668 <TIM_ResetCallback+0xe4>)
 8004610:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a15      	ldr	r2, [pc, #84]	@ (800466c <TIM_ResetCallback+0xe8>)
 8004618:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr
 8004628:	08003f11 	.word	0x08003f11
 800462c:	08003f25 	.word	0x08003f25
 8004630:	08003f9d 	.word	0x08003f9d
 8004634:	08003fb1 	.word	0x08003fb1
 8004638:	08003f4d 	.word	0x08003f4d
 800463c:	08003f61 	.word	0x08003f61
 8004640:	08003f39 	.word	0x08003f39
 8004644:	08003f75 	.word	0x08003f75
 8004648:	08003f89 	.word	0x08003f89
 800464c:	08003fc5 	.word	0x08003fc5
 8004650:	0800479d 	.word	0x0800479d
 8004654:	080047b1 	.word	0x080047b1
 8004658:	080047c5 	.word	0x080047c5
 800465c:	080047d9 	.word	0x080047d9
 8004660:	080047ed 	.word	0x080047ed
 8004664:	08004801 	.word	0x08004801
 8004668:	08004815 	.word	0x08004815
 800466c:	08004829 	.word	0x08004829

08004670 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004680:	2b01      	cmp	r3, #1
 8004682:	d101      	bne.n	8004688 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004684:	2302      	movs	r3, #2
 8004686:	e074      	b.n	8004772 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a34      	ldr	r2, [pc, #208]	@ (8004780 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d009      	beq.n	80046c6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a33      	ldr	r2, [pc, #204]	@ (8004784 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d004      	beq.n	80046c6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a31      	ldr	r2, [pc, #196]	@ (8004788 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d108      	bne.n	80046d8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80046cc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80046de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a21      	ldr	r2, [pc, #132]	@ (8004780 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d022      	beq.n	8004746 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004708:	d01d      	beq.n	8004746 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a1f      	ldr	r2, [pc, #124]	@ (800478c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d018      	beq.n	8004746 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a1d      	ldr	r2, [pc, #116]	@ (8004790 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d013      	beq.n	8004746 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a1c      	ldr	r2, [pc, #112]	@ (8004794 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d00e      	beq.n	8004746 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a15      	ldr	r2, [pc, #84]	@ (8004784 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d009      	beq.n	8004746 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a18      	ldr	r2, [pc, #96]	@ (8004798 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d004      	beq.n	8004746 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a11      	ldr	r2, [pc, #68]	@ (8004788 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d10c      	bne.n	8004760 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800474c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	4313      	orrs	r3, r2
 8004756:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68ba      	ldr	r2, [r7, #8]
 800475e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	40012c00 	.word	0x40012c00
 8004784:	40013400 	.word	0x40013400
 8004788:	40015000 	.word	0x40015000
 800478c:	40000400 	.word	0x40000400
 8004790:	40000800 	.word	0x40000800
 8004794:	40000c00 	.word	0x40000c00
 8004798:	40014000 	.word	0x40014000

0800479c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e050      	b.n	80048f0 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004854:	2b00      	cmp	r3, #0
 8004856:	d114      	bne.n	8004882 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 fdc5 	bl	80053f0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800486c:	2b00      	cmp	r3, #0
 800486e:	d103      	bne.n	8004878 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a21      	ldr	r2, [pc, #132]	@ (80048f8 <HAL_UART_Init+0xbc>)
 8004874:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2224      	movs	r2, #36	@ 0x24
 8004886:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 0201 	bic.w	r2, r2, #1
 8004898:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d002      	beq.n	80048a8 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f001 f8f2 	bl	8005a8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 fdf3 	bl	8005494 <UART_SetConfig>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d101      	bne.n	80048b8 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e01b      	b.n	80048f0 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685a      	ldr	r2, [r3, #4]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689a      	ldr	r2, [r3, #8]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f042 0201 	orr.w	r2, r2, #1
 80048e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f001 f971 	bl	8005bd0 <UART_CheckIdleState>
 80048ee:	4603      	mov	r3, r0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	08001531 	.word	0x08001531

080048fc <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b087      	sub	sp, #28
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	460b      	mov	r3, r1
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800490a:	2300      	movs	r3, #0
 800490c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d109      	bne.n	8004928 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800491a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e09c      	b.n	8004a62 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800492e:	2b20      	cmp	r3, #32
 8004930:	d16c      	bne.n	8004a0c <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8004932:	7afb      	ldrb	r3, [r7, #11]
 8004934:	2b0c      	cmp	r3, #12
 8004936:	d85e      	bhi.n	80049f6 <HAL_UART_RegisterCallback+0xfa>
 8004938:	a201      	add	r2, pc, #4	@ (adr r2, 8004940 <HAL_UART_RegisterCallback+0x44>)
 800493a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493e:	bf00      	nop
 8004940:	08004975 	.word	0x08004975
 8004944:	0800497f 	.word	0x0800497f
 8004948:	08004989 	.word	0x08004989
 800494c:	08004993 	.word	0x08004993
 8004950:	0800499d 	.word	0x0800499d
 8004954:	080049a7 	.word	0x080049a7
 8004958:	080049b1 	.word	0x080049b1
 800495c:	080049bb 	.word	0x080049bb
 8004960:	080049c5 	.word	0x080049c5
 8004964:	080049cf 	.word	0x080049cf
 8004968:	080049d9 	.word	0x080049d9
 800496c:	080049e3 	.word	0x080049e3
 8004970:	080049ed 	.word	0x080049ed
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800497c:	e070      	b.n	8004a60 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8004986:	e06b      	b.n	8004a60 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8004990:	e066      	b.n	8004a60 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800499a:	e061      	b.n	8004a60 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80049a4:	e05c      	b.n	8004a60 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80049ae:	e057      	b.n	8004a60 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80049b8:	e052      	b.n	8004a60 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80049c2:	e04d      	b.n	8004a60 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80049cc:	e048      	b.n	8004a60 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80049d6:	e043      	b.n	8004a60 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80049e0:	e03e      	b.n	8004a60 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80049ea:	e039      	b.n	8004a60 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80049f4:	e034      	b.n	8004a60 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049fc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	75fb      	strb	r3, [r7, #23]
        break;
 8004a0a:	e029      	b.n	8004a60 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d11a      	bne.n	8004a4c <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8004a16:	7afb      	ldrb	r3, [r7, #11]
 8004a18:	2b0b      	cmp	r3, #11
 8004a1a:	d002      	beq.n	8004a22 <HAL_UART_RegisterCallback+0x126>
 8004a1c:	2b0c      	cmp	r3, #12
 8004a1e:	d005      	beq.n	8004a2c <HAL_UART_RegisterCallback+0x130>
 8004a20:	e009      	b.n	8004a36 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8004a2a:	e019      	b.n	8004a60 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8004a34:	e014      	b.n	8004a60 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a3c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	75fb      	strb	r3, [r7, #23]
        break;
 8004a4a:	e009      	b.n	8004a60 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a52:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	371c      	adds	r7, #28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop

08004a70 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b08a      	sub	sp, #40	@ 0x28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a84:	2b20      	cmp	r3, #32
 8004a86:	d167      	bne.n	8004b58 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d002      	beq.n	8004a94 <HAL_UART_Transmit_DMA+0x24>
 8004a8e:	88fb      	ldrh	r3, [r7, #6]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d101      	bne.n	8004a98 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e060      	b.n	8004b5a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	88fa      	ldrh	r2, [r7, #6]
 8004aa2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	88fa      	ldrh	r2, [r7, #6]
 8004aaa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2221      	movs	r2, #33	@ 0x21
 8004aba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d028      	beq.n	8004b18 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004aca:	4a26      	ldr	r2, [pc, #152]	@ (8004b64 <HAL_UART_Transmit_DMA+0xf4>)
 8004acc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ad2:	4a25      	ldr	r2, [pc, #148]	@ (8004b68 <HAL_UART_Transmit_DMA+0xf8>)
 8004ad4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ada:	4a24      	ldr	r2, [pc, #144]	@ (8004b6c <HAL_UART_Transmit_DMA+0xfc>)
 8004adc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aee:	4619      	mov	r1, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	3328      	adds	r3, #40	@ 0x28
 8004af6:	461a      	mov	r2, r3
 8004af8:	88fb      	ldrh	r3, [r7, #6]
 8004afa:	f7fd f8a7 	bl	8001c4c <HAL_DMA_Start_IT>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d009      	beq.n	8004b18 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2210      	movs	r2, #16
 8004b08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e020      	b.n	8004b5a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2240      	movs	r2, #64	@ 0x40
 8004b1e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	3308      	adds	r3, #8
 8004b26:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	e853 3f00 	ldrex	r3, [r3]
 8004b2e:	613b      	str	r3, [r7, #16]
   return(result);
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b36:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	3308      	adds	r3, #8
 8004b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b40:	623a      	str	r2, [r7, #32]
 8004b42:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b44:	69f9      	ldr	r1, [r7, #28]
 8004b46:	6a3a      	ldr	r2, [r7, #32]
 8004b48:	e841 2300 	strex	r3, r2, [r1]
 8004b4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1e5      	bne.n	8004b20 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8004b54:	2300      	movs	r3, #0
 8004b56:	e000      	b.n	8004b5a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004b58:	2302      	movs	r3, #2
  }
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3728      	adds	r7, #40	@ 0x28
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	0800609b 	.word	0x0800609b
 8004b68:	08006139 	.word	0x08006139
 8004b6c:	080062d3 	.word	0x080062d3

08004b70 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b08a      	sub	sp, #40	@ 0x28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b84:	2b20      	cmp	r3, #32
 8004b86:	d137      	bne.n	8004bf8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d002      	beq.n	8004b94 <HAL_UART_Receive_DMA+0x24>
 8004b8e:	88fb      	ldrh	r3, [r7, #6]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e030      	b.n	8004bfa <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a18      	ldr	r2, [pc, #96]	@ (8004c04 <HAL_UART_Receive_DMA+0x94>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d01f      	beq.n	8004be8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d018      	beq.n	8004be8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	e853 3f00 	ldrex	r3, [r3]
 8004bc2:	613b      	str	r3, [r7, #16]
   return(result);
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004bca:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd4:	623b      	str	r3, [r7, #32]
 8004bd6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd8:	69f9      	ldr	r1, [r7, #28]
 8004bda:	6a3a      	ldr	r2, [r7, #32]
 8004bdc:	e841 2300 	strex	r3, r2, [r1]
 8004be0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1e6      	bne.n	8004bb6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004be8:	88fb      	ldrh	r3, [r7, #6]
 8004bea:	461a      	mov	r2, r3
 8004bec:	68b9      	ldr	r1, [r7, #8]
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f001 f906 	bl	8005e00 <UART_Start_Receive_DMA>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	e000      	b.n	8004bfa <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004bf8:	2302      	movs	r3, #2
  }
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3728      	adds	r7, #40	@ 0x28
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	40008000 	.word	0x40008000

08004c08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b0ba      	sub	sp, #232	@ 0xe8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004c2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004c32:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004c36:	4013      	ands	r3, r2
 8004c38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004c3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d11b      	bne.n	8004c7c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c48:	f003 0320 	and.w	r3, r3, #32
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d015      	beq.n	8004c7c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c54:	f003 0320 	and.w	r3, r3, #32
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d105      	bne.n	8004c68 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004c5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d009      	beq.n	8004c7c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 82f3 	beq.w	8005258 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	4798      	blx	r3
      }
      return;
 8004c7a:	e2ed      	b.n	8005258 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004c7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 8129 	beq.w	8004ed8 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004c86:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004c8a:	4b90      	ldr	r3, [pc, #576]	@ (8004ecc <HAL_UART_IRQHandler+0x2c4>)
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d106      	bne.n	8004ca0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004c92:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004c96:	4b8e      	ldr	r3, [pc, #568]	@ (8004ed0 <HAL_UART_IRQHandler+0x2c8>)
 8004c98:	4013      	ands	r3, r2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 811c 	beq.w	8004ed8 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d011      	beq.n	8004cd0 <HAL_UART_IRQHandler+0xc8>
 8004cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00b      	beq.n	8004cd0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cc6:	f043 0201 	orr.w	r2, r3, #1
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d011      	beq.n	8004d00 <HAL_UART_IRQHandler+0xf8>
 8004cdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00b      	beq.n	8004d00 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2202      	movs	r2, #2
 8004cee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cf6:	f043 0204 	orr.w	r2, r3, #4
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d04:	f003 0304 	and.w	r3, r3, #4
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d011      	beq.n	8004d30 <HAL_UART_IRQHandler+0x128>
 8004d0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00b      	beq.n	8004d30 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2204      	movs	r2, #4
 8004d1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d26:	f043 0202 	orr.w	r2, r3, #2
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d34:	f003 0308 	and.w	r3, r3, #8
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d017      	beq.n	8004d6c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d40:	f003 0320 	and.w	r3, r3, #32
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d105      	bne.n	8004d54 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004d48:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004d4c:	4b5f      	ldr	r3, [pc, #380]	@ (8004ecc <HAL_UART_IRQHandler+0x2c4>)
 8004d4e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00b      	beq.n	8004d6c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2208      	movs	r2, #8
 8004d5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d62:	f043 0208 	orr.w	r2, r3, #8
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d012      	beq.n	8004d9e <HAL_UART_IRQHandler+0x196>
 8004d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d7c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00c      	beq.n	8004d9e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d94:	f043 0220 	orr.w	r2, r3, #32
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f000 8259 	beq.w	800525c <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dae:	f003 0320 	and.w	r3, r3, #32
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d013      	beq.n	8004dde <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004db6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dba:	f003 0320 	and.w	r3, r3, #32
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d105      	bne.n	8004dce <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004dc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d007      	beq.n	8004dde <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004de4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004df2:	2b40      	cmp	r3, #64	@ 0x40
 8004df4:	d005      	beq.n	8004e02 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004df6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dfa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d058      	beq.n	8004eb4 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f001 f8e3 	bl	8005fce <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e12:	2b40      	cmp	r3, #64	@ 0x40
 8004e14:	d148      	bne.n	8004ea8 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3308      	adds	r3, #8
 8004e1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e24:	e853 3f00 	ldrex	r3, [r3]
 8004e28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004e2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	3308      	adds	r3, #8
 8004e3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004e42:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004e46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004e4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004e52:	e841 2300 	strex	r3, r2, [r1]
 8004e56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004e5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1d9      	bne.n	8004e16 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d017      	beq.n	8004e9c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e72:	4a18      	ldr	r2, [pc, #96]	@ (8004ed4 <HAL_UART_IRQHandler+0x2cc>)
 8004e74:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7fc ffb9 	bl	8001df4 <HAL_DMA_Abort_IT>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d01f      	beq.n	8004ec8 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004e96:	4610      	mov	r0, r2
 8004e98:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e9a:	e015      	b.n	8004ec8 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea6:	e00f      	b.n	8004ec8 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eb2:	e009      	b.n	8004ec8 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004ec6:	e1c9      	b.n	800525c <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ec8:	bf00      	nop
    return;
 8004eca:	e1c7      	b.n	800525c <HAL_UART_IRQHandler+0x654>
 8004ecc:	10000001 	.word	0x10000001
 8004ed0:	04000120 	.word	0x04000120
 8004ed4:	08006357 	.word	0x08006357

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	f040 8157 	bne.w	8005190 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ee6:	f003 0310 	and.w	r3, r3, #16
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 8150 	beq.w	8005190 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ef4:	f003 0310 	and.w	r3, r3, #16
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f000 8149 	beq.w	8005190 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2210      	movs	r2, #16
 8004f04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f10:	2b40      	cmp	r3, #64	@ 0x40
 8004f12:	f040 80bd 	bne.w	8005090 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f000 8199 	beq.w	8005260 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004f34:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	f080 8191 	bcs.w	8005260 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f44:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0320 	and.w	r3, r3, #32
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f040 8087 	bne.w	800506a <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f68:	e853 3f00 	ldrex	r3, [r3]
 8004f6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004f70:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	461a      	mov	r2, r3
 8004f82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004f86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004f8a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004f92:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004f96:	e841 2300 	strex	r3, r2, [r1]
 8004f9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004f9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1da      	bne.n	8004f5c <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	3308      	adds	r3, #8
 8004fac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fb0:	e853 3f00 	ldrex	r3, [r3]
 8004fb4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004fb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004fb8:	f023 0301 	bic.w	r3, r3, #1
 8004fbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	3308      	adds	r3, #8
 8004fc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004fca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004fce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004fd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004fd6:	e841 2300 	strex	r3, r2, [r1]
 8004fda:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004fdc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1e1      	bne.n	8004fa6 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	3308      	adds	r3, #8
 8004fe8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fec:	e853 3f00 	ldrex	r3, [r3]
 8004ff0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004ff2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ff4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ff8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	3308      	adds	r3, #8
 8005002:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005006:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005008:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800500c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800500e:	e841 2300 	strex	r3, r2, [r1]
 8005012:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005014:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1e3      	bne.n	8004fe2 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2220      	movs	r2, #32
 800501e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005030:	e853 3f00 	ldrex	r3, [r3]
 8005034:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005036:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005038:	f023 0310 	bic.w	r3, r3, #16
 800503c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	461a      	mov	r2, r3
 8005046:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800504a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800504c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005050:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005052:	e841 2300 	strex	r3, r2, [r1]
 8005056:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005058:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1e4      	bne.n	8005028 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005064:	4618      	mov	r0, r3
 8005066:	f7fc fe6c 	bl	8001d42 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2202      	movs	r2, #2
 800506e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8005082:	b292      	uxth	r2, r2
 8005084:	1a8a      	subs	r2, r1, r2
 8005086:	b292      	uxth	r2, r2
 8005088:	4611      	mov	r1, r2
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800508e:	e0e7      	b.n	8005260 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800509c:	b29b      	uxth	r3, r3
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 80d9 	beq.w	8005264 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 80050b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f000 80d4 	beq.w	8005264 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050c4:	e853 3f00 	ldrex	r3, [r3]
 80050c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	461a      	mov	r2, r3
 80050da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80050de:	647b      	str	r3, [r7, #68]	@ 0x44
 80050e0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050e6:	e841 2300 	strex	r3, r2, [r1]
 80050ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1e4      	bne.n	80050bc <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	3308      	adds	r3, #8
 80050f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fc:	e853 3f00 	ldrex	r3, [r3]
 8005100:	623b      	str	r3, [r7, #32]
   return(result);
 8005102:	6a3b      	ldr	r3, [r7, #32]
 8005104:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005108:	f023 0301 	bic.w	r3, r3, #1
 800510c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	3308      	adds	r3, #8
 8005116:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800511a:	633a      	str	r2, [r7, #48]	@ 0x30
 800511c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005120:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005122:	e841 2300 	strex	r3, r2, [r1]
 8005126:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1e1      	bne.n	80050f2 <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2220      	movs	r2, #32
 8005132:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	e853 3f00 	ldrex	r3, [r3]
 800514e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f023 0310 	bic.w	r3, r3, #16
 8005156:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	461a      	mov	r2, r3
 8005160:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005164:	61fb      	str	r3, [r7, #28]
 8005166:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005168:	69b9      	ldr	r1, [r7, #24]
 800516a:	69fa      	ldr	r2, [r7, #28]
 800516c:	e841 2300 	strex	r3, r2, [r1]
 8005170:	617b      	str	r3, [r7, #20]
   return(result);
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1e4      	bne.n	8005142 <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005184:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8005188:	4611      	mov	r1, r2
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800518e:	e069      	b.n	8005264 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005194:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d010      	beq.n	80051be <HAL_UART_IRQHandler+0x5b6>
 800519c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00a      	beq.n	80051be <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80051b0:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80051bc:	e055      	b.n	800526a <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80051be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d014      	beq.n	80051f4 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80051ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d105      	bne.n	80051e2 <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80051d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d008      	beq.n	80051f4 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d03e      	beq.n	8005268 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	4798      	blx	r3
    }
    return;
 80051f2:	e039      	b.n	8005268 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80051f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d009      	beq.n	8005214 <HAL_UART_IRQHandler+0x60c>
 8005200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005208:	2b00      	cmp	r3, #0
 800520a:	d003      	beq.n	8005214 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f001 f8ba 	bl	8006386 <UART_EndTransmit_IT>
    return;
 8005212:	e02a      	b.n	800526a <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005218:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00b      	beq.n	8005238 <HAL_UART_IRQHandler+0x630>
 8005220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005224:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d005      	beq.n	8005238 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005236:	e018      	b.n	800526a <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800523c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d012      	beq.n	800526a <HAL_UART_IRQHandler+0x662>
 8005244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005248:	2b00      	cmp	r3, #0
 800524a:	da0e      	bge.n	800526a <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005256:	e008      	b.n	800526a <HAL_UART_IRQHandler+0x662>
      return;
 8005258:	bf00      	nop
 800525a:	e006      	b.n	800526a <HAL_UART_IRQHandler+0x662>
    return;
 800525c:	bf00      	nop
 800525e:	e004      	b.n	800526a <HAL_UART_IRQHandler+0x662>
      return;
 8005260:	bf00      	nop
 8005262:	e002      	b.n	800526a <HAL_UART_IRQHandler+0x662>
      return;
 8005264:	bf00      	nop
 8005266:	e000      	b.n	800526a <HAL_UART_IRQHandler+0x662>
    return;
 8005268:	bf00      	nop
  }
}
 800526a:	37e8      	adds	r7, #232	@ 0xe8
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	460b      	mov	r3, r1
 800531a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a09      	ldr	r2, [pc, #36]	@ (800535c <HAL_UART_ReceiverTimeout_Config+0x34>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d009      	beq.n	8005350 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	430a      	orrs	r2, r1
 800534e:	615a      	str	r2, [r3, #20]
  }
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	40008000 	.word	0x40008000

08005360 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a18      	ldr	r2, [pc, #96]	@ (80053d0 <HAL_UART_EnableReceiverTimeout+0x70>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d027      	beq.n	80053c2 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005378:	2b20      	cmp	r3, #32
 800537a:	d120      	bne.n	80053be <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005382:	2b01      	cmp	r3, #1
 8005384:	d101      	bne.n	800538a <HAL_UART_EnableReceiverTimeout+0x2a>
 8005386:	2302      	movs	r3, #2
 8005388:	e01c      	b.n	80053c4 <HAL_UART_EnableReceiverTimeout+0x64>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2224      	movs	r2, #36	@ 0x24
 8005396:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	685a      	ldr	r2, [r3, #4]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80053a8:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2220      	movs	r2, #32
 80053ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 80053ba:	2300      	movs	r3, #0
 80053bc:	e002      	b.n	80053c4 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 80053be:	2302      	movs	r3, #2
 80053c0:	e000      	b.n	80053c4 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
  }
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	40008000 	.word	0x40008000

080053d4 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
	...

080053f0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a1a      	ldr	r2, [pc, #104]	@ (8005464 <UART_InitCallbacksToDefault+0x74>)
 80053fc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a19      	ldr	r2, [pc, #100]	@ (8005468 <UART_InitCallbacksToDefault+0x78>)
 8005404:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a18      	ldr	r2, [pc, #96]	@ (800546c <UART_InitCallbacksToDefault+0x7c>)
 800540c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a17      	ldr	r2, [pc, #92]	@ (8005470 <UART_InitCallbacksToDefault+0x80>)
 8005414:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a16      	ldr	r2, [pc, #88]	@ (8005474 <UART_InitCallbacksToDefault+0x84>)
 800541c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a15      	ldr	r2, [pc, #84]	@ (8005478 <UART_InitCallbacksToDefault+0x88>)
 8005424:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a14      	ldr	r2, [pc, #80]	@ (800547c <UART_InitCallbacksToDefault+0x8c>)
 800542c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a13      	ldr	r2, [pc, #76]	@ (8005480 <UART_InitCallbacksToDefault+0x90>)
 8005434:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a12      	ldr	r2, [pc, #72]	@ (8005484 <UART_InitCallbacksToDefault+0x94>)
 800543c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a11      	ldr	r2, [pc, #68]	@ (8005488 <UART_InitCallbacksToDefault+0x98>)
 8005444:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a10      	ldr	r2, [pc, #64]	@ (800548c <UART_InitCallbacksToDefault+0x9c>)
 800544c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a0f      	ldr	r2, [pc, #60]	@ (8005490 <UART_InitCallbacksToDefault+0xa0>)
 8005454:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	08005285 	.word	0x08005285
 8005468:	08005271 	.word	0x08005271
 800546c:	080052ad 	.word	0x080052ad
 8005470:	08005299 	.word	0x08005299
 8005474:	080052c1 	.word	0x080052c1
 8005478:	080052d5 	.word	0x080052d5
 800547c:	080052e9 	.word	0x080052e9
 8005480:	080052fd 	.word	0x080052fd
 8005484:	080063e1 	.word	0x080063e1
 8005488:	080063f5 	.word	0x080063f5
 800548c:	08006409 	.word	0x08006409
 8005490:	08005311 	.word	0x08005311

08005494 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005498:	b08c      	sub	sp, #48	@ 0x30
 800549a:	af00      	add	r7, sp, #0
 800549c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800549e:	2300      	movs	r3, #0
 80054a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	689a      	ldr	r2, [r3, #8]
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	431a      	orrs	r2, r3
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	431a      	orrs	r2, r3
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	69db      	ldr	r3, [r3, #28]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	4baa      	ldr	r3, [pc, #680]	@ (800576c <UART_SetConfig+0x2d8>)
 80054c4:	4013      	ands	r3, r2
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	6812      	ldr	r2, [r2, #0]
 80054ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054cc:	430b      	orrs	r3, r1
 80054ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	68da      	ldr	r2, [r3, #12]
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	430a      	orrs	r2, r1
 80054e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a9f      	ldr	r2, [pc, #636]	@ (8005770 <UART_SetConfig+0x2dc>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d004      	beq.n	8005500 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054fc:	4313      	orrs	r3, r2
 80054fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800550a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	6812      	ldr	r2, [r2, #0]
 8005512:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005514:	430b      	orrs	r3, r1
 8005516:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800551e:	f023 010f 	bic.w	r1, r3, #15
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	430a      	orrs	r2, r1
 800552c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a90      	ldr	r2, [pc, #576]	@ (8005774 <UART_SetConfig+0x2e0>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d125      	bne.n	8005584 <UART_SetConfig+0xf0>
 8005538:	4b8f      	ldr	r3, [pc, #572]	@ (8005778 <UART_SetConfig+0x2e4>)
 800553a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800553e:	f003 0303 	and.w	r3, r3, #3
 8005542:	2b03      	cmp	r3, #3
 8005544:	d81a      	bhi.n	800557c <UART_SetConfig+0xe8>
 8005546:	a201      	add	r2, pc, #4	@ (adr r2, 800554c <UART_SetConfig+0xb8>)
 8005548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800554c:	0800555d 	.word	0x0800555d
 8005550:	0800556d 	.word	0x0800556d
 8005554:	08005565 	.word	0x08005565
 8005558:	08005575 	.word	0x08005575
 800555c:	2301      	movs	r3, #1
 800555e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005562:	e116      	b.n	8005792 <UART_SetConfig+0x2fe>
 8005564:	2302      	movs	r3, #2
 8005566:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800556a:	e112      	b.n	8005792 <UART_SetConfig+0x2fe>
 800556c:	2304      	movs	r3, #4
 800556e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005572:	e10e      	b.n	8005792 <UART_SetConfig+0x2fe>
 8005574:	2308      	movs	r3, #8
 8005576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800557a:	e10a      	b.n	8005792 <UART_SetConfig+0x2fe>
 800557c:	2310      	movs	r3, #16
 800557e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005582:	e106      	b.n	8005792 <UART_SetConfig+0x2fe>
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a7c      	ldr	r2, [pc, #496]	@ (800577c <UART_SetConfig+0x2e8>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d138      	bne.n	8005600 <UART_SetConfig+0x16c>
 800558e:	4b7a      	ldr	r3, [pc, #488]	@ (8005778 <UART_SetConfig+0x2e4>)
 8005590:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005594:	f003 030c 	and.w	r3, r3, #12
 8005598:	2b0c      	cmp	r3, #12
 800559a:	d82d      	bhi.n	80055f8 <UART_SetConfig+0x164>
 800559c:	a201      	add	r2, pc, #4	@ (adr r2, 80055a4 <UART_SetConfig+0x110>)
 800559e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a2:	bf00      	nop
 80055a4:	080055d9 	.word	0x080055d9
 80055a8:	080055f9 	.word	0x080055f9
 80055ac:	080055f9 	.word	0x080055f9
 80055b0:	080055f9 	.word	0x080055f9
 80055b4:	080055e9 	.word	0x080055e9
 80055b8:	080055f9 	.word	0x080055f9
 80055bc:	080055f9 	.word	0x080055f9
 80055c0:	080055f9 	.word	0x080055f9
 80055c4:	080055e1 	.word	0x080055e1
 80055c8:	080055f9 	.word	0x080055f9
 80055cc:	080055f9 	.word	0x080055f9
 80055d0:	080055f9 	.word	0x080055f9
 80055d4:	080055f1 	.word	0x080055f1
 80055d8:	2300      	movs	r3, #0
 80055da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055de:	e0d8      	b.n	8005792 <UART_SetConfig+0x2fe>
 80055e0:	2302      	movs	r3, #2
 80055e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055e6:	e0d4      	b.n	8005792 <UART_SetConfig+0x2fe>
 80055e8:	2304      	movs	r3, #4
 80055ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055ee:	e0d0      	b.n	8005792 <UART_SetConfig+0x2fe>
 80055f0:	2308      	movs	r3, #8
 80055f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055f6:	e0cc      	b.n	8005792 <UART_SetConfig+0x2fe>
 80055f8:	2310      	movs	r3, #16
 80055fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055fe:	e0c8      	b.n	8005792 <UART_SetConfig+0x2fe>
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a5e      	ldr	r2, [pc, #376]	@ (8005780 <UART_SetConfig+0x2ec>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d125      	bne.n	8005656 <UART_SetConfig+0x1c2>
 800560a:	4b5b      	ldr	r3, [pc, #364]	@ (8005778 <UART_SetConfig+0x2e4>)
 800560c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005610:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005614:	2b30      	cmp	r3, #48	@ 0x30
 8005616:	d016      	beq.n	8005646 <UART_SetConfig+0x1b2>
 8005618:	2b30      	cmp	r3, #48	@ 0x30
 800561a:	d818      	bhi.n	800564e <UART_SetConfig+0x1ba>
 800561c:	2b20      	cmp	r3, #32
 800561e:	d00a      	beq.n	8005636 <UART_SetConfig+0x1a2>
 8005620:	2b20      	cmp	r3, #32
 8005622:	d814      	bhi.n	800564e <UART_SetConfig+0x1ba>
 8005624:	2b00      	cmp	r3, #0
 8005626:	d002      	beq.n	800562e <UART_SetConfig+0x19a>
 8005628:	2b10      	cmp	r3, #16
 800562a:	d008      	beq.n	800563e <UART_SetConfig+0x1aa>
 800562c:	e00f      	b.n	800564e <UART_SetConfig+0x1ba>
 800562e:	2300      	movs	r3, #0
 8005630:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005634:	e0ad      	b.n	8005792 <UART_SetConfig+0x2fe>
 8005636:	2302      	movs	r3, #2
 8005638:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800563c:	e0a9      	b.n	8005792 <UART_SetConfig+0x2fe>
 800563e:	2304      	movs	r3, #4
 8005640:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005644:	e0a5      	b.n	8005792 <UART_SetConfig+0x2fe>
 8005646:	2308      	movs	r3, #8
 8005648:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800564c:	e0a1      	b.n	8005792 <UART_SetConfig+0x2fe>
 800564e:	2310      	movs	r3, #16
 8005650:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005654:	e09d      	b.n	8005792 <UART_SetConfig+0x2fe>
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a4a      	ldr	r2, [pc, #296]	@ (8005784 <UART_SetConfig+0x2f0>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d125      	bne.n	80056ac <UART_SetConfig+0x218>
 8005660:	4b45      	ldr	r3, [pc, #276]	@ (8005778 <UART_SetConfig+0x2e4>)
 8005662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005666:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800566a:	2bc0      	cmp	r3, #192	@ 0xc0
 800566c:	d016      	beq.n	800569c <UART_SetConfig+0x208>
 800566e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005670:	d818      	bhi.n	80056a4 <UART_SetConfig+0x210>
 8005672:	2b80      	cmp	r3, #128	@ 0x80
 8005674:	d00a      	beq.n	800568c <UART_SetConfig+0x1f8>
 8005676:	2b80      	cmp	r3, #128	@ 0x80
 8005678:	d814      	bhi.n	80056a4 <UART_SetConfig+0x210>
 800567a:	2b00      	cmp	r3, #0
 800567c:	d002      	beq.n	8005684 <UART_SetConfig+0x1f0>
 800567e:	2b40      	cmp	r3, #64	@ 0x40
 8005680:	d008      	beq.n	8005694 <UART_SetConfig+0x200>
 8005682:	e00f      	b.n	80056a4 <UART_SetConfig+0x210>
 8005684:	2300      	movs	r3, #0
 8005686:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800568a:	e082      	b.n	8005792 <UART_SetConfig+0x2fe>
 800568c:	2302      	movs	r3, #2
 800568e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005692:	e07e      	b.n	8005792 <UART_SetConfig+0x2fe>
 8005694:	2304      	movs	r3, #4
 8005696:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800569a:	e07a      	b.n	8005792 <UART_SetConfig+0x2fe>
 800569c:	2308      	movs	r3, #8
 800569e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056a2:	e076      	b.n	8005792 <UART_SetConfig+0x2fe>
 80056a4:	2310      	movs	r3, #16
 80056a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056aa:	e072      	b.n	8005792 <UART_SetConfig+0x2fe>
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a35      	ldr	r2, [pc, #212]	@ (8005788 <UART_SetConfig+0x2f4>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d12a      	bne.n	800570c <UART_SetConfig+0x278>
 80056b6:	4b30      	ldr	r3, [pc, #192]	@ (8005778 <UART_SetConfig+0x2e4>)
 80056b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056c4:	d01a      	beq.n	80056fc <UART_SetConfig+0x268>
 80056c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056ca:	d81b      	bhi.n	8005704 <UART_SetConfig+0x270>
 80056cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056d0:	d00c      	beq.n	80056ec <UART_SetConfig+0x258>
 80056d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056d6:	d815      	bhi.n	8005704 <UART_SetConfig+0x270>
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d003      	beq.n	80056e4 <UART_SetConfig+0x250>
 80056dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056e0:	d008      	beq.n	80056f4 <UART_SetConfig+0x260>
 80056e2:	e00f      	b.n	8005704 <UART_SetConfig+0x270>
 80056e4:	2300      	movs	r3, #0
 80056e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056ea:	e052      	b.n	8005792 <UART_SetConfig+0x2fe>
 80056ec:	2302      	movs	r3, #2
 80056ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056f2:	e04e      	b.n	8005792 <UART_SetConfig+0x2fe>
 80056f4:	2304      	movs	r3, #4
 80056f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056fa:	e04a      	b.n	8005792 <UART_SetConfig+0x2fe>
 80056fc:	2308      	movs	r3, #8
 80056fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005702:	e046      	b.n	8005792 <UART_SetConfig+0x2fe>
 8005704:	2310      	movs	r3, #16
 8005706:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800570a:	e042      	b.n	8005792 <UART_SetConfig+0x2fe>
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a17      	ldr	r2, [pc, #92]	@ (8005770 <UART_SetConfig+0x2dc>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d13a      	bne.n	800578c <UART_SetConfig+0x2f8>
 8005716:	4b18      	ldr	r3, [pc, #96]	@ (8005778 <UART_SetConfig+0x2e4>)
 8005718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800571c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005720:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005724:	d01a      	beq.n	800575c <UART_SetConfig+0x2c8>
 8005726:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800572a:	d81b      	bhi.n	8005764 <UART_SetConfig+0x2d0>
 800572c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005730:	d00c      	beq.n	800574c <UART_SetConfig+0x2b8>
 8005732:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005736:	d815      	bhi.n	8005764 <UART_SetConfig+0x2d0>
 8005738:	2b00      	cmp	r3, #0
 800573a:	d003      	beq.n	8005744 <UART_SetConfig+0x2b0>
 800573c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005740:	d008      	beq.n	8005754 <UART_SetConfig+0x2c0>
 8005742:	e00f      	b.n	8005764 <UART_SetConfig+0x2d0>
 8005744:	2300      	movs	r3, #0
 8005746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800574a:	e022      	b.n	8005792 <UART_SetConfig+0x2fe>
 800574c:	2302      	movs	r3, #2
 800574e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005752:	e01e      	b.n	8005792 <UART_SetConfig+0x2fe>
 8005754:	2304      	movs	r3, #4
 8005756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800575a:	e01a      	b.n	8005792 <UART_SetConfig+0x2fe>
 800575c:	2308      	movs	r3, #8
 800575e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005762:	e016      	b.n	8005792 <UART_SetConfig+0x2fe>
 8005764:	2310      	movs	r3, #16
 8005766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800576a:	e012      	b.n	8005792 <UART_SetConfig+0x2fe>
 800576c:	cfff69f3 	.word	0xcfff69f3
 8005770:	40008000 	.word	0x40008000
 8005774:	40013800 	.word	0x40013800
 8005778:	40021000 	.word	0x40021000
 800577c:	40004400 	.word	0x40004400
 8005780:	40004800 	.word	0x40004800
 8005784:	40004c00 	.word	0x40004c00
 8005788:	40005000 	.word	0x40005000
 800578c:	2310      	movs	r3, #16
 800578e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4aae      	ldr	r2, [pc, #696]	@ (8005a50 <UART_SetConfig+0x5bc>)
 8005798:	4293      	cmp	r3, r2
 800579a:	f040 8097 	bne.w	80058cc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800579e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80057a2:	2b08      	cmp	r3, #8
 80057a4:	d823      	bhi.n	80057ee <UART_SetConfig+0x35a>
 80057a6:	a201      	add	r2, pc, #4	@ (adr r2, 80057ac <UART_SetConfig+0x318>)
 80057a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ac:	080057d1 	.word	0x080057d1
 80057b0:	080057ef 	.word	0x080057ef
 80057b4:	080057d9 	.word	0x080057d9
 80057b8:	080057ef 	.word	0x080057ef
 80057bc:	080057df 	.word	0x080057df
 80057c0:	080057ef 	.word	0x080057ef
 80057c4:	080057ef 	.word	0x080057ef
 80057c8:	080057ef 	.word	0x080057ef
 80057cc:	080057e7 	.word	0x080057e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057d0:	f7fd fc0c 	bl	8002fec <HAL_RCC_GetPCLK1Freq>
 80057d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057d6:	e010      	b.n	80057fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057d8:	4b9e      	ldr	r3, [pc, #632]	@ (8005a54 <UART_SetConfig+0x5c0>)
 80057da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80057dc:	e00d      	b.n	80057fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057de:	f7fd fb97 	bl	8002f10 <HAL_RCC_GetSysClockFreq>
 80057e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057e4:	e009      	b.n	80057fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80057ec:	e005      	b.n	80057fa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80057ee:	2300      	movs	r3, #0
 80057f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80057f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80057fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f000 8130 	beq.w	8005a62 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005806:	4a94      	ldr	r2, [pc, #592]	@ (8005a58 <UART_SetConfig+0x5c4>)
 8005808:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800580c:	461a      	mov	r2, r3
 800580e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005810:	fbb3 f3f2 	udiv	r3, r3, r2
 8005814:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	685a      	ldr	r2, [r3, #4]
 800581a:	4613      	mov	r3, r2
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	4413      	add	r3, r2
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	429a      	cmp	r2, r3
 8005824:	d305      	bcc.n	8005832 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	429a      	cmp	r2, r3
 8005830:	d903      	bls.n	800583a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005838:	e113      	b.n	8005a62 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800583a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583c:	2200      	movs	r2, #0
 800583e:	60bb      	str	r3, [r7, #8]
 8005840:	60fa      	str	r2, [r7, #12]
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005846:	4a84      	ldr	r2, [pc, #528]	@ (8005a58 <UART_SetConfig+0x5c4>)
 8005848:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800584c:	b29b      	uxth	r3, r3
 800584e:	2200      	movs	r2, #0
 8005850:	603b      	str	r3, [r7, #0]
 8005852:	607a      	str	r2, [r7, #4]
 8005854:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005858:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800585c:	f7fa fcdc 	bl	8000218 <__aeabi_uldivmod>
 8005860:	4602      	mov	r2, r0
 8005862:	460b      	mov	r3, r1
 8005864:	4610      	mov	r0, r2
 8005866:	4619      	mov	r1, r3
 8005868:	f04f 0200 	mov.w	r2, #0
 800586c:	f04f 0300 	mov.w	r3, #0
 8005870:	020b      	lsls	r3, r1, #8
 8005872:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005876:	0202      	lsls	r2, r0, #8
 8005878:	6979      	ldr	r1, [r7, #20]
 800587a:	6849      	ldr	r1, [r1, #4]
 800587c:	0849      	lsrs	r1, r1, #1
 800587e:	2000      	movs	r0, #0
 8005880:	460c      	mov	r4, r1
 8005882:	4605      	mov	r5, r0
 8005884:	eb12 0804 	adds.w	r8, r2, r4
 8005888:	eb43 0905 	adc.w	r9, r3, r5
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	469a      	mov	sl, r3
 8005894:	4693      	mov	fp, r2
 8005896:	4652      	mov	r2, sl
 8005898:	465b      	mov	r3, fp
 800589a:	4640      	mov	r0, r8
 800589c:	4649      	mov	r1, r9
 800589e:	f7fa fcbb 	bl	8000218 <__aeabi_uldivmod>
 80058a2:	4602      	mov	r2, r0
 80058a4:	460b      	mov	r3, r1
 80058a6:	4613      	mov	r3, r2
 80058a8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058aa:	6a3b      	ldr	r3, [r7, #32]
 80058ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058b0:	d308      	bcc.n	80058c4 <UART_SetConfig+0x430>
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058b8:	d204      	bcs.n	80058c4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	6a3a      	ldr	r2, [r7, #32]
 80058c0:	60da      	str	r2, [r3, #12]
 80058c2:	e0ce      	b.n	8005a62 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80058ca:	e0ca      	b.n	8005a62 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058d4:	d166      	bne.n	80059a4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80058d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80058da:	2b08      	cmp	r3, #8
 80058dc:	d827      	bhi.n	800592e <UART_SetConfig+0x49a>
 80058de:	a201      	add	r2, pc, #4	@ (adr r2, 80058e4 <UART_SetConfig+0x450>)
 80058e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e4:	08005909 	.word	0x08005909
 80058e8:	08005911 	.word	0x08005911
 80058ec:	08005919 	.word	0x08005919
 80058f0:	0800592f 	.word	0x0800592f
 80058f4:	0800591f 	.word	0x0800591f
 80058f8:	0800592f 	.word	0x0800592f
 80058fc:	0800592f 	.word	0x0800592f
 8005900:	0800592f 	.word	0x0800592f
 8005904:	08005927 	.word	0x08005927
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005908:	f7fd fb70 	bl	8002fec <HAL_RCC_GetPCLK1Freq>
 800590c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800590e:	e014      	b.n	800593a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005910:	f7fd fb82 	bl	8003018 <HAL_RCC_GetPCLK2Freq>
 8005914:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005916:	e010      	b.n	800593a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005918:	4b4e      	ldr	r3, [pc, #312]	@ (8005a54 <UART_SetConfig+0x5c0>)
 800591a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800591c:	e00d      	b.n	800593a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800591e:	f7fd faf7 	bl	8002f10 <HAL_RCC_GetSysClockFreq>
 8005922:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005924:	e009      	b.n	800593a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005926:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800592a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800592c:	e005      	b.n	800593a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800592e:	2300      	movs	r3, #0
 8005930:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005938:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800593a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593c:	2b00      	cmp	r3, #0
 800593e:	f000 8090 	beq.w	8005a62 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005946:	4a44      	ldr	r2, [pc, #272]	@ (8005a58 <UART_SetConfig+0x5c4>)
 8005948:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800594c:	461a      	mov	r2, r3
 800594e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005950:	fbb3 f3f2 	udiv	r3, r3, r2
 8005954:	005a      	lsls	r2, r3, #1
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	085b      	lsrs	r3, r3, #1
 800595c:	441a      	add	r2, r3
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	fbb2 f3f3 	udiv	r3, r2, r3
 8005966:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005968:	6a3b      	ldr	r3, [r7, #32]
 800596a:	2b0f      	cmp	r3, #15
 800596c:	d916      	bls.n	800599c <UART_SetConfig+0x508>
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005974:	d212      	bcs.n	800599c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	b29b      	uxth	r3, r3
 800597a:	f023 030f 	bic.w	r3, r3, #15
 800597e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	085b      	lsrs	r3, r3, #1
 8005984:	b29b      	uxth	r3, r3
 8005986:	f003 0307 	and.w	r3, r3, #7
 800598a:	b29a      	uxth	r2, r3
 800598c:	8bfb      	ldrh	r3, [r7, #30]
 800598e:	4313      	orrs	r3, r2
 8005990:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	8bfa      	ldrh	r2, [r7, #30]
 8005998:	60da      	str	r2, [r3, #12]
 800599a:	e062      	b.n	8005a62 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80059a2:	e05e      	b.n	8005a62 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059a4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80059a8:	2b08      	cmp	r3, #8
 80059aa:	d828      	bhi.n	80059fe <UART_SetConfig+0x56a>
 80059ac:	a201      	add	r2, pc, #4	@ (adr r2, 80059b4 <UART_SetConfig+0x520>)
 80059ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b2:	bf00      	nop
 80059b4:	080059d9 	.word	0x080059d9
 80059b8:	080059e1 	.word	0x080059e1
 80059bc:	080059e9 	.word	0x080059e9
 80059c0:	080059ff 	.word	0x080059ff
 80059c4:	080059ef 	.word	0x080059ef
 80059c8:	080059ff 	.word	0x080059ff
 80059cc:	080059ff 	.word	0x080059ff
 80059d0:	080059ff 	.word	0x080059ff
 80059d4:	080059f7 	.word	0x080059f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059d8:	f7fd fb08 	bl	8002fec <HAL_RCC_GetPCLK1Freq>
 80059dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80059de:	e014      	b.n	8005a0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059e0:	f7fd fb1a 	bl	8003018 <HAL_RCC_GetPCLK2Freq>
 80059e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80059e6:	e010      	b.n	8005a0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059e8:	4b1a      	ldr	r3, [pc, #104]	@ (8005a54 <UART_SetConfig+0x5c0>)
 80059ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80059ec:	e00d      	b.n	8005a0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059ee:	f7fd fa8f 	bl	8002f10 <HAL_RCC_GetSysClockFreq>
 80059f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80059f4:	e009      	b.n	8005a0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80059fc:	e005      	b.n	8005a0a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80059fe:	2300      	movs	r3, #0
 8005a00:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005a08:	bf00      	nop
    }

    if (pclk != 0U)
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d028      	beq.n	8005a62 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a14:	4a10      	ldr	r2, [pc, #64]	@ (8005a58 <UART_SetConfig+0x5c4>)
 8005a16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	085b      	lsrs	r3, r3, #1
 8005a28:	441a      	add	r2, r3
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a32:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a34:	6a3b      	ldr	r3, [r7, #32]
 8005a36:	2b0f      	cmp	r3, #15
 8005a38:	d910      	bls.n	8005a5c <UART_SetConfig+0x5c8>
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a40:	d20c      	bcs.n	8005a5c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a42:	6a3b      	ldr	r3, [r7, #32]
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	60da      	str	r2, [r3, #12]
 8005a4c:	e009      	b.n	8005a62 <UART_SetConfig+0x5ce>
 8005a4e:	bf00      	nop
 8005a50:	40008000 	.word	0x40008000
 8005a54:	00f42400 	.word	0x00f42400
 8005a58:	080066c8 	.word	0x080066c8
      }
      else
      {
        ret = HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	2200      	movs	r2, #0
 8005a76:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005a7e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3730      	adds	r7, #48	@ 0x30
 8005a86:	46bd      	mov	sp, r7
 8005a88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005a8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a98:	f003 0308 	and.w	r3, r3, #8
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00a      	beq.n	8005ab6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00a      	beq.n	8005ad8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	430a      	orrs	r2, r1
 8005ad6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005adc:	f003 0302 	and.w	r3, r3, #2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00a      	beq.n	8005afa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	430a      	orrs	r2, r1
 8005af8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005afe:	f003 0304 	and.w	r3, r3, #4
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00a      	beq.n	8005b1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	430a      	orrs	r2, r1
 8005b1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b20:	f003 0310 	and.w	r3, r3, #16
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00a      	beq.n	8005b3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b42:	f003 0320 	and.w	r3, r3, #32
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00a      	beq.n	8005b60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	430a      	orrs	r2, r1
 8005b5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d01a      	beq.n	8005ba2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b8a:	d10a      	bne.n	8005ba2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00a      	beq.n	8005bc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	605a      	str	r2, [r3, #4]
  }
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b098      	sub	sp, #96	@ 0x60
 8005bd4:	af02      	add	r7, sp, #8
 8005bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005be0:	f7fb fe70 	bl	80018c4 <HAL_GetTick>
 8005be4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0308 	and.w	r3, r3, #8
 8005bf0:	2b08      	cmp	r3, #8
 8005bf2:	d12f      	bne.n	8005c54 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bf4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005bf8:	9300      	str	r3, [sp, #0]
 8005bfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 f88e 	bl	8005d24 <UART_WaitOnFlagUntilTimeout>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d022      	beq.n	8005c54 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c16:	e853 3f00 	ldrex	r3, [r3]
 8005c1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c22:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	461a      	mov	r2, r3
 8005c2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c2e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c34:	e841 2300 	strex	r3, r2, [r1]
 8005c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1e6      	bne.n	8005c0e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2220      	movs	r2, #32
 8005c44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	e063      	b.n	8005d1c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0304 	and.w	r3, r3, #4
 8005c5e:	2b04      	cmp	r3, #4
 8005c60:	d149      	bne.n	8005cf6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c62:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 f857 	bl	8005d24 <UART_WaitOnFlagUntilTimeout>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d03c      	beq.n	8005cf6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c84:	e853 3f00 	ldrex	r3, [r3]
 8005c88:	623b      	str	r3, [r7, #32]
   return(result);
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
 8005c8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	461a      	mov	r2, r3
 8005c98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ca0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ca2:	e841 2300 	strex	r3, r2, [r1]
 8005ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1e6      	bne.n	8005c7c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	3308      	adds	r3, #8
 8005cb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	e853 3f00 	ldrex	r3, [r3]
 8005cbc:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f023 0301 	bic.w	r3, r3, #1
 8005cc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	3308      	adds	r3, #8
 8005ccc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cce:	61fa      	str	r2, [r7, #28]
 8005cd0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd2:	69b9      	ldr	r1, [r7, #24]
 8005cd4:	69fa      	ldr	r2, [r7, #28]
 8005cd6:	e841 2300 	strex	r3, r2, [r1]
 8005cda:	617b      	str	r3, [r7, #20]
   return(result);
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1e5      	bne.n	8005cae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e012      	b.n	8005d1c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2220      	movs	r2, #32
 8005d02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3758      	adds	r7, #88	@ 0x58
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	603b      	str	r3, [r7, #0]
 8005d30:	4613      	mov	r3, r2
 8005d32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d34:	e04f      	b.n	8005dd6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d3c:	d04b      	beq.n	8005dd6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d3e:	f7fb fdc1 	bl	80018c4 <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	69ba      	ldr	r2, [r7, #24]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d302      	bcc.n	8005d54 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d101      	bne.n	8005d58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e04e      	b.n	8005df6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0304 	and.w	r3, r3, #4
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d037      	beq.n	8005dd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	2b80      	cmp	r3, #128	@ 0x80
 8005d6a:	d034      	beq.n	8005dd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2b40      	cmp	r3, #64	@ 0x40
 8005d70:	d031      	beq.n	8005dd6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	69db      	ldr	r3, [r3, #28]
 8005d78:	f003 0308 	and.w	r3, r3, #8
 8005d7c:	2b08      	cmp	r3, #8
 8005d7e:	d110      	bne.n	8005da2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2208      	movs	r2, #8
 8005d86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f000 f920 	bl	8005fce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2208      	movs	r2, #8
 8005d92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e029      	b.n	8005df6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	69db      	ldr	r3, [r3, #28]
 8005da8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005dac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005db0:	d111      	bne.n	8005dd6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005dba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f000 f906 	bl	8005fce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2220      	movs	r2, #32
 8005dc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e00f      	b.n	8005df6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	69da      	ldr	r2, [r3, #28]
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	4013      	ands	r3, r2
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	bf0c      	ite	eq
 8005de6:	2301      	moveq	r3, #1
 8005de8:	2300      	movne	r3, #0
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	461a      	mov	r2, r3
 8005dee:	79fb      	ldrb	r3, [r7, #7]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d0a0      	beq.n	8005d36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
	...

08005e00 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b096      	sub	sp, #88	@ 0x58
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	88fa      	ldrh	r2, [r7, #6]
 8005e18:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2222      	movs	r2, #34	@ 0x22
 8005e28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d02d      	beq.n	8005e92 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e3c:	4a40      	ldr	r2, [pc, #256]	@ (8005f40 <UART_Start_Receive_DMA+0x140>)
 8005e3e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e46:	4a3f      	ldr	r2, [pc, #252]	@ (8005f44 <UART_Start_Receive_DMA+0x144>)
 8005e48:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e50:	4a3d      	ldr	r2, [pc, #244]	@ (8005f48 <UART_Start_Receive_DMA+0x148>)
 8005e52:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	3324      	adds	r3, #36	@ 0x24
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e70:	461a      	mov	r2, r3
 8005e72:	88fb      	ldrh	r3, [r7, #6]
 8005e74:	f7fb feea 	bl	8001c4c <HAL_DMA_Start_IT>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d009      	beq.n	8005e92 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2210      	movs	r2, #16
 8005e82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2220      	movs	r2, #32
 8005e8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e051      	b.n	8005f36 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d018      	beq.n	8005ecc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ea2:	e853 3f00 	ldrex	r3, [r3]
 8005ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eaa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005eae:	657b      	str	r3, [r7, #84]	@ 0x54
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005eb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005eba:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005ebe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ec0:	e841 2300 	strex	r3, r2, [r1]
 8005ec4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005ec6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1e6      	bne.n	8005e9a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	3308      	adds	r3, #8
 8005ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed6:	e853 3f00 	ldrex	r3, [r3]
 8005eda:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ede:	f043 0301 	orr.w	r3, r3, #1
 8005ee2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	3308      	adds	r3, #8
 8005eea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005eec:	637a      	str	r2, [r7, #52]	@ 0x34
 8005eee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005ef2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ef4:	e841 2300 	strex	r3, r2, [r1]
 8005ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1e5      	bne.n	8005ecc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	3308      	adds	r3, #8
 8005f06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	e853 3f00 	ldrex	r3, [r3]
 8005f0e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	3308      	adds	r3, #8
 8005f1e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005f20:	623a      	str	r2, [r7, #32]
 8005f22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f24:	69f9      	ldr	r1, [r7, #28]
 8005f26:	6a3a      	ldr	r2, [r7, #32]
 8005f28:	e841 2300 	strex	r3, r2, [r1]
 8005f2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1e5      	bne.n	8005f00 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3758      	adds	r7, #88	@ 0x58
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	08006159 	.word	0x08006159
 8005f44:	0800628d 	.word	0x0800628d
 8005f48:	080062d3 	.word	0x080062d3

08005f4c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b08f      	sub	sp, #60	@ 0x3c
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5a:	6a3b      	ldr	r3, [r7, #32]
 8005f5c:	e853 3f00 	ldrex	r3, [r3]
 8005f60:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005f68:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f74:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f7a:	e841 2300 	strex	r3, r2, [r1]
 8005f7e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1e6      	bne.n	8005f54 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	3308      	adds	r3, #8
 8005f8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	e853 3f00 	ldrex	r3, [r3]
 8005f94:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005f9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	3308      	adds	r3, #8
 8005fa4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fa6:	61ba      	str	r2, [r7, #24]
 8005fa8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005faa:	6979      	ldr	r1, [r7, #20]
 8005fac:	69ba      	ldr	r2, [r7, #24]
 8005fae:	e841 2300 	strex	r3, r2, [r1]
 8005fb2:	613b      	str	r3, [r7, #16]
   return(result);
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1e5      	bne.n	8005f86 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8005fc2:	bf00      	nop
 8005fc4:	373c      	adds	r7, #60	@ 0x3c
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr

08005fce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fce:	b480      	push	{r7}
 8005fd0:	b095      	sub	sp, #84	@ 0x54
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fde:	e853 3f00 	ldrex	r3, [r3]
 8005fe2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ff4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ff6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ffa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ffc:	e841 2300 	strex	r3, r2, [r1]
 8006000:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1e6      	bne.n	8005fd6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	3308      	adds	r3, #8
 800600e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006010:	6a3b      	ldr	r3, [r7, #32]
 8006012:	e853 3f00 	ldrex	r3, [r3]
 8006016:	61fb      	str	r3, [r7, #28]
   return(result);
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800601e:	f023 0301 	bic.w	r3, r3, #1
 8006022:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	3308      	adds	r3, #8
 800602a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800602c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800602e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006030:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006032:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006034:	e841 2300 	strex	r3, r2, [r1]
 8006038:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800603a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1e3      	bne.n	8006008 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006044:	2b01      	cmp	r3, #1
 8006046:	d118      	bne.n	800607a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	e853 3f00 	ldrex	r3, [r3]
 8006054:	60bb      	str	r3, [r7, #8]
   return(result);
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	f023 0310 	bic.w	r3, r3, #16
 800605c:	647b      	str	r3, [r7, #68]	@ 0x44
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	461a      	mov	r2, r3
 8006064:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006066:	61bb      	str	r3, [r7, #24]
 8006068:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606a:	6979      	ldr	r1, [r7, #20]
 800606c:	69ba      	ldr	r2, [r7, #24]
 800606e:	e841 2300 	strex	r3, r2, [r1]
 8006072:	613b      	str	r3, [r7, #16]
   return(result);
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1e6      	bne.n	8006048 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2220      	movs	r2, #32
 800607e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800608e:	bf00      	nop
 8006090:	3754      	adds	r7, #84	@ 0x54
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr

0800609a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800609a:	b580      	push	{r7, lr}
 800609c:	b090      	sub	sp, #64	@ 0x40
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0320 	and.w	r3, r3, #32
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d137      	bne.n	8006126 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80060b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060b8:	2200      	movs	r2, #0
 80060ba:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80060be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	3308      	adds	r3, #8
 80060c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c8:	e853 3f00 	ldrex	r3, [r3]
 80060cc:	623b      	str	r3, [r7, #32]
   return(result);
 80060ce:	6a3b      	ldr	r3, [r7, #32]
 80060d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80060d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	3308      	adds	r3, #8
 80060dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80060de:	633a      	str	r2, [r7, #48]	@ 0x30
 80060e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060e6:	e841 2300 	strex	r3, r2, [r1]
 80060ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80060ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1e5      	bne.n	80060be <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	e853 3f00 	ldrex	r3, [r3]
 80060fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006106:	637b      	str	r3, [r7, #52]	@ 0x34
 8006108:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	461a      	mov	r2, r3
 800610e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006110:	61fb      	str	r3, [r7, #28]
 8006112:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006114:	69b9      	ldr	r1, [r7, #24]
 8006116:	69fa      	ldr	r2, [r7, #28]
 8006118:	e841 2300 	strex	r3, r2, [r1]
 800611c:	617b      	str	r3, [r7, #20]
   return(result);
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d1e6      	bne.n	80060f2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006124:	e004      	b.n	8006130 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 8006126:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006128:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800612c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800612e:	4798      	blx	r3
}
 8006130:	bf00      	nop
 8006132:	3740      	adds	r7, #64	@ 0x40
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006144:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006150:	bf00      	nop
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b09c      	sub	sp, #112	@ 0x70
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006164:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0320 	and.w	r3, r3, #32
 8006170:	2b00      	cmp	r3, #0
 8006172:	d171      	bne.n	8006258 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006174:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006176:	2200      	movs	r2, #0
 8006178:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800617c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006182:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006184:	e853 3f00 	ldrex	r3, [r3]
 8006188:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800618a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800618c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006190:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006192:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	461a      	mov	r2, r3
 8006198:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800619a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800619c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80061a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80061a2:	e841 2300 	strex	r3, r2, [r1]
 80061a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80061a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1e6      	bne.n	800617c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	3308      	adds	r3, #8
 80061b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061b8:	e853 3f00 	ldrex	r3, [r3]
 80061bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80061be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061c0:	f023 0301 	bic.w	r3, r3, #1
 80061c4:	667b      	str	r3, [r7, #100]	@ 0x64
 80061c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	3308      	adds	r3, #8
 80061cc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80061ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80061d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80061d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061d6:	e841 2300 	strex	r3, r2, [r1]
 80061da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80061dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1e5      	bne.n	80061ae <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	3308      	adds	r3, #8
 80061e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ec:	e853 3f00 	ldrex	r3, [r3]
 80061f0:	623b      	str	r3, [r7, #32]
   return(result);
 80061f2:	6a3b      	ldr	r3, [r7, #32]
 80061f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80061fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	3308      	adds	r3, #8
 8006200:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006202:	633a      	str	r2, [r7, #48]	@ 0x30
 8006204:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006206:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006208:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800620a:	e841 2300 	strex	r3, r2, [r1]
 800620e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1e5      	bne.n	80061e2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006216:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006218:	2220      	movs	r2, #32
 800621a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800621e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006220:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006222:	2b01      	cmp	r3, #1
 8006224:	d118      	bne.n	8006258 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006226:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	e853 3f00 	ldrex	r3, [r3]
 8006232:	60fb      	str	r3, [r7, #12]
   return(result);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f023 0310 	bic.w	r3, r3, #16
 800623a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800623c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	461a      	mov	r2, r3
 8006242:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006244:	61fb      	str	r3, [r7, #28]
 8006246:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006248:	69b9      	ldr	r1, [r7, #24]
 800624a:	69fa      	ldr	r2, [r7, #28]
 800624c:	e841 2300 	strex	r3, r2, [r1]
 8006250:	617b      	str	r3, [r7, #20]
   return(result);
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1e6      	bne.n	8006226 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006258:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800625a:	2200      	movs	r2, #0
 800625c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800625e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006260:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006262:	2b01      	cmp	r3, #1
 8006264:	d109      	bne.n	800627a <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8006266:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006268:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800626c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800626e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8006272:	4611      	mov	r1, r2
 8006274:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006276:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006278:	e004      	b.n	8006284 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800627a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800627c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006280:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006282:	4798      	blx	r3
}
 8006284:	bf00      	nop
 8006286:	3770      	adds	r7, #112	@ 0x70
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006298:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2201      	movs	r2, #1
 800629e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d10b      	bne.n	80062c0 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 80062b4:	0852      	lsrs	r2, r2, #1
 80062b6:	b292      	uxth	r2, r2
 80062b8:	4611      	mov	r1, r2
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80062be:	e004      	b.n	80062ca <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	4798      	blx	r3
}
 80062ca:	bf00      	nop
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b086      	sub	sp, #24
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062de:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062e6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062fa:	2b80      	cmp	r3, #128	@ 0x80
 80062fc:	d109      	bne.n	8006312 <UART_DMAError+0x40>
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	2b21      	cmp	r3, #33	@ 0x21
 8006302:	d106      	bne.n	8006312 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	2200      	movs	r2, #0
 8006308:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800630c:	6978      	ldr	r0, [r7, #20]
 800630e:	f7ff fe1d 	bl	8005f4c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800631c:	2b40      	cmp	r3, #64	@ 0x40
 800631e:	d109      	bne.n	8006334 <UART_DMAError+0x62>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2b22      	cmp	r3, #34	@ 0x22
 8006324:	d106      	bne.n	8006334 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	2200      	movs	r2, #0
 800632a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800632e:	6978      	ldr	r0, [r7, #20]
 8006330:	f7ff fe4d 	bl	8005fce <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800633a:	f043 0210 	orr.w	r2, r3, #16
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800634a:	6978      	ldr	r0, [r7, #20]
 800634c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800634e:	bf00      	nop
 8006350:	3718      	adds	r7, #24
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b084      	sub	sp, #16
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006362:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800637e:	bf00      	nop
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b088      	sub	sp, #32
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	e853 3f00 	ldrex	r3, [r3]
 800639a:	60bb      	str	r3, [r7, #8]
   return(result);
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063a2:	61fb      	str	r3, [r7, #28]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	461a      	mov	r2, r3
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	61bb      	str	r3, [r7, #24]
 80063ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b0:	6979      	ldr	r1, [r7, #20]
 80063b2:	69ba      	ldr	r2, [r7, #24]
 80063b4:	e841 2300 	strex	r3, r2, [r1]
 80063b8:	613b      	str	r3, [r7, #16]
   return(result);
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1e6      	bne.n	800638e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2220      	movs	r2, #32
 80063c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063d8:	bf00      	nop
 80063da:	3720      	adds	r7, #32
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800642a:	2b01      	cmp	r3, #1
 800642c:	d101      	bne.n	8006432 <HAL_UARTEx_DisableFifoMode+0x16>
 800642e:	2302      	movs	r3, #2
 8006430:	e027      	b.n	8006482 <HAL_UARTEx_DisableFifoMode+0x66>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2224      	movs	r2, #36	@ 0x24
 800643e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f022 0201 	bic.w	r2, r2, #1
 8006458:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006460:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2220      	movs	r2, #32
 8006474:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3714      	adds	r7, #20
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b084      	sub	sp, #16
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
 8006496:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d101      	bne.n	80064a6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80064a2:	2302      	movs	r3, #2
 80064a4:	e02d      	b.n	8006502 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2224      	movs	r2, #36	@ 0x24
 80064b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f022 0201 	bic.w	r2, r2, #1
 80064cc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	683a      	ldr	r2, [r7, #0]
 80064de:	430a      	orrs	r2, r1
 80064e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 f850 	bl	8006588 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2220      	movs	r2, #32
 80064f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3710      	adds	r7, #16
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800650a:	b580      	push	{r7, lr}
 800650c:	b084      	sub	sp, #16
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
 8006512:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800651a:	2b01      	cmp	r3, #1
 800651c:	d101      	bne.n	8006522 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800651e:	2302      	movs	r3, #2
 8006520:	e02d      	b.n	800657e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2201      	movs	r2, #1
 8006526:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2224      	movs	r2, #36	@ 0x24
 800652e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f022 0201 	bic.w	r2, r2, #1
 8006548:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	683a      	ldr	r2, [r7, #0]
 800655a:	430a      	orrs	r2, r1
 800655c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f812 	bl	8006588 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2220      	movs	r2, #32
 8006570:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
	...

08006588 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006594:	2b00      	cmp	r3, #0
 8006596:	d108      	bne.n	80065aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80065a8:	e031      	b.n	800660e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80065aa:	2308      	movs	r3, #8
 80065ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80065ae:	2308      	movs	r3, #8
 80065b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	0e5b      	lsrs	r3, r3, #25
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	f003 0307 	and.w	r3, r3, #7
 80065c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	0f5b      	lsrs	r3, r3, #29
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	f003 0307 	and.w	r3, r3, #7
 80065d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065d2:	7bbb      	ldrb	r3, [r7, #14]
 80065d4:	7b3a      	ldrb	r2, [r7, #12]
 80065d6:	4911      	ldr	r1, [pc, #68]	@ (800661c <UARTEx_SetNbDataToProcess+0x94>)
 80065d8:	5c8a      	ldrb	r2, [r1, r2]
 80065da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80065de:	7b3a      	ldrb	r2, [r7, #12]
 80065e0:	490f      	ldr	r1, [pc, #60]	@ (8006620 <UARTEx_SetNbDataToProcess+0x98>)
 80065e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80065f0:	7bfb      	ldrb	r3, [r7, #15]
 80065f2:	7b7a      	ldrb	r2, [r7, #13]
 80065f4:	4909      	ldr	r1, [pc, #36]	@ (800661c <UARTEx_SetNbDataToProcess+0x94>)
 80065f6:	5c8a      	ldrb	r2, [r1, r2]
 80065f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80065fc:	7b7a      	ldrb	r2, [r7, #13]
 80065fe:	4908      	ldr	r1, [pc, #32]	@ (8006620 <UARTEx_SetNbDataToProcess+0x98>)
 8006600:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006602:	fb93 f3f2 	sdiv	r3, r3, r2
 8006606:	b29a      	uxth	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800660e:	bf00      	nop
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	080066e0 	.word	0x080066e0
 8006620:	080066e8 	.word	0x080066e8

08006624 <memset>:
 8006624:	4402      	add	r2, r0
 8006626:	4603      	mov	r3, r0
 8006628:	4293      	cmp	r3, r2
 800662a:	d100      	bne.n	800662e <memset+0xa>
 800662c:	4770      	bx	lr
 800662e:	f803 1b01 	strb.w	r1, [r3], #1
 8006632:	e7f9      	b.n	8006628 <memset+0x4>

08006634 <__libc_init_array>:
 8006634:	b570      	push	{r4, r5, r6, lr}
 8006636:	4d0d      	ldr	r5, [pc, #52]	@ (800666c <__libc_init_array+0x38>)
 8006638:	4c0d      	ldr	r4, [pc, #52]	@ (8006670 <__libc_init_array+0x3c>)
 800663a:	1b64      	subs	r4, r4, r5
 800663c:	10a4      	asrs	r4, r4, #2
 800663e:	2600      	movs	r6, #0
 8006640:	42a6      	cmp	r6, r4
 8006642:	d109      	bne.n	8006658 <__libc_init_array+0x24>
 8006644:	4d0b      	ldr	r5, [pc, #44]	@ (8006674 <__libc_init_array+0x40>)
 8006646:	4c0c      	ldr	r4, [pc, #48]	@ (8006678 <__libc_init_array+0x44>)
 8006648:	f000 f826 	bl	8006698 <_init>
 800664c:	1b64      	subs	r4, r4, r5
 800664e:	10a4      	asrs	r4, r4, #2
 8006650:	2600      	movs	r6, #0
 8006652:	42a6      	cmp	r6, r4
 8006654:	d105      	bne.n	8006662 <__libc_init_array+0x2e>
 8006656:	bd70      	pop	{r4, r5, r6, pc}
 8006658:	f855 3b04 	ldr.w	r3, [r5], #4
 800665c:	4798      	blx	r3
 800665e:	3601      	adds	r6, #1
 8006660:	e7ee      	b.n	8006640 <__libc_init_array+0xc>
 8006662:	f855 3b04 	ldr.w	r3, [r5], #4
 8006666:	4798      	blx	r3
 8006668:	3601      	adds	r6, #1
 800666a:	e7f2      	b.n	8006652 <__libc_init_array+0x1e>
 800666c:	080066f8 	.word	0x080066f8
 8006670:	080066f8 	.word	0x080066f8
 8006674:	080066f8 	.word	0x080066f8
 8006678:	080066fc 	.word	0x080066fc

0800667c <memcpy>:
 800667c:	440a      	add	r2, r1
 800667e:	4291      	cmp	r1, r2
 8006680:	f100 33ff 	add.w	r3, r0, #4294967295
 8006684:	d100      	bne.n	8006688 <memcpy+0xc>
 8006686:	4770      	bx	lr
 8006688:	b510      	push	{r4, lr}
 800668a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800668e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006692:	4291      	cmp	r1, r2
 8006694:	d1f9      	bne.n	800668a <memcpy+0xe>
 8006696:	bd10      	pop	{r4, pc}

08006698 <_init>:
 8006698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800669a:	bf00      	nop
 800669c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800669e:	bc08      	pop	{r3}
 80066a0:	469e      	mov	lr, r3
 80066a2:	4770      	bx	lr

080066a4 <_fini>:
 80066a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066a6:	bf00      	nop
 80066a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066aa:	bc08      	pop	{r3}
 80066ac:	469e      	mov	lr, r3
 80066ae:	4770      	bx	lr
